import {createElement as A,fragment as B} from "./runtime.js";export const a=A(B,{},[A('h1',{},[`Test`]),A('p',{},[`The `,A('code',{},[`test`]),` command runs the `,A('a',{href:"/reference/testing"},[`tests`]),` defined for the project in a headless`,`
`,`browser (Chrome or Firefox).`]),A('pre',{},[A('code',{class:"language-bash"},[A('span',{class:"line"},[`➔ mint test`]),A('span',{class:"line"},[`Mint - Running tests`]),A('span',{class:"line"},[`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`]),A('span',{class:"line"},[`⚙ Starting browser...`]),A('span',{class:"line"},[`⚙ Test server started: http://127.0.0.1:3001/`]),A('span',{class:"line"},[`⚙ Running tests:`]),A('span',{class:"line"},[`.`]),A('span',{class:"line"},[`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`]),A('span',{class:"line"},[`1 tests`]),A('span',{class:"line"},[`  ➔ 1 passed`]),A('span',{class:"line"},[`  ➔ 0 failed`]),A('span',{class:"line"},[`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`]),A('span',{class:"line"},[`All done in 807.191ms!`])])]),A('h2',{},[`Watch mode`]),A('p',{},[`You can tell the test runner to re-run the tests when files change with`,`
`,`the `,A('code',{},[`--watch`]),` (`,A('code',{},[`-w`]),`) flag.`]),A('h2',{},[`Running tests manually`]),A('p',{},[`You can run the tests manually by providing the `,A('code',{},[`--manual`]),` (`,A('code',{},[`-m`]),`) flag and`,`
`,`opening the displayed URL in a browser.`]),A('p',{},[`In this mode the server is continously running and watching for changes so`,`
`,`you can make modifications and rerun the tests by refreshing the page.`]),A('h2',{},[`Help`]),A('pre',{},[A('code',{class:"language-bash"},[A('span',{class:"line"},[`➔ mint test --help`]),A('span',{class:"line"},[`Usage:`]),A('span',{class:"line"},[`  mint test [flags...] <test> [arg...]`]),A('span',{class:"line"},[``]),A('span',{class:"line"},[`Runs the tests defined for the project.`]),A('span',{class:"line"},[``]),A('span',{class:"line"},[`Flags:`]),A('span',{class:"line"},[`  --browser, -b (default: "chrome")                                    # Which browser to run the tests in (chrome, firefox).`]),A('span',{class:"line"},[`  --browser-host, -x (default: ENV["BROWSER_HOST"]? || "127.0.0.1")    # Target host, useful when hosted on another machine.`]),A('span',{class:"line"},[`  --browser-port, -c (default: (ENV["BROWSER_PORT"]? || "3001").to_i)  # Target port, useful when hosted on another machine.`]),A('span',{class:"line"},[`  --env, -e                                                            # Loads the given .env file.`]),A('span',{class:"line"},[`  --generate-source-maps                                               # If specified, source maps will be generated.`]),A('span',{class:"line"},[`  --help                                                               # Displays help for the current command.`]),A('span',{class:"line"},[`  --host, -h (default: ENV["HOST"]? || "127.0.0.1")                    # Host to serve the tests on.`]),A('span',{class:"line"},[`  --manual, -m                                                         # Start the test server for manual testing.`]),A('span',{class:"line"},[`  --port, -p (default: (ENV["PORT"]? || "3001").to_i)                  # Port to serve the tests on.`]),A('span',{class:"line"},[`  --reporter, -r (default: "dot")                                      # Which reporter to use (dot, documentation),`]),A('span',{class:"line"},[`  --runtime                                                            # If specified, the supplied runtime will be used instead of the default.`]),A('span',{class:"line"},[`  --watch, -w                                                          # Watch files for changes and rerun tests.`]),A('span',{class:"line"},[``]),A('span',{class:"line"},[`Arguments:`]),A('span',{class:"line"},[`  test                                                                 # The path to the test file to run.`])])])]),b=a;export default b;