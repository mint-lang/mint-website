import {a} from "./97.js";export const b=a(`[{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">WebSocket</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"onOpen"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"onMessage"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"onError"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"onClose"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"reconnectOnClose"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"url"}],"d":"<p>Data structure for WebSocket configurations.</p>","l":"WebSocket.Config(type)","n":"WebSocket.Config"},{"k":10,"e":[{"k":0,"a":[{"n":"String"},{"n":"Number"},{"n":"Number"}],"b":false,"n":"Separator"},{"k":0,"a":[{"n":"String"},{"n":"Number"},{"n":"Number"}],"b":false,"n":"Text"},{"k":0,"a":[{"n":"Number"},{"n":"Number"}],"b":false,"n":"DoubleQuote"},{"k":0,"a":[{"n":"Number"},{"n":"Number"}],"b":false,"n":"LF"},{"k":0,"a":[{"n":"Number"},{"n":"Number"}],"b":false,"n":"CR"}],"d":"<p>Represents a token (character or characters) while parsing a CSV document.</p>","l":"CSV.Token(type)","n":"CSV.Token"},{"k":10,"e":[{"k":0,"b":false,"n":"InsideEscapedString"},{"k":0,"b":false,"n":"JustParsedSeparator"},{"k":0,"b":false,"n":"JustParsedNewline"},{"k":0,"b":false,"n":"JustParsedField"},{"k":0,"b":false,"n":"JustParsedCR"},{"k":0,"b":false,"n":"Beginning"}],"d":"<p>Represents the state for parsing a CSV document.</p>","l":"CSV.State(type)","n":"CSV.State"},{"k":10,"e":[{"k":0,"a":[{"n":"CSV.Token"}],"b":false,"n":"UnexpectedTokenCarriageReturn"},{"k":0,"a":[{"n":"CSV.Token"}],"b":false,"n":"UnexpectedTokenAtStartOfLine"},{"k":0,"a":[{"n":"CSV.Token"}],"b":false,"n":"UnexpectedTokenAfterField"},{"k":0,"a":[{"n":"CSV.Token"}],"b":false,"n":"UnexpectedToken"}],"d":"<p>Represents an error of parsing a CSV document.</p>","l":"CSV.Error(type)","n":"CSV.Error"},{"k":10,"e":[{"k":0,"b":false,"n":"Windows"},{"k":0,"b":false,"n":"Unix"}],"d":"<p>Represents a line ending for generating CSV documents.</p>","l":"CSV.LineEnding(type)","n":"CSV.LineEnding"},{"k":10,"p":["value"],"e":[{"k":0,"a":[{"n":"value"}],"b":false,"n":"Just"},{"k":0,"b":false,"n":"Nothing"}],"d":"<p>Represent values that may or may not exist.</p>","l":"Maybe(type)","n":"Maybe"},{"k":10,"p":["error","value"],"e":[{"k":0,"a":[{"n":"error"}],"b":false,"n":"Err"},{"k":0,"a":[{"n":"value"}],"b":false,"n":"Ok"}],"d":"<p>Data structure for a computation that can fail.</p>","l":"Result(type)","n":"Result"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"action"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Bool</span>)","n":"condition"},{"k":0,"b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Number</span>)","n":"shortcut"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"bypassFocused"}],"d":"<p>Represents a shortcut:</p><ul><li><strong>bypassFocused</strong> - whether or not trigger the action if something is in focus</li><li><strong>condition</strong> - the function that evaluates if the action should be called</li><li><strong>action</strong> - the function to execute when the shortcut is pressed</li><li><strong>shortcut</strong> - the array of <strong>keyCodes</strong> that needs to be matched</li></ul>","l":"Provider.Shortcuts.Shortcut(type)","n":"Provider.Shortcuts.Shortcut"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Provider</span>.<span class=\\"type\\">Shortcuts</span>.<span class=\\"type\\">Shortcut</span>)","n":"shortcuts"}],"d":"<p>Record for <code>Provider.Shortcuts</code>.</p>","l":"Provider.Shortcuts(type)","n":"Provider.Shortcuts"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"callback"},{"k":0,"b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"element"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"rootMargin"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"threshold"}],"d":"<p>Represents a subscription for <code>Provider.Intersection</code></p>","l":"Provider.Intersection(type)","n":"Provider.Intersection"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"ticks"}],"d":"<p>Represents a subscription for <code>Provider.Tick</code></p>","l":"Provider.Tick(type)","n":"Provider.Tick"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>))","n":"elements"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"clicks"}],"d":"<p>Represents a subscription for <code>Provider.OutsideClick</code></p>","l":"Provider.OutsideClick(type)","n":"Provider.OutsideClick"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"frames"}],"d":"<p>Represents a subscription for <code>Provider.AnimationFrame</code></p>","l":"Provider.AnimationFrame(type)","n":"Provider.AnimationFrame"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"downs"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"ups"}],"d":"<p>Represents a subscription for <code>Provider.Keyboard</code></p>","l":"Provider.Keyboard(type)","n":"Provider.Keyboard"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"clicks"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"moves"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"ups"}],"d":"<p>Represents a subscription for <code>Provider.Mouse</code></p>","l":"Provider.Mouse(type)","n":"Provider.Mouse"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"changes"},{"k":0,"b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"element"}],"d":"<p>Represents a subscription for <code>Provider.Mutation</code></p>","l":"Provider.Mutation(type)","n":"Provider.Mutation"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"resizes"}],"d":"<p>Represents a subscription for <code>Provider.Resize</code></p>","l":"Provider.Resize(type)","n":"Provider.Resize"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Bool</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"changes"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"query"}],"d":"<p>Represents a subscription for <code>Provider.MediaQuery</code></p>","l":"Provider.MediaQuery(type)","n":"Provider.MediaQuery"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Dimensions</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"changes"},{"k":0,"b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"element"}],"d":"<p>Represents a subscription for <code>Provider.ElementSize</code></p>","l":"Provider.ElementSize(type)","n":"Provider.ElementSize"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"scrolls"}],"d":"<p>Represents a subscription for <code>Provider.Scroll</code></p>","l":"Provider.Scroll(type)","n":"Provider.Scroll"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"onTabOut"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"onTabIn"},{"k":0,"b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"element"}],"d":"<p>Represents a subscription for <code>Provider.TabFocus</code></p>","l":"Provider.TabFocus(type)","n":"Provider.TabFocus"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"downs"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"moves"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"ups"}],"d":"<p>Represents a subscription for <code>Provider.Pointer</code></p>","l":"Provider.Pointer(type)","n":"Provider.Pointer"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Url</span>, <span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"changes"}],"d":"<p>Represents a subscription for <code>Provider.Url</code></p>","l":"Provider.Url(type)","n":"Provider.Url"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"caseInsensitive"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"multiline"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"unicode"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"global"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"sticky"}],"d":"<p>Represents the options for a regular expression.</p>","l":"Regexp.Options(type)","n":"Regexp.Options"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>)","n":"submatches"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"match"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"index"}],"d":"<p>Represents a regular expression match.</p>","l":"Regexp.Match(type)","n":"Regexp.Match"},{"k":10,"e":[{"k":0,"d":"<p>The storage API is disabled.</p>","b":false,"n":"SecurityError"},{"k":0,"d":"<p>The storage is full (over the quota, usually 5MB).</p>","b":false,"n":"QuotaExceeded"},{"k":0,"d":"<p>The key in the storage does not exist.</p>","b":false,"n":"NotFound"},{"k":0,"d":"<p>The reason for the failure is unknown.</p>","b":false,"n":"Unknown"}],"d":"<p>Represents the possible failures when dealing with the <code>Storage</code> API.</p>","l":"Storage.Error(type)","n":"Storage.Error"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Dimensions</span>","n":"dimensions"},{"k":0,"b":false,"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"target"}],"d":"<p>A data structure for the resize obeservers entry.</p>","l":"ResizeObserver.Entry(type)","n":"ResizeObserver.Entry"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"target"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"type"}],"d":"<p>A data structure for the mutation obeservers entry.</p>","l":"MutationObserver.Entry(type)","n":"MutationObserver.Entry"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"height"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"bottom"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"width"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"right"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"left"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"top"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"x"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"y"}],"d":"<p>Record for the dimensions of an element on the screen.</p>","l":"Dom.Dimensions(type)","n":"Dom.Dimensions"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"value"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Represents a HTTP header</p>","l":"Http.Header(type)","n":"Http.Header"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Http</span>.<span class=\\"type\\">Header</span>)","n":"headers"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"withCredentials"},{"k":0,"b":false,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Body</span>","n":"body"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"method"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"url"}],"d":"<p>Represents an HTTP request.</p>","l":"Http.Request(type)","n":"Http.Request"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Map</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>)","n":"headers"},{"k":0,"b":false,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">ResponseBody</span>","n":"body"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"bodyString"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"status"}],"d":"<p>Represents an HTTP response.</p>","l":"Http.Response(type)","n":"Http.Response"},{"k":10,"e":[{"k":0,"a":[{"n":"Object"}],"b":false,"n":"JSON"},{"k":0,"a":[{"n":"Object"}],"b":false,"n":"HTML"},{"k":0,"a":[{"n":"String"}],"b":false,"n":"Text"},{"k":0,"a":[{"n":"Object"}],"b":false,"n":"XML"},{"k":0,"a":[{"n":"File"}],"b":false,"n":"File"}],"d":"<p>Represents the body of a HTTP response.</p>","l":"Http.ResponseBody(type)","n":"Http.ResponseBody"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Map</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>)","n":"headers"},{"k":0,"b":false,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Error</span>","n":"type"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"status"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"url"}],"d":"<p>Represents an HTTP request which failed to load.</p>","l":"Http.ErrorResponse(type)","n":"Http.ErrorResponse"},{"k":10,"e":[{"k":0,"d":"<p>The request cannot be loaded because of a network failure</p>","b":false,"n":"NetworkError"},{"k":0,"d":"<p>The client (browser) aborted the request</p>","b":false,"n":"Aborted"},{"k":0,"d":"<p>The request timed out</p>","b":false,"n":"Timeout"},{"k":0,"d":"<p>The url is malformed and cannot be loaded</p>","b":false,"n":"BadUrl"}],"d":"<p>Represents the possible failures of an HTTP request.</p>","l":"Http.Error(type)","n":"Http.Error"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"hostname"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"protocol"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"origin"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"search"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"path"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"hash"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"host"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"port"}],"d":"<p>Represents a URL</p>","l":"Url(type)","n":"Url"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">NativeEvent</span>","n":"event"},{"k":0,"b":false,"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"clipboardData"},{"k":0,"b":false,"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"dataTransfer"},{"k":0,"b":false,"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"currentTarget"},{"k":0,"b":false,"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"target"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"defaultPrevented"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"cancelable"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isTrusted"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"bubbles"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"repeat"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"shiftKey"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"metaKey"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"ctrlKey"},{"k":0,"b":false,"t":"<span class=\\"type\\">Bool</span>","n":"altKey"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"animationName"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"pseudoElement"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"propertyName"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"locale"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"type"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"data"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"key"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"elapsedTime"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"eventPhase"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"timeStamp"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"charCode"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"location"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"keyCode"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"buttons"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"button"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"detail"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"which"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"clientX"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"clientY"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"screenX"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"screenY"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"offsetX"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"offsetY"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"layerX"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"layerY"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"pageX"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"pageY"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"deltaMode"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"deltaX"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"deltaY"},{"k":0,"b":false,"t":"<span class=\\"type\\">Number</span>","n":"deltaZ"}],"d":"<p>Represents an HTML event.</p>","l":"Html.Event(type)","n":"Html.Event"},{"k":10,"e":[{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"toOrdinalSuffix"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Month</span>, <span class=\\"type\\">String</span>)","n":"toMonthName"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Month</span>, <span class=\\"type\\">String</span>)","n":"toMonthAbbreviation"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Weekday</span>, <span class=\\"type\\">String</span>)","n":"toWeekdayName"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Weekday</span>, <span class=\\"type\\">String</span>)","n":"toWeekdayAbbreviation"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"amPm"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"someSecondsAgo"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"someMinutesAgo"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"someHoursAgo"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"someDaysAgo"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"someMonthsAgo"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"someYearsAgo"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"inSomeSeconds"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"inSomeMinutes"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"inSomeHours"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"inSomeDays"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"inSomeMonths"},{"k":0,"b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">String</span>)","n":"inSomeYears"},{"k":0,"b":false,"t":"<span class=\\"type\\">String</span>","n":"rightNow"}],"d":"<p>Represents a language for time formatting.</p>","l":"Time.Format.Language(type)","n":"Time.Format.Language"},{"k":10,"e":[{"k":0,"a":[{"n":"Number"}],"b":false,"n":"Milliseconds"},{"k":0,"a":[{"n":"Number"}],"b":false,"n":"Seconds"},{"k":0,"a":[{"n":"Number"}],"b":false,"n":"Minutes"},{"k":0,"a":[{"n":"Number"}],"b":false,"n":"Hours"},{"k":0,"a":[{"n":"Number"}],"b":false,"n":"Days"},{"k":0,"a":[{"n":"Number"}],"b":false,"n":"Weeks"},{"k":0,"a":[{"n":"Number"}],"b":false,"n":"Months"},{"k":0,"a":[{"n":"Number"}],"b":false,"n":"Years"}],"d":"<p>Represents a duration (span) of time.</p>","l":"Time.Span(type)","n":"Time.Span"},{"k":10,"e":[{"k":0,"b":false,"n":"January"},{"k":0,"b":false,"n":"February"},{"k":0,"b":false,"n":"March"},{"k":0,"b":false,"n":"April"},{"k":0,"b":false,"n":"May"},{"k":0,"b":false,"n":"June"},{"k":0,"b":false,"n":"July"},{"k":0,"b":false,"n":"August"},{"k":0,"b":false,"n":"September"},{"k":0,"b":false,"n":"October"},{"k":0,"b":false,"n":"November"},{"k":0,"b":false,"n":"December"}],"d":"<p>Represents a month of the week in the Gregorian calendar.</p>","l":"Month(type)","n":"Month"},{"k":10,"e":[{"k":0,"b":false,"n":"Monday"},{"k":0,"b":false,"n":"Tuesday"},{"k":0,"b":false,"n":"Wednesday"},{"k":0,"b":false,"n":"Thursday"},{"k":0,"b":false,"n":"Friday"},{"k":0,"b":false,"n":"Saturday"},{"k":0,"b":false,"n":"Sunday"}],"d":"<p>Represents a day of the week in the Gregorian calendar.</p>","l":"Weekday(type)","n":"Weekday"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">a</span>)","n":"method"},{"t":"<span class=\\"type\\">Number</span>","n":"delay"}],"d":"<p>Returns a debounced version of the function which when called repeatedly\\nunder inside delay, will be called only once.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Function</span>.<span class=\\"variable\\">debounce</span>(() { <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;Hello World!&quot;</span>) }, <span class=\\"number\\">100</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">a</span>)","n":"debounce"},{"k":4,"a":[{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"method"},{"t":"<span class=\\"type\\">Number</span>","n":"delay"}],"d":"<p>Same as <code>debounce</code> but for functions with only one argument.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Function</span>.<span class=\\"variable\\">debounce1</span>((<span class=\\"variable\\">argument</span> : <span class=\\"type\\">String</span>) { <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"variable\\">argument</span>) }, <span class=\\"number\\">100</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"debounce1"}],"d":"<p>This module provides functions for working with functions.</p>","l":"Function","n":"Function"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"locale"}],"d":"<p>Sets the current locale.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Locale</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;en&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"set"},{"k":4,"d":"<p>Returns the current locale.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Locale</span>.<span class=\\"variable\\">get</span>() <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;en&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">String</span>)","n":"get"}],"d":"<p>This module provides functions to get and change the locale of the\\napplication.</p>","l":"Locale","n":"Locale"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">WebSocket</span>","n":"socket"}],"d":"<p>Closes the connection. If the <code>reconnectOnClose</code> flag was specified then the\\nconnection will reconnect using this function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">WebSocket</span>.<span class=\\"variable\\">close</span>(<span class=\\"variable\\">websocket</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"close"},{"k":4,"a":[{"t":"<span class=\\"type\\">WebSocket</span>","n":"socket"}],"d":"<p>Closes the connection without reconnecting, even if the <code>reconnectOnClose</code>\\nflag was set.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">WebSocket</span>.<span class=\\"variable\\">closeWithoutReconnecting</span>(<span class=\\"variable\\">websocket</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"closeWithoutReconnecting"},{"k":4,"a":[{"t":"<span class=\\"type\\">WebSocket</span>.<span class=\\"type\\">Config</span>","n":"config"}],"d":"<p>Creates a <code>WebSocket</code> connection using the provided configuration. If\\n<code>reconnectOnClose</code> is set then when a connection is closed it tries to\\nreconnect, using the same configuration (basically calls open again).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">WebSocket</span>.<span class=\\"variable\\">open</span>({\\n</span><span class=\\"line\\">  <span class=\\"variable\\">url</span>: <span class=\\"string\\">&quot;wss://echo.websocket.org&quot;</span>,\\n</span><span class=\\"line\\">  <span class=\\"variable\\">reconnectOnClose</span>: <span class=\\"keyword\\">true</span>,\\n</span><span class=\\"line\\">  <span class=\\"variable\\">onMessage</span>: <span class=\\"variable\\">handleMessage</span>,\\n</span><span class=\\"line\\">  <span class=\\"variable\\">onError</span>: <span class=\\"variable\\">handleError</span>,\\n</span><span class=\\"line\\">  <span class=\\"variable\\">onClose</span>: <span class=\\"variable\\">handleClose</span>,\\n</span><span class=\\"line\\">  <span class=\\"variable\\">onOpen</span>: <span class=\\"variable\\">handleOpen</span>\\n</span><span class=\\"line\\">})</span></code></pre>","b":false,"t":"<span class=\\"type\\">WebSocket</span>","n":"open"},{"k":4,"a":[{"t":"<span class=\\"type\\">WebSocket</span>","n":"socket"},{"t":"<span class=\\"type\\">String</span>","n":"data"}],"d":"<p>Sends the data to the connection.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">WebSocket</span>.<span class=\\"variable\\">send</span>(<span class=\\"variable\\">websocket</span>, <span class=\\"string\\">&quot;some data&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"send"}],"d":"<p>This module provides functions for working with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\\">WebSocket Web API</a>.</p>","l":"WebSocket","n":"WebSocket"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">SearchParams</span>","n":"params"},{"t":"<span class=\\"type\\">String</span>","n":"key"},{"t":"<span class=\\"type\\">String</span>","n":"value"},{"v":"<span class=\\"keyword\\">true</span>","t":"<span class=\\"type\\">Bool</span>","n":"appendBlank"}],"d":"<p>Appends a specified key-value pair. It appends empty strings by default,\\nwhich can be controlled with the last parameter.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">append</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">SearchParams</span>","n":"append"},{"k":4,"a":[{"t":"<span class=\\"type\\">SearchParams</span>","n":"params"},{"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Returns a <code>Bool</code> indicating if such a search parameter exists.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">fromString</span>(<span class=\\"string\\">&quot;key=value&quot;</span>)\\n</span><span class=\\"line\\"> <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">contains</span>(<span class=\\"string\\">&quot;key&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"contains"},{"k":4,"a":[{"t":"<span class=\\"type\\">SearchParams</span>","n":"params"},{"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Deletes the given search parameter, and its associated value(s), from the\\nlist of all search parameters.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">fromString</span>(<span class=\\"string\\">&quot;key=value&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">delete</span>(<span class=\\"string\\">&quot;key&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">SearchParams</span>","n":"delete"},{"k":4,"d":"<p>Returns an empty <code>SearchParams</code> object.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">empty</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">SearchParams</span>","n":"empty"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Parses a string into a <code>SearchParams</code> object.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">fromString</span>(<span class=\\"string\\">&quot;key=value&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">SearchParams</span>","n":"fromString"},{"k":4,"a":[{"t":"<span class=\\"type\\">SearchParams</span>","n":"params"},{"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Returns the first value associated of the key.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">fromString</span>(<span class=\\"string\\">&quot;key=value&quot;</span>)\\n</span><span class=\\"line\\"> <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">get</span>(<span class=\\"string\\">&quot;key&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;value&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">String</span>)","n":"get"},{"k":4,"a":[{"t":"<span class=\\"type\\">SearchParams</span>","n":"params"},{"t":"<span class=\\"type\\">String</span>","n":"key"},{"t":"<span class=\\"type\\">String</span>","n":"value"},{"v":"<span class=\\"keyword\\">false</span>","t":"<span class=\\"type\\">Bool</span>","n":"removeBlank"}],"d":"<p>Sets the value associated to the key. If there were several values, deletes\\nthe others. If <code>removeBlank</code> is true it will delete the key if the value\\nis blank.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">SearchParams</span>","n":"set"},{"k":4,"a":[{"t":"<span class=\\"type\\">SearchParams</span>","n":"params"}],"d":"<p>Returns a string containing a query string suitable for use in a URL.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"> <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)\\n</span><span class=\\"line\\"> <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">SearchParams</span>.<span class=\\"variable\\">toString</span>()) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;key=value&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"toString"}],"d":"<p>This module provides functions for working with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\\">URLSearchParams Web\\nAPI</a>.</p>","l":"SearchParams","n":"SearchParams"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"size"}],"d":"<p>Formats a number as a file size.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">FileSize</span>.<span class=\\"variable\\">format</span>(<span class=\\"number\\">0</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;0 B&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">FileSize</span>.<span class=\\"variable\\">format</span>(<span class=\\"number\\">1000</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;1 kB&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">FileSize</span>.<span class=\\"variable\\">format</span>(<span class=\\"number\\">1000000</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;1 MB&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">FileSize</span>.<span class=\\"variable\\">format</span>(<span class=\\"number\\">1000000000</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;1 GB&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"format"}],"d":"<p>This module provides functions to format file sizes in human\\nreadable format.</p>","l":"FileSize","n":"FileSize"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">CSV</span>.<span class=\\"type\\">Token</span>","n":"token"}],"d":"<p>Returns the string representation of a CSV token.</p>","b":false,"t":"<span class=\\"type\\">String</span>","n":"tokenToString"},{"k":4,"a":[{"t":"<span class=\\"type\\">CSV</span>.<span class=\\"type\\">Token</span>","n":"token"}],"d":"<p>Returns the size of a CSV token.</p>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"tokenSize"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"input"},{"t":"<span class=\\"type\\">String</span>","n":"separator"}],"d":"<p>Scans the input using the separator and returns an array of CSV tokens,</p>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">CSV</span>.<span class=\\"type\\">Token</span>)","n":"scan"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">CSV</span>.<span class=\\"type\\">Token</span>)","n":"tokens"},{"t":"<span class=\\"type\\">CSV</span>.<span class=\\"type\\">State</span>","n":"state"},{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>))","n":"result"}],"d":"<p>Parses the next step.</p>","b":true,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">CSV</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Array</span>(<span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>)))","n":"parseNext"}],"d":"<p>This module contains functions for parsing a CSV.</p>","l":"CSV.Parser","n":"CSV.Parser"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"input"},{"v":"<span class=\\"string\\">&quot;,&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"separator"}],"d":"<p>Parses a CSV into an two dimensional array (rows and columns). The</p>","b":true,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">CSV</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Array</span>(<span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>)))","n":"parse"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>))","n":"rows"},{"v":"<span class=\\"string\\">&quot;,&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"separator"},{"v":"<span class=\\"type\\">CSV</span>.<span class=\\"type\\">LineEnding</span>.<span class=\\"type\\">Unix</span>","t":"<span class=\\"type\\">CSV</span>.<span class=\\"type\\">LineEnding</span>","n":"lineEnding"}],"d":"<p>Takes a two dimensional array and writes it to a csv string.</p>","b":true,"t":"<span class=\\"type\\">String</span>","n":"generate"}],"d":"<p>The main module for parsing and generating CSVs.</p>","l":"CSV","n":"CSV"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">File</span>","n":"file"}],"d":"<p>Prompts a dialog for the saving the file.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> file =\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">await</span> <span class=\\"type\\">File</span>.<span class=\\"variable\\">select</span>(<span class=\\"string\\">&quot;*&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"type\\">File</span>.<span class=\\"variable\\">download</span>(<span class=\\"variable\\">file</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"download"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"contents"},{"t":"<span class=\\"type\\">String</span>","n":"name"},{"t":"<span class=\\"type\\">String</span>","n":"type"}],"d":"<p>Creates a new file from the contents, name and mime-type.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">File</span>.<span class=\\"variable\\">fromString</span>(<span class=\\"string\\">&quot;Some contents...&quot;</span>, <span class=\\"string\\">&quot;test.txt&quot;</span>, <span class=\\"string\\">&quot;text/plain&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">File</span>","n":"fromString"},{"k":4,"a":[{"t":"<span class=\\"type\\">File</span>","n":"file"}],"d":"<p>Returns the mime-type of the file.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">File</span>.<span class=\\"variable\\">fromString</span>(<span class=\\"string\\">&quot;Some contents...&quot;</span>, <span class=\\"string\\">&quot;test.txt&quot;</span>, <span class=\\"string\\">&quot;text/plain&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">File</span>.<span class=\\"variable\\">mimeType</span>()) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;text/plain&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"mimeType"},{"k":4,"a":[{"t":"<span class=\\"type\\">File</span>","n":"file"}],"d":"<p>Returns the name of the file.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">File</span>.<span class=\\"variable\\">fromString</span>(<span class=\\"string\\">&quot;Some contents...&quot;</span>, <span class=\\"string\\">&quot;test.txt&quot;</span>, <span class=\\"string\\">&quot;text/plain&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">File</span>.<span class=\\"variable\\">name</span>()) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;test.txt&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"name"},{"k":4,"a":[{"t":"<span class=\\"type\\">File</span>","n":"file"}],"d":"<p>Reads the contents of the file as an <code>ArrayBuffer</code>.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> file =\\n</span><span class=\\"line\\">  <span class=\\"type\\">File</span>.<span class=\\"variable\\">create</span>(<span class=\\"string\\">&quot;Some content...&quot;</span>, <span class=\\"string\\">&quot;test.txt&quot;</span>, <span class=\\"string\\">&quot;text/plain&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"keyword\\">let</span> buffer =\\n</span><span class=\\"line\\">  <span class=\\"type\\">File</span>.<span class=\\"variable\\">readAsArrayBuffer</span>(<span class=\\"variable\\">file</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">ArrayBuffer</span>)","n":"readAsArrayBuffer"},{"k":4,"a":[{"t":"<span class=\\"type\\">File</span>","n":"file"}],"d":"<p>Reads the contents of the given file as a Data URL.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> files =\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">await</span> <span class=\\"type\\">File</span>.<span class=\\"variable\\">select</span>(<span class=\\"string\\">&quot;text/plain&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"keyword\\">let</span> dataUrl =\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">await</span> <span class=\\"type\\">File</span>.<span class=\\"variable\\">readAsDataURL</span>(<span class=\\"variable\\">file</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"variable\\">dataUrl</span> <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;data:text/plain;....&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">String</span>)","n":"readAsDataURL"},{"k":4,"a":[{"t":"<span class=\\"type\\">File</span>","n":"file"}],"d":"<p>Reads the contents of the given file as a <code>String</code>.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> file =\\n</span><span class=\\"line\\">  <span class=\\"type\\">File</span>.<span class=\\"variable\\">create</span>(<span class=\\"string\\">&quot;Some content...&quot;</span>, <span class=\\"string\\">&quot;test.txt&quot;</span>, <span class=\\"string\\">&quot;text/plain&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"keyword\\">let</span> string =\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">await</span> <span class=\\"type\\">File</span>.<span class=\\"variable\\">readAsString</span>(<span class=\\"variable\\">file</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"variable\\">string</span> <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;Some content...&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">String</span>)","n":"readAsString"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"accept"}],"d":"<p>Opens the browsers file dialog for selecting a single file.</p><ul><li>It will not resolve if the user cancels the dialog.</li><li>The mime type can be restricted.</li></ul><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> file =\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">await</span> <span class=\\"type\\">File</span>.<span class=\\"variable\\">select</span>(<span class=\\"string\\">&quot;application/json&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">File</span>)","n":"select"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"accept"}],"d":"<p>Opens the browsers file dialog for selecting multiple files.</p><ul><li>It will not resolve if the user cancels the dialog.</li><li>The mime type can be restricted.</li></ul><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> files =\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">await</span> <span class=\\"type\\">File</span>.<span class=\\"variable\\">selectMultiple</span>(<span class=\\"string\\">&quot;application/json&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Array</span>(<span class=\\"type\\">File</span>))","n":"selectMultiple"},{"k":4,"a":[{"t":"<span class=\\"type\\">File</span>","n":"file"}],"d":"<p>Returns the size of the file in bytes.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">File</span>.<span class=\\"variable\\">fromString</span>(<span class=\\"string\\">&quot;Some contents...&quot;</span>, <span class=\\"string\\">&quot;test.txt&quot;</span>, <span class=\\"string\\">&quot;text/plain&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">File</span>.<span class=\\"variable\\">size</span>()) <span class=\\"operator\\">==</span> <span class=\\"number\\">16</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"size"}],"d":"<p>This module provides functions for getting, creating and reading files in\\ndifferent formats.</p>","l":"File","n":"File"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>))","n":"errors"},{"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Returns the first error for the key in the errors.</p><pre><code><span class=\\"line\\">([<span class=\\"type\\">Validation</span>.<span class=\\"variable\\">isNotBlank</span>(<span class=\\"string\\">&quot;&quot;</span>, {<span class=\\"string\\">&quot;name&quot;</span>, <span class=\\"string\\">&quot;Please enter the name.&quot;</span>})]\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Validation</span>.<span class=\\"variable\\">merge</span>\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Validation</span>.<span class=\\"variable\\">getFirstError</span>(<span class=\\"string\\">&quot;name&quot;</span>)) <span class=\\"comment\\">// &quot;Please enter the name.&quot;</span></span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">String</span>)","n":"getFirstError"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"value"},{"t":"<span class=\\"type\\">Number</span>","n":"size"},{"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>)","n":"error"}],"d":"<p>Returns the error if the string does not have the exact number of characters.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Validation</span>.<span class=\\"variable\\">hasExactNumberOfCharacters</span>(\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;&quot;</span>,\\n</span><span class=\\"line\\">  <span class=\\"number\\">5</span>,\\n</span><span class=\\"line\\">  {<span class=\\"string\\">&quot;zip&quot;</span>, <span class=\\"string\\">&quot;Zip code does is not 5 characters!&quot;</span>}) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">    <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>({<span class=\\"string\\">&quot;zip&quot;</span>, <span class=\\"string\\">&quot;Zip code does is not 5 characters!&quot;</span>})</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>))","n":"hasExactNumberOfCharacters"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"value"},{"t":"<span class=\\"type\\">Number</span>","n":"size"},{"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>)","n":"error"}],"d":"<p>Returns the error if the string does not have at least the number of\\ncharacters.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Validation</span>.<span class=\\"variable\\">hasMinimumNumberOfCharacters</span>(\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;&quot;</span>,\\n</span><span class=\\"line\\">  <span class=\\"number\\">5</span>,\\n</span><span class=\\"line\\">  {<span class=\\"string\\">&quot;zip&quot;</span>, <span class=\\"string\\">&quot;Zip code does is not 5 characters or more!&quot;</span>}) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">    <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>({<span class=\\"string\\">&quot;zip&quot;</span>, <span class=\\"string\\">&quot;Zip code does is not 5 characters or more!&quot;</span>})</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>))","n":"hasMinimumNumberOfCharacters"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"value"},{"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>)","n":"error"}],"d":"<p>Returns the error when the string is blank (contains only whitespace).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Validation</span>.<span class=\\"variable\\">isNotBlank</span>(<span class=\\"string\\">&quot;&quot;</span>, {<span class=\\"string\\">&quot;name&quot;</span>, <span class=\\"string\\">&quot;Name is empty!&quot;</span>}) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">  <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>({<span class=\\"string\\">&quot;name&quot;</span>, <span class=\\"string\\">&quot;Name is empty!&quot;</span>})</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>))","n":"isNotBlank"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"value"},{"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>)","n":"error"}],"d":"<p>Returns the error if the string is not a number.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Validation</span>.<span class=\\"variable\\">isNumber</span>(<span class=\\"string\\">&quot;foo&quot;</span>, {<span class=\\"string\\">&quot;multiplicand&quot;</span>, <span class=\\"string\\">&quot;Multiplicand is not a number!&quot;</span>}) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">  <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>({<span class=\\"string\\">&quot;multiplicand&quot;</span>, <span class=\\"string\\">&quot;Multiplicand is not a number!&quot;</span>})</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>))","n":"isNumber"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"value"},{"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>)","n":"error"}],"d":"<p>Returns the error if the string does not consist of just digits.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Validation</span>.<span class=\\"variable\\">isDigits</span>(<span class=\\"string\\">&quot;1234x&quot;</span>, {<span class=\\"string\\">&quot;zip&quot;</span>, <span class=\\"string\\">&quot;Zip code is not just digits!&quot;</span>}) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">  <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>({<span class=\\"string\\">&quot;zip&quot;</span>, <span class=\\"string\\">&quot;Zip code is not just digits!&quot;</span>})</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>))","n":"isDigits"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"value"},{"t":"<span class=\\"variable\\">a</span>","n":"value2"},{"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>)","n":"error"}],"d":"<p>Returns the error if the two values are not the same.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Validation</span>.<span class=\\"variable\\">isSame</span>(\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;password&quot;</span>,\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;confirmation&quot;</span>,\\n</span><span class=\\"line\\">  {<span class=\\"string\\">&quot;confirmation&quot;</span>, <span class=\\"string\\">&quot;Confirmation is not the same!&quot;</span>}) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">    <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>({<span class=\\"string\\">&quot;confirmation&quot;</span>, <span class=\\"string\\">&quot;Confirmation is not the same!&quot;</span>})</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>))","n":"isSame"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"value"},{"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>)","n":"error"}],"d":"<p>Returns the error if the string is not an email address.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Validation</span>.<span class=\\"variable\\">isValidEmail</span>(\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;test&quot;</span>,\\n</span><span class=\\"line\\">  {<span class=\\"string\\">&quot;email&quot;</span>, <span class=\\"string\\">&quot;Email is not a valid email address!&quot;</span>}) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">    <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>({<span class=\\"string\\">&quot;email&quot;</span>, <span class=\\"string\\">&quot;Email is not a valid email address!&quot;</span>})</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>))","n":"isValidEmail"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>)))","n":"errors"}],"d":"<p>Merges the result of many validations into a <code>Map(String, Array(String))</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Validation</span>.<span class=\\"variable\\">merge</span>([\\n</span><span class=\\"line\\">  <span class=\\"type\\">Validation</span>.<span class=\\"variable\\">isNotBlank</span>(<span class=\\"string\\">&quot;&quot;</span>, {<span class=\\"string\\">&quot;firstName&quot;</span>, <span class=\\"string\\">&quot;Please enter the first name.&quot;</span>}),\\n</span><span class=\\"line\\">  <span class=\\"type\\">Validation</span>.<span class=\\"variable\\">isNotBlank</span>(<span class=\\"string\\">&quot;&quot;</span>, {<span class=\\"string\\">&quot;message&quot;</span>, <span class=\\"string\\">&quot;Please enter the message.&quot;</span>}),\\n</span><span class=\\"line\\">]) <span class=\\"operator\\">==</span> (<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;firstName&quot;</span>, <span class=\\"string\\">&quot;Please enter the first name.&quot;</span>)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;message&quot;</span>, <span class=\\"string\\">&quot;Please enter the message.&quot;</span>))</span></code></pre>","b":true,"t":"<span class=\\"type\\">Map</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>))","n":"merge"},{"k":5,"d":"<p>A regular expression to validate an email address.</p>","v":"<span class=\\"type\\">Regexp</span>.<span class=\\"variable\\">createWithOptions</span>(\\n  <span class=\\"string\\">&quot;^[a-zA-Z0-9.!#$%&amp;'*+\\\\\\\\/=?^_\`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA&quot; \\\\</span>\\n  <span class=\\"string\\">&quot;-Z0-9])?(?:\\\\\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$&quot;</span>,\\n    {\\n      <span class=\\"variable\\">caseInsensitive</span>: <span class=\\"keyword\\">true</span>,\\n      <span class=\\"variable\\">multiline</span>: <span class=\\"keyword\\">false</span>,\\n      <span class=\\"variable\\">unicode</span>: <span class=\\"keyword\\">false</span>,\\n      <span class=\\"variable\\">global</span>: <span class=\\"keyword\\">false</span>,\\n      <span class=\\"variable\\">sticky</span>: <span class=\\"keyword\\">false</span>\\n    })","b":true,"n":"EMAIL_REGEXP"},{"k":5,"d":"<p>A regular expression to validate digits.</p>","v":"<span class=\\"type\\">Regexp</span>.<span class=\\"variable\\">createWithOptions</span>(<span class=\\"string\\">&quot;^[0-9]+$&quot;</span>,\\n  {\\n    <span class=\\"variable\\">caseInsensitive</span>: <span class=\\"keyword\\">true</span>,\\n    <span class=\\"variable\\">multiline</span>: <span class=\\"keyword\\">false</span>,\\n    <span class=\\"variable\\">unicode</span>: <span class=\\"keyword\\">false</span>,\\n    <span class=\\"variable\\">global</span>: <span class=\\"keyword\\">false</span>,\\n    <span class=\\"variable\\">sticky</span>: <span class=\\"keyword\\">false</span>\\n  })","b":true,"n":"DIGITS_REGEXP"}],"d":"<p>A module for validating values (mostly used in forms).</p><p>A validation function gets the value (and other parameters) and an error to\\nreturn if the validation fails.</p><p>The error is a <code>Tuple(String, String)</code> where the first parameter is the key of\\nthe field and the second is the error message.</p><p>The result of the validation is a <code>Maybe(error)</code>. If it's <code>Maybe.Nothing</code> then\\nthere validation succeeded, otherwise it will be a <code>Maybe.Just(error)</code> meaning\\nthe validation failed.</p><p>Here is an example of doing validation for a contact form:</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Validation</span>.<span class=\\"variable\\">merge</span>(\\n</span><span class=\\"line\\">  [\\n</span><span class=\\"line\\">    <span class=\\"type\\">Validation</span>.<span class=\\"variable\\">isNotBlank</span>(<span class=\\"variable\\">firstName</span>,\\n</span><span class=\\"line\\">      {<span class=\\"string\\">&quot;firstName&quot;</span>, <span class=\\"string\\">&quot;Please enter the first name.&quot;</span>}),\\n</span><span class=\\"line\\">    <span class=\\"type\\">Validation</span>.<span class=\\"variable\\">isNotBlank</span>(<span class=\\"variable\\">lastName</span>,\\n</span><span class=\\"line\\">      {<span class=\\"string\\">&quot;lastName&quot;</span>, <span class=\\"string\\">&quot;Please enter the last name.&quot;</span>}),\\n</span><span class=\\"line\\">    <span class=\\"type\\">Validation</span>.<span class=\\"variable\\">isNotBlank</span>(<span class=\\"variable\\">message</span>,\\n</span><span class=\\"line\\">      {<span class=\\"string\\">&quot;message&quot;</span>, <span class=\\"string\\">&quot;Please enter the message.&quot;</span>}),\\n</span><span class=\\"line\\">    <span class=\\"type\\">Validation</span>.<span class=\\"variable\\">isValidEmail</span>(<span class=\\"variable\\">email</span>,\\n</span><span class=\\"line\\">      {<span class=\\"string\\">&quot;email&quot;</span>, <span class=\\"string\\">&quot;Please enter the a valid email address.&quot;</span>}),\\n</span><span class=\\"line\\">    <span class=\\"type\\">Validation</span>.<span class=\\"variable\\">isNotBlank</span>(<span class=\\"variable\\">email</span>,\\n</span><span class=\\"line\\">      {<span class=\\"string\\">&quot;email&quot;</span>, <span class=\\"string\\">&quot;Please enter the email address.&quot;</span>}),\\n</span><span class=\\"line\\">  ])</span></code></pre><p>Here the <code>errors</code> variable contains a <code>Map(String, Array(String))</code> where they\\nkey of the field is the the key of the error and the value of the field is the\\nerror messages for that key.</p><p>If the <code>errors</code> is empty that means that there are no errors.</p>","l":"Validation","n":"Validation"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Returns the Base64-decoded version of <code>value</code> as a <code>Result</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Base64</span>.<span class=\\"variable\\">decode</span>(<span class=\\"string\\">&quot;dGVzdA==&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;test&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>)","n":"decode"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Returns the Base64-encoded version of <code>value</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Base64</span>.<span class=\\"variable\\">encode</span>(<span class=\\"string\\">&quot;test&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;dGVzdA==&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"encode"}],"d":"<p>This module provides functions for the encoding and decoding of binary data\\nusing a <a href=\\"https://en.wikipedia.org/wiki/Base64\\">Base64</a> representation.</p>","l":"Base64","n":"Base64"},{"k":6,"e":[{"k":4,"d":"<p>Blurs the active element of the page.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Dom</span>.<span class=\\"variable\\">blurActiveElement</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"blurActiveElement"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"},{"t":"<span class=\\"type\\">String</span>","n":"selector"}],"d":"<p>Returns if the element is in an other element that matches the selector.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">div</span>) = <span class=\\"type\\">Document</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">containedInSelector</span>(<span class=\\"variable\\">div</span>, <span class=\\"string\\">&quot;body&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Bool</span>","n":"containedInSelector"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"base"},{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns if the base element contains the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">div</span>) =  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">body</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;body&quot;</span>) {\\n</span><span class=\\"line\\">    <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">contains</span>(<span class=\\"variable\\">body</span>, <span class=\\"variable\\">div</span>)\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"contains"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"tag"}],"d":"<p>Creates a new <code>Dom.Element</code> using the tag.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Dom</span>.<span class=\\"variable\\">createElement</span>(<span class=\\"string\\">&quot;div&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"createElement"},{"k":4,"a":[{"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"maybeElement"}],"d":"<p>Tries to focus the given element (if exists) in the next 150 milliseconds.\\nFails silently if there is no element or if the element cannot be focused.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Dom</span>.<span class=\\"variable\\">focus</span>(<span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;input&quot;</span>))</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"focus"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Focuses the first focusable descendant of the element. Fails silently if\\nthere is no element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">body</span>) = <span class=\\"type\\">Document</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;body&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">focusFirst</span>(<span class=\\"variable\\">body</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"focusFirst"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Tries to focus the element in the next 150 milliseconds.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">input</span>) = <span class=\\"type\\">Document</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;input&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">focusWhenVisible</span>(<span class=\\"variable\\">input</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Result</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">Void</span>))","n":"focusWhenVisible"},{"k":4,"d":"<p>Returns the active (focused) element of the page.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getActiveElement</span>() <span class=\\"operator\\">==</span> <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;body&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"getActiveElement"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"},{"t":"<span class=\\"type\\">String</span>","n":"attribute"}],"d":"<p>If the attribute is present, it will return its value on the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">element</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementById</span>(<span class=\\"string\\">&quot;my-div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getAttribute</span>(<span class=\\"variable\\">element</span>, <span class=\\"string\\">&quot;id&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;my-div&quot;</span>\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">String</span>)","n":"getAttribute"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns all child elements of the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">body</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;body&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getChildren</span>(<span class=\\"variable\\">body</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"getChildren"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns the <code>clientHeight</code> of the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">div</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getClientHeight</span>(<span class=\\"variable\\">div</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">200</span>\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"getClientHeight"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns the <code>clientWidth</code> of the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">div</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getClientWidth</span>(<span class=\\"variable\\">div</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">200</span>\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"getClientWidth"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns the dimensions (<code>BoundingClientRect</code>) of the element.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getDimensions</span>(<span class=\\"type\\">Dom</span>.<span class=\\"variable\\">createElement</span>(<span class=\\"string\\">&quot;div&quot;</span>)) = {\\n</span><span class=\\"line\\">  bottom: 0,\\n</span><span class=\\"line\\">  height: 0,\\n</span><span class=\\"line\\">  width: 0,\\n</span><span class=\\"line\\">  right: 0,\\n</span><span class=\\"line\\">  left: 0,\\n</span><span class=\\"line\\">  top: 0,\\n</span><span class=\\"line\\">  x: 0,\\n</span><span class=\\"line\\">  y: 0\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Dimensions</span>","n":"getDimensions"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"id"}],"d":"<p>Gets the element with the id from anywhere in the page.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementById</span>(<span class=\\"string\\">&quot;my-div&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"getElementById"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"selector"}],"d":"<p>Gets the first element to match the selector from anywhere in the page.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;body section &gt; p:first-child&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"getElementBySelector"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"left"},{"t":"<span class=\\"type\\">Number</span>","n":"top"}],"d":"<p>Gets the element from a point on the screen.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementFromPoint</span>(<span class=\\"number\\">0</span>, <span class=\\"number\\">0</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"getElementFromPoint"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"},{"t":"<span class=\\"type\\">String</span>","n":"selector"}],"d":"<p>Gets all descendant elements of an element which are matching the selector.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">body</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;body&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementsBySelector</span>(<span class=\\"variable\\">body</span>, <span class=\\"string\\">&quot;a[name]&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"getElementsBySelector"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns all focusable descendant elements.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">body</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;body&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getFocusableElements</span>(<span class=\\"variable\\">body</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"getFocusableElements"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns the scrollable height of the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">div</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getScrollHeight</span>(<span class=\\"variable\\">div</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span>\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"getScrollHeight"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns the horizontal scroll position of the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">div</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getScrollLeft</span>(<span class=\\"variable\\">div</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span>\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"getScrollLeft"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns the vertical scroll position of the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">div</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getScrollTop</span>(<span class=\\"variable\\">div</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span>\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"getScrollTop"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns the scrollable width of the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">div</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getScrollWidth</span>(<span class=\\"variable\\">div</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">300</span>\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"getScrollWidth"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"},{"t":"<span class=\\"type\\">String</span>","n":"selector"}],"d":"<p>Returns the table of contents of the element for the selectors.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">body</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;body&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getTableOfContents</span>(<span class=\\"variable\\">body</span>, <span class=\\"string\\">&quot;h1, h2, h3, h4&quot;</span>) <span class=\\"operator\\">==</span> [\\n</span><span class=\\"line\\">    {<span class=\\"string\\">&quot;h1&quot;</span>, <span class=\\"string\\">&quot;The title of the page&quot;</span>, <span class=\\"string\\">&quot;the-title-of-the-page&quot;</span>},\\n</span><span class=\\"line\\">    {<span class=\\"string\\">&quot;h2&quot;</span>, <span class=\\"string\\">&quot;A subtitle of the page&quot;</span>, <span class=\\"string\\">&quot;a-subtitle-of-the-page&quot;</span>},\\n</span><span class=\\"line\\">    {<span class=\\"string\\">&quot;h3&quot;</span>, <span class=\\"string\\">&quot;A sub-subtitle of the page&quot;</span>, <span class=\\"string\\">&quot;a-sub-subtitle-of-the-page&quot;</span>}\\n</span><span class=\\"line\\">  ]\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>, <span class=\\"type\\">String</span>))","n":"getTableOfContents"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns the tagname of the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">body</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;body&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getTagName</span>(<span class=\\"variable\\">body</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;BODY&quot;</span>\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"getTagName"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns the text content of the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">body</span>) = <span class=\\"type\\">Document</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;body&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getTextContent</span>(<span class=\\"variable\\">body</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"getTextContent"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"text"},{"t":"<span class=\\"type\\">String</span>","n":"font"}],"d":"<p>Measures width of the text with the font using the canvas.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getTextWidth</span>(<span class=\\"string\\">&quot;Hello There&quot;</span>, <span class=\\"string\\">&quot;20px sans-serif&quot;</span>) = 300</span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"getTextWidth"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Gets the value as string form an element. If the element supports value\\nit will return it, otherwise it returns an empty string.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">input</span>) = <span class=\\"type\\">Document</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;input[value=hello]&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getValue</span>(<span class=\\"variable\\">input</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;hello&quot;</span>\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"getValue"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"},{"t":"<span class=\\"type\\">String</span>","n":"selector"}],"d":"<p>Returns whether or not the element matches the selector.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Dom</span>.<span class=\\"variable\\">matches</span>(<span class=\\"type\\">Dom</span>.<span class=\\"variable\\">createElement</span>(<span class=\\"string\\">&quot;div&quot;</span>), <span class=\\"string\\">&quot;div&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Dom</span>.<span class=\\"variable\\">matches</span>(<span class=\\"type\\">Dom</span>.<span class=\\"variable\\">createElement</span>(<span class=\\"string\\">&quot;div&quot;</span>), <span class=\\"string\\">&quot;p&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"matches"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"},{"t":"<span class=\\"type\\">Number</span>","n":"left"},{"t":"<span class=\\"type\\">Number</span>","n":"top"}],"d":"<p>Scrolls the element to the position.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">body</span>) = <span class=\\"type\\">Document</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;body&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">scrollTo</span>(<span class=\\"variable\\">body</span>, <span class=\\"number\\">10</span>, <span class=\\"number\\">10</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"scrollTo"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"},{"t":"<span class=\\"type\\">String</span>","n":"attribute"},{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Sets the attribute to the value of the element and returns the element.</p><pre><code><span class=\\"line\\"><span class=\\"string\\">&quot;a&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">createElement</span>\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">setAttribute</span>(<span class=\\"string\\">&quot;name&quot;</span>, <span class=\\"string\\">&quot;test&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"setAttribute"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"},{"t":"<span class=\\"type\\">String</span>","n":"name"},{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Sets the style to the value of the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">div</span>) = <span class=\\"type\\">Document</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"variable\\">div</span>\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">setStyle</span>(<span class=\\"string\\">&quot;background&quot;</span>, <span class=\\"string\\">&quot;red&quot;</span>)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">setStyle</span>(<span class=\\"string\\">&quot;color&quot;</span>, <span class=\\"string\\">&quot;white&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"setStyle"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"},{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Sets the value property of an element. It is used to set the value of <code>input</code>\\nfields programmatically.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">input</span>) = <span class=\\"type\\">Document</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;input&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">setValue</span>(<span class=\\"variable\\">input</span>, <span class=\\"string\\">&quot;Hello World!&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"setValue"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"},{"t":"<span class=\\"type\\">Number</span>","n":"left"},{"t":"<span class=\\"type\\">Number</span>","n":"top"}],"d":"<p>Smooth scroll the given element to the given position.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">body</span>) = <span class=\\"type\\">Document</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;body&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">smoothScrollTo</span>(<span class=\\"variable\\">body</span>, <span class=\\"number\\">10</span>, <span class=\\"number\\">10</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"smoothScrollTo"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns the distance from the outer border of the element (including its\\nmargin) to the left padding edge of the closest positioned ancestor element.</p><p>If the element is not in the DOM or not an element is passed (for example\\n<code>TextNode</code>) then the value will be <code>0</code>.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">div</span>) = <span class=\\"type\\">Document</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">offsetLeft</span>(<span class=\\"variable\\">div</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"offsetLeft"},{"k":4,"a":[{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Returns the distance from the outer border of the element (including its\\nmargin) to the top padding edge of the closest positioned ancestor element.</p><p>If the element is not in the DOM or not an element is passed (for example\\n<code>TextNode</code>) then the value will be <code>0</code>.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">div</span>) = <span class=\\"type\\">Document</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">offsetTop</span>(<span class=\\"variable\\">div</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"offsetTop"}],"d":"<p>This module provides functions for working with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\\">DOM</a>.</p>","l":"Dom","n":"Dom"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Bool</span>","n":"assertion"},{"t":"<span class=\\"variable\\">a</span>","n":"value"},{"v":"[]","t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>)","n":"values"}],"d":"<p>If the assertion is <code>false</code>, the message is written to the console. Supports\\nstring substitution. For more information check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/assert\\"><code>console.assert()</code></a>\\nfunction.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">assert</span>(<span class=\\"keyword\\">false</span>, <span class=\\"string\\">&quot;Message...&quot;</span>) <span class=\\"comment\\">// This will not print the message.</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">assert</span>(<span class=\\"keyword\\">true</span>, <span class=\\"string\\">&quot;Message...&quot;</span>) <span class=\\"comment\\">// This will print the message.</span></span></code></pre>","b":true,"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">Bool</span>, <span class=\\"variable\\">a</span>, <span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>))","n":"assert"},{"k":4,"d":"<p>Clears the console. For more information check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/clear\\"><code>console.clear()</code></a>\\nfunction.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">clear</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Void</span>","n":"clear"},{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"label"}],"d":"<p>Logs the number of times that this particular call to <code>count</code> has been called.\\nReturns the label passed along with the current count. For more information\\ncheck out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/count\\"><code>console.count()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">count</span>()          <span class=\\"comment\\">// {&quot;Default&quot;, 1}</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">count</span>(<span class=\\"string\\">&quot;Default&quot;</span>) <span class=\\"comment\\">// {&quot;Default&quot;, 2}</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">count</span>(<span class=\\"string\\">&quot;Test&quot;</span>)    <span class=\\"comment\\">// {&quot;Test&quot;, 1}</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">Number</span>)","n":"count"},{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"label"}],"d":"<p>Resets the counter used with <code>count</code>. Returns the label passed along with the\\ncurrent count. For more information check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/countReset\\"><code>console.countReset()</code></a>\\nfunction.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">count</span>()         <span class=\\"comment\\">// {&quot;Default&quot;, 1}</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">count</span>()         <span class=\\"comment\\">// {&quot;Default&quot;, 2}</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">countReset</span>()    <span class=\\"comment\\">// {&quot;Default&quot;, 0}</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">Number</span>)","n":"countReset"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"value"},{"v":"[]","t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>)","n":"values"}],"d":"<p>Outputs a message to the Web Console at the &quot;debug&quot; log level. The message is\\nonly displayed to the user if the console is configured to display debug\\noutput. Supports string substitution. For more information check out the\\n<a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/debug\\"><code>console.debug()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">debug</span>(<span class=\\"string\\">&quot;The message...&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"variable\\">a</span>, <span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>))","n":"debug"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"value"}],"d":"<p>Displays an interactive list of the properties of the generated JavaScript\\nobject. For more information check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/dir\\"><code>console.dir()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">dir</span>(\`{key: &quot;value&quot;}\`)</span></code></pre>","b":false,"t":"<span class=\\"variable\\">a</span>","n":"dir"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"value"}],"d":"<p>Displays an interactive tree of the descendant elements of the specified\\nXML/HTML element. For more information check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml\\"><code>console.dirxml()</code></a>\\nfunction.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">element</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;body&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Console</span>.<span class=\\"variable\\">dirxml</span>(<span class=\\"variable\\">element</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"variable\\">a</span>","n":"dirxml"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"value"},{"v":"[]","t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>)","n":"values"}],"d":"<p>Outputs an error message to the Web Console. Supports string substitution.\\nFor more information check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/error\\"><code>console.error()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">error</span>(<span class=\\"string\\">&quot;Something went wrong!&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"variable\\">a</span>, <span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>))","n":"error"},{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"label"}],"d":"<p>Creates a new inline group in the Web Console log. For more information check\\nout the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/group\\"><code>console.group()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">group</span>(<span class=\\"string\\">&quot;My Group&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;Some information...&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">groupEnd</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"group"},{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"label"}],"d":"<p>Creates a new inline group in the Web Console log. The new group is created\\ncollapsed. For more information check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed\\"><code>console.groupCollapsed()</code></a>\\nfunction.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">groupCollapsed</span>(<span class=\\"string\\">&quot;My Group&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;Some information...&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">groupEnd</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"groupCollapsed"},{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"label"}],"d":"<p>Exits the current inline group in the Web Console. For more information check\\nout the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/groupEnd\\"><code>console.groupEnd()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">group</span>(<span class=\\"string\\">&quot;My Group&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;Some information...&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">groupEnd</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"groupEnd"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"value"},{"v":"[]","t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>)","n":"values"}],"d":"<p>Outputs an informational message to the Web Console. Supports string\\nsubstitution. For more information check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/info\\"><code>console.info()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">info</span>(<span class=\\"string\\">&quot;I'm cute!&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"variable\\">a</span>, <span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>))","n":"info"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"value"},{"v":"[]","t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>)","n":"values"}],"d":"<p>Outputs a message to the Web Console. Supports string substitution. For more\\ninformation check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/log\\"><code>console.log()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;Hello &quot;</span>, [<span class=\\"string\\">&quot;World&quot;</span>, <span class=\\"string\\">&quot;!&quot;</span>]) =&gt; <span class=\\"string\\">&quot;Hello World!&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"variable\\">a</span>, <span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>))","n":"log"},{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"profileName"}],"d":"<p><strong>NON-STANDARD</strong>: Starts recording a performance profile. For more information\\ncheck out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/profile\\"><code>console.profile()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">profile</span>(<span class=\\"string\\">&quot;My Profile&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"comment\\">// Do something...</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">profileEnd</span>(<span class=\\"string\\">&quot;My Profile&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"profile"},{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"profileName"}],"d":"<p><strong>NON-STANDARD</strong>: Stops recording a previously started performance profile.\\nFor more information check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd\\"><code>console.profileEnd()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">profile</span>(<span class=\\"string\\">&quot;My Profile&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"comment\\">// Do something...</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">profileEnd</span>(<span class=\\"string\\">&quot;My Profile&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"profileEnd"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"data"},{"v":"[]","t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>)","n":"columns"}],"d":"<p>Logs data as a table. For more information check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/table\\"><code>console.table()</code></a>\\nfunction.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">table</span>({ <span class=\\"variable\\">name</span>: <span class=\\"string\\">&quot;Joe&quot;</span> })</span></code></pre>","b":true,"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"variable\\">a</span>, <span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>))","n":"table"},{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"label"}],"d":"<p>Starts a timer. For more information check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/time\\"><code>console.time()</code></a>\\nfunction.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">time</span>(<span class=\\"string\\">&quot;My Timer&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"comment\\">// Do some stuff...</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">timeEnd</span>(<span class=\\"string\\">&quot;My Timer&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"time"},{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"label"}],"d":"<p>Stops a timer that was previously started. For more information check out the\\n<a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd\\"><code>console.timeEnd()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">time</span>(<span class=\\"string\\">&quot;My Timer&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"comment\\">// Do some stuff...</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">timeEnd</span>(<span class=\\"string\\">&quot;My Timer&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"timeEnd"},{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"label"},{"v":"[]","t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">a</span>)","n":"values"}],"d":"<p>Logs the current value of a timer that was previously started. For more\\ninformation check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog\\"><code>console.timeLog()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">time</span>(<span class=\\"string\\">&quot;My Timer&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"comment\\">// Do some stuff...</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">timeLog</span>(<span class=\\"string\\">&quot;My Timer&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">timeEnd</span>(<span class=\\"string\\">&quot;My Timer&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">Array</span>(<span class=\\"variable\\">a</span>))","n":"timeLog"},{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"label"}],"d":"<p><strong>NON-STANDARD</strong>: Adds a single marker to the browser's performance tool. For\\nmore information check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/timestamp\\"><code>console.timestamp()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">timestamp</span>(<span class=\\"string\\">&quot;My Timestamp&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"timestamp"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"value"},{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>)","n":"values"}],"d":"<p>Outputs a stack trace to the Web Console. Does not support string\\nsubstitution. For more information check out the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/trace\\"><code>console.trace()</code></a>\\nfunction.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">trace</span>(<span class=\\"string\\">&quot;Value&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"variable\\">a</span>, <span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>))","n":"trace"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"value"},{"v":"[]","t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>)","n":"values"}],"d":"<p>Outputs a warning message to the Web Console. For more information check out\\nthe <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/console/warn\\"><code>console.warn()</code></a> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"variable\\">warn</span>(<span class=\\"string\\">&quot;Something fishy is going on...&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"variable\\">a</span>, <span class=\\"type\\">Array</span>(<span class=\\"variable\\">b</span>))","n":"warn"}],"d":"<p>This module provides functions to work with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Console_API\\">Console Web API</a>.</p>","l":"Console","n":"Console"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>)","n":"maybe"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">value</span>, <span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">result</span>))","n":"function"}],"d":"<p>Maps the value of a maybe with a possibility to discard it.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">andThen</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"number\\">4</span>), (<span class=\\"variable\\">num</span> : <span class=\\"type\\">Number</span>) : <span class=\\"type\\">Maybe</span>(<span class=\\"type\\">String</span>) {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">if</span> (<span class=\\"variable\\">num</span> <span class=\\"operator\\">&gt;</span> <span class=\\"number\\">4</span>) {\\n</span><span class=\\"line\\">    <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"type\\">Number</span>.<span class=\\"variable\\">toString</span>(<span class=\\"variable\\">num</span>))\\n</span><span class=\\"line\\">  } <span class=\\"keyword\\">else</span> {\\n</span><span class=\\"line\\">    <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">})</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">result</span>)","n":"andThen"},{"k":4,"a":[{"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>))","n":"maybe"}],"d":"<p>Flattens a nested maybe.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;A&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">flatten</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;A&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>)","n":"flatten"},{"k":4,"a":[{"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>)","n":"maybe"}],"d":"<p>Returns whether the maybe is just a value.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">isJust</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;A&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">isJust</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isJust"},{"k":4,"a":[{"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>)","n":"maybe"}],"d":"<p>Returns whether the maybe is nothing.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">isNothing</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>(<span class=\\"string\\">&quot;A&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">isNothing</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;A&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isNothing"},{"k":4,"a":[{"t":"<span class=\\"variable\\">value</span>","n":"value"}],"d":"<p>Returns a maybe containing just the value.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">just</span>(<span class=\\"string\\">&quot;A&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;A&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>)","n":"just"},{"k":4,"a":[{"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>)","n":"maybe"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">value</span>, <span class=\\"variable\\">result</span>)","n":"function"}],"d":"<p>Maps the value of a maybe.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">map</span>(\\n</span><span class=\\"line\\">  <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"number\\">1</span>),\\n</span><span class=\\"line\\">  (<span class=\\"variable\\">number</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">number</span> <span class=\\"operator\\">+</span> <span class=\\"number\\">2</span> })) == Maybe.Just(3)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">result</span>)","n":"map"},{"k":4,"d":"<p>Returns nothing.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">nothing</span>() <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>)","n":"nothing"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>))","n":"array"}],"d":"<p>Returns the first maybe with a value or nothing if all are nothing.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">oneOf</span>([<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;A&quot;</span>), <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>]) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">just</span>(<span class=\\"string\\">&quot;A&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>)","n":"oneOf"},{"k":4,"a":[{"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>)","n":"maybe"},{"t":"<span class=\\"variable\\">error</span>","n":"error"}],"d":"<p>Converts the maybe to a result using the value as the error.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">toResult</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>, <span class=\\"string\\">&quot;Error&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Error</span>(<span class=\\"string\\">&quot;Error&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">toResult</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;A&quot;</span>), <span class=\\"string\\">&quot;Error&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;A&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">error</span>, <span class=\\"variable\\">value</span>)","n":"toResult"},{"k":4,"a":[{"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>)","n":"maybe"},{"t":"<span class=\\"variable\\">value</span>","n":"defaultValue"}],"d":"<p>Returns the value of a maybe or the given value if it's nothing.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">withDefault</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;B&quot;</span>), <span class=\\"string\\">&quot;A&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;B&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">withDefault</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>, <span class=\\"string\\">&quot;A&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;A&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"variable\\">value</span>","n":"withDefault"},{"k":4,"a":[{"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>)","n":"maybe"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">value</span>)","n":"function"}],"d":"<p>Returns the value of a maybe, or calls the given function otherwise.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">withLazyDefault</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;B&quot;</span>), () { <span class=\\"string\\">&quot;A&quot;</span> }) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;B&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">withLazyDefault</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>, () { <span class=\\"string\\">&quot;A&quot;</span> }) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;A&quot;</span></span></code></pre>","b":true,"t":"<span class=\\"variable\\">value</span>","n":"withLazyDefault"}],"d":"<p>This module provides functions to work with the <code>Maybe</code> type.</p>","l":"Maybe","n":"Maybe"},{"k":6,"e":[{"k":4,"d":"<p>Returns a promise which resolves after the next <code>animationFrame</code></p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">await</span> <span class=\\"type\\">Timer</span>.<span class=\\"variable\\">nextFrame</span>()\\n</span><span class=\\"line\\"><span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;This runs after the next frame...&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"nextFrame"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"duration"}],"d":"<p>Returns a promise which resolves after the specified time in milliseconds.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">await</span> <span class=\\"type\\">Timer</span>.<span class=\\"variable\\">timeout</span>(<span class=\\"number\\">2000</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;This runs after 2 seconds...&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"timeout"}],"d":"<p>This module provides functions related to timers.</p>","l":"Timer","n":"Timer"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">FormData</span>","n":"original"},{"t":"<span class=\\"type\\">String</span>","n":"key"},{"t":"<span class=\\"type\\">File</span>","n":"file"}],"d":"<p>Returns a new <code>FormData</code> object containing all the values from the original,\\nwith the file added as a key.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> file =\\n</span><span class=\\"line\\">  <span class=\\"type\\">File</span>.<span class=\\"variable\\">fromString</span>(<span class=\\"string\\">&quot;Contents&quot;</span>, <span class=\\"string\\">&quot;text.txt&quot;</span>, <span class=\\"string\\">&quot;text/plain&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"type\\">FormData</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">FormData</span>.<span class=\\"variable\\">addFile</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"variable\\">file</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">FormData</span>","n":"addFile"},{"k":4,"a":[{"t":"<span class=\\"type\\">FormData</span>","n":"original"},{"t":"<span class=\\"type\\">String</span>","n":"key"},{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Returns a new <code>FormData</code> object containing all the values from the original,\\nwith the string added as a key.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">FormData</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">FormData</span>.<span class=\\"variable\\">addString</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">FormData</span>","n":"addString"},{"k":4,"d":"<p>Returns an empty <code>FormData</code> object.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">FormData</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">FormData</span>.<span class=\\"variable\\">addString</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">FormData</span>","n":"empty"},{"k":4,"a":[{"t":"<span class=\\"type\\">FormData</span>","n":"formData"}],"d":"<p>Returns the keys of a <code>FormData</code> object.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">FormData</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">FormData</span>.<span class=\\"variable\\">addString</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">FormData</span>.<span class=\\"variable\\">keys</span>() <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;key&quot;</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>)","n":"keys"}],"d":"<p>This module provides functions for working with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\\">FormData Web API</a>. It is\\ngenerally used when sending messages via HTTP requests.</p>","l":"FormData","n":"FormData"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"type"},{"t":"<span class=\\"type\\">Bool</span>","n":"capture"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>, <span class=\\"variable\\">a</span>)","n":"listener"}],"d":"<p>Adds a listener to the window and returns the function which\\nremoves this listener.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> listener =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Window</span>.<span class=\\"variable\\">addEventListener</span>(<span class=\\"string\\">&quot;click&quot;</span>, <span class=\\"keyword\\">true</span>, (<span class=\\"variable\\">event</span> : <span class=\\"type\\">Html.Event</span>) {\\n</span><span class=\\"line\\">    <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"variable\\">event</span>)\\n</span><span class=\\"line\\">  })</span></code></pre>","b":true,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>)","n":"addEventListener"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"query"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Bool</span>, <span class=\\"variable\\">a</span>)","n":"listener"}],"d":"<p>Adds a media query listener to the window and returns the function which\\nremoves this listener.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> listener =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Window</span>.<span class=\\"variable\\">addMediaQueryListener</span>(<span class=\\"string\\">&quot;(max-width: 320px)&quot;</span>, (<span class=\\"variable\\">matches</span> : <span class=\\"type\\">Bool</span>) {\\n</span><span class=\\"line\\">    <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"variable\\">matches</span>)\\n</span><span class=\\"line\\">  })</span></code></pre>","b":true,"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>)","n":"addMediaQueryListener"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"message"}],"d":"<p>Shows the default alert popup of the browser with the message. This function\\nreturns a promise but blocks execution until the popup is closed.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">alert</span>(<span class=\\"string\\">&quot;Hello World!&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"alert"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"message"}],"d":"<p>Shows the default confirm popup of the browser with the message. This\\nfunction returns a promise but blocks execution until the popup is closed.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">case</span> <span class=\\"keyword\\">await</span> <span class=\\"type\\">Window</span>.<span class=\\"variable\\">confirm</span>(<span class=\\"string\\">&quot;Are you ready?&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Ok</span> =&gt; <span class=\\"string\\">&quot;The user OK-d the popup.&quot;</span>\\n</span><span class=\\"line\\">  <span class=\\"type\\">Err</span> =&gt; <span class=\\"string\\">&quot;The user cancelled.&quot;</span>\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Result</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">Void</span>))","n":"confirm"},{"k":4,"d":"<p>Returns the width of the scrollbar.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">getScrollbarWidth</span>() <span class=\\"operator\\">==</span> <span class=\\"number\\">10</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"getScrollbarWidth"},{"k":4,"d":"<p>Returns the height of the window in pixels.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">height</span>() <span class=\\"operator\\">==</span> <span class=\\"number\\">768</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"height"},{"k":4,"d":"<p>Returns the windows URL as a string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">href</span>() <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;https://www.example.com&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"href"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"url"}],"d":"<p>Returns <code>true</code> if the UL is the same as the current URL of the page.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">isActiveURL</span>(<span class=\\"string\\">&quot;https://www.example.com&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isActiveURL"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"url"}],"d":"<p>Like <code>Window.navigate()</code>, but also triggers a jump to the start of the\\ndocument or the hash, if it exists.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">jump</span>(<span class=\\"string\\">&quot;/new-url&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"jump"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"query"}],"d":"<p>Returns <code>true</code> if the media query matches.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">matchesMediaQuery</span>(<span class=\\"string\\">&quot;(max-width: 320px)&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"matchesMediaQuery"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"url"}],"d":"<p>Sets the URL of the window. If there is a route defined for this URL, runs\\nits handler. Updates the navigation history.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">navigate</span>(<span class=\\"string\\">&quot;/new-url&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"navigate"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"url"}],"d":"<p>Opens the URL in a new window or tab.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">open</span>(<span class=\\"string\\">&quot;https://www.google.com&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"open"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"label"},{"v":"<span class=\\"string\\">&quot;&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"current"}],"d":"<p>Shows the default prompt popup of the browser with the given message and\\nvalue.</p><p>This function returns the entered text as a <code>Maybe(String)</code> and blocks\\nexecution until the popup is closed. If the user cancelled the popup it\\nreturns <code>Maybe.Nothing</code>.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">case</span> <span class=\\"keyword\\">await</span> <span class=\\"type\\">Window</span>.<span class=\\"variable\\">prompt</span>(<span class=\\"string\\">&quot;How old are you?&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Just</span>(<span class=\\"variable\\">value</span>) =&gt; <span class=\\"string\\">&quot;The user provided the value:</span><span class=\\"string\\"> #{</span><span class=\\"variable\\">value</span><span class=\\"string\\">}&quot;</span>\\n</span><span class=\\"line\\">  <span class=\\"type\\">Nothing</span> =&gt; <span class=\\"string\\">&quot;The user cancelled!&quot;</span>\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">String</span>))","n":"prompt"},{"k":4,"d":"<p>Returns the scrollable height of the window in pixels.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">scrollHeight</span>() <span class=\\"operator\\">==</span> <span class=\\"number\\">768</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"scrollHeight"},{"k":4,"d":"<p>Returns the horizontal scroll position of the window in pixels.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">scrollLeft</span>() <span class=\\"operator\\">==</span> <span class=\\"number\\">100</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"scrollLeft"},{"k":4,"d":"<p>Returns the vertical scroll position of the window in pixels.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">scrollTop</span>() <span class=\\"operator\\">==</span> <span class=\\"number\\">100</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"scrollTop"},{"k":4,"d":"<p>Returns the scrollable width of the window in pixels.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">scrollWidth</span>() <span class=\\"operator\\">==</span> <span class=\\"number\\">1024</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"scrollWidth"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"position"}],"d":"<p>Sets the vertical scroll position of the window in pixels.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">setScrollLeft</span>(<span class=\\"number\\">100</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"setScrollLeft"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"position"}],"d":"<p>Sets the horizontal scroll position of the window in pixels.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">setScrollTop</span>(<span class=\\"number\\">100</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"setScrollTop"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"title"}],"d":"<p>Sets the windows title.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">setTitle</span>(<span class=\\"string\\">&quot;New Title!&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"setTitle"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"url"}],"d":"<p>Sets the URL of the window.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">setUrl</span>(<span class=\\"string\\">&quot;/new-url&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"setUrl"},{"k":4,"d":"<p>Returns the windows title.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">title</span>() <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;Title!&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"title"},{"k":4,"d":"<p>Triggers a jump to the current location on the page.</p><p>When a page loads and the current URL has a hash <code>#anchor-name</code>, the browser\\nautomatically jumps to the element with the matching id or to the anchor tag\\nwith the matching name <code>&lt;a name=&quot;anchor-name&quot;&gt;</code>. This behavior does not happen\\nwhen the history is manipulated manually.</p><p>This function triggers that behavior. When there is a hash in the current URL,\\nit jumps to it, otherwise it jumps to the start of the document.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"triggerJump"},{"k":4,"d":"<p>Returns the current URL of the window.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">url</span>().<span class=\\"variable\\">host</span> <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;www.example.com&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Url</span>","n":"url"},{"k":4,"d":"<p>Returns the width of the window in pixels.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Window</span>.<span class=\\"variable\\">width</span> <span class=\\"operator\\">==</span> <span class=\\"number\\">1024</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"width"}],"d":"<p>This module provides functions for working with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Window\\">Window</a> JavaScript object.</p>","l":"Window","n":"Window"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns the absolute value of the number.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">abs</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">abs</span>(<span class=\\"number\\">-1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"abs"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"angle"}],"d":"<p>Returns the inverse cosine of the angle in radian.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">acos</span>(<span class=\\"number\\">0</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1.5707963267948966</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"acos"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"angle"}],"d":"<p>Returns the inverse hyperbolic cosine of the angle in radians.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">acosh</span>(<span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1.3169578969248166</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"acosh"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"angle"}],"d":"<p>Returns the inverse sine of the angle in radians.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">asin</span>(<span class=\\"number\\">0.5</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0.5235987755982989</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"asin"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"angle"}],"d":"<p>Returns the inverse hyperbolic sine of the angle in radians.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">asinh</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0.881373587019543</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"asinh"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"angle"}],"d":"<p>Returns the inverse tangent of the angle in radians.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">atan</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0.7853981633974483</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"atan"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"y"},{"t":"<span class=\\"type\\">Number</span>","n":"x"}],"d":"<p>Returns the angle in the plane (in radians) between the positive x-axis\\nand the ray from (0, 0) to the point (x, y).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">atan2</span>(<span class=\\"number\\">90</span>, <span class=\\"number\\">15</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1.4056476493802699</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"atan2"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"angle"}],"d":"<p>Returns the inverse hyperbolic tangent of the angle in radians.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">atanh</span>(<span class=\\"number\\">0.5</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0.5493061443340548</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"atanh"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns the cubic root of the number.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">cbrt</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">cbrt</span>(<span class=\\"number\\">64</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">4</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"cbrt"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns the smallest integer greater than or equal to the number.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">ceil</span>(<span class=\\"number\\">0.3</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"ceil"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"value"},{"t":"<span class=\\"type\\">Number</span>","n":"lower"},{"t":"<span class=\\"type\\">Number</span>","n":"upper"}],"d":"<p>Clamps the number between the upper and lower bounds.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">clamp</span>(<span class=\\"number\\">100</span>, <span class=\\"number\\">0</span>, <span class=\\"number\\">10</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">10</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">clamp</span>(<span class=\\"number\\">-100</span>, <span class=\\"number\\">0</span>, <span class=\\"number\\">10</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"clamp"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns the number of leading zero bits in the 32-bit binary representation\\nof the number.</p><pre><code><span class=\\"line\\"><span class=\\"comment\\">// 00000000000000000000000000000100</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">clz32</span>(<span class=\\"number\\">4</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">29</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"clz32"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"angle"}],"d":"<p>Returns the cosine of the angle in radians.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">cos</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0.5403023058681398</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"cos"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"angle"}],"d":"<p>Returns the hyperbolic cosine of the angle in radians.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">cosh</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1.5430806348152437</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"cosh"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"x"}],"d":"<p>Returns the value of <code>Math.E</code> raised to the power x, where x is the number.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">exp</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">2.718281828459045</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"exp"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"x"}],"d":"<p>Returns the value of <code>Math.E</code> to the power x, minus 1.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">exp</span>(<span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">7.38905609893065</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">expm1</span>(<span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">6.38905609893065</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"expm1"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns the largest integer less than or equal to the number.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">floor</span>(<span class=\\"number\\">0.8</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"floor"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"a"},{"t":"<span class=\\"type\\">Number</span>","n":"b"}],"d":"<p>Returns the floating-point remainder of two numbers.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">fmod</span>(<span class=\\"number\\">2</span>, <span class=\\"number\\">5.3</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1.3</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">fmod</span>(<span class=\\"number\\">4.2</span>, <span class=\\"number\\">18.5</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1.7</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"fmod"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns the nearest 32-bit single precision float representation of the\\nnumber.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">fround</span>(<span class=\\"number\\">1.337</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1.3370000123977661</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"fround"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"a"},{"t":"<span class=\\"type\\">Number</span>","n":"b"}],"d":"<p>Returns the square root of the sum of squares of its arguments.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">hypot</span>(<span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">5</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"hypot"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"a"},{"t":"<span class=\\"variable\\">number</span>","n":"b"}],"d":"<p>Returns the result using C-like 32-bit multiplication of the two parameters.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">imul</span>(<span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">12</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"imul"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns natural logarithm (base e) of the value.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">log</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"log"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns natural logarithm (base 10) of the value.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">log10</span>(<span class=\\"number\\">100</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">10</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"log10"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns natural logarithm (base e) of the value, plus 1.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">log1p</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"log1p"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns natural logarithm (base 2) of the value.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">log2</span>(<span class=\\"number\\">8</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">3</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"log2"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number1"},{"t":"<span class=\\"type\\">Number</span>","n":"number2"}],"d":"<p>Returns the highest-valued number from the arguments.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">max</span>(<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">2</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"max"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number1"},{"t":"<span class=\\"type\\">Number</span>","n":"number2"}],"d":"<p>Returns the lowest-valued number from the arguments.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">min</span>(<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"min"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Negates the number.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">negate</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">-1</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"negate"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"value"},{"t":"<span class=\\"type\\">Number</span>","n":"exponent"}],"d":"<p>Returns the exponent power of the number.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">pow</span>(<span class=\\"number\\">2</span>, <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">4</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"pow"},{"k":4,"d":"<p>Returns a pseudo-random number in the range 0 to less than 1.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">random</span>() <span class=\\"comment\\">// A random number between 0 and 1.</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"random"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"},{"v":"<span class=\\"number\\">0</span>","t":"<span class=\\"type\\">Number</span>","n":"decimals"}],"d":"<p>Returns the value of a number rounded to the nearest decimal point (0 by\\ndefault).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">round</span>(<span class=\\"number\\">0.5</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">round</span>(<span class=\\"number\\">0.53</span>, <span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0.5</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"round"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns the sign of the number (1 or -1).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">sign</span>(<span class=\\"number\\">5</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">sign</span>(<span class=\\"number\\">-5</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">-1</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"sign"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"angle"}],"d":"<p>Calculates the sine of the angle in radians.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">sin</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0.8414709848078965</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"sin"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"angle"}],"d":"<p>Calculates the hyperbolic sine of the angle in radians.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">sinh</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1.1752011936438014</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"sinh"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"value"}],"d":"<p>Returns the square root of the number.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">sqrt</span>(<span class=\\"number\\">4</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">2</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"sqrt"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"angle"}],"d":"<p>Calculates the tangent of the angle in radians.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">tan</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">1.5574077246549023</span></span></code></pre>","b":false,"n":"tan"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"angle"}],"d":"<p>Calculates the hyperbolic tangent of the angle in radians.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">tanh</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0.7615941559557649</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"tanh"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns the integer part of a number by removing any fractional digits.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">trunc</span>(<span class=\\"number\\">13.37</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">13</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">trunc</span>(<span class=\\"number\\">42.84</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">42</span></span></code></pre>","b":false,"n":"trunc"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"value"},{"t":"<span class=\\"type\\">Number</span>","n":"to"}],"d":"<p>Truncates the given number to the given amount.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Math</span>.<span class=\\"variable\\">truncate</span>(<span class=\\"number\\">0.123456</span>, <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0.12</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"truncate"},{"k":5,"d":"<p>Base-10 logarithm of <code>E</code> (approximately <code>0.434</code>)</p>","v":"\`Math.LOG10E\`","b":false,"n":"LOG10E"},{"k":5,"d":"<p>Square root of <code>0.5</code> (approximately <code>0.707</code>)</p>","v":"\`Math.SQRT1_2\`","b":false,"n":"SQRT1_2"},{"k":5,"d":"<p>Base-2 logarithm of <code>E</code> (approximately <code>1.443</code>)</p>","v":"\`Math.LOG2E\`","b":false,"n":"LOG2E"},{"k":5,"d":"<p>Square root of <code>2</code> (approximately <code>1.414</code>)</p>","v":"\`Math.SQRT2\`","b":false,"n":"SQRT2"},{"k":5,"d":"<p>Natural logarithm of <code>10</code> (approximately <code>2.303</code>)</p>","v":"\`Math.LN10\`","b":false,"n":"LN10"},{"k":5,"d":"<p>Natural logarithm of <code>2</code> (approximately <code>0.693</code>)</p>","v":"\`Math.LN2\`","b":false,"n":"LN2"},{"k":5,"d":"<p>Ratio of a circle's circumference to its diameter (approximately <code>3.14159</code>)</p>","v":"\`Math.PI\`","b":false,"n":"PI"},{"k":5,"d":"<p>Euler's number and the base of natural logarithms (approximately <code>2.718</code>)</p>","v":"\`Math.E\`","b":false,"n":"E"}],"d":"<p>This module provides mathematical functions and constants.</p>","l":"Math","n":"Math"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"value"}],"d":"<p>Returns a nicely formatted version of the value. Values of Mint types\\npreserve their original name.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Debug</span>.<span class=\\"variable\\">inspect</span>(<span class=\\"string\\">&quot;Hello World!&quot;</span>) <span class=\\"comment\\">// &quot;Hello World!&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Debug</span>.<span class=\\"variable\\">inspect</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>) <span class=\\"comment\\">// Maybe.Nothing</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Debug</span>.<span class=\\"variable\\">inspect</span>({ <span class=\\"variable\\">name</span>: <span class=\\"string\\">&quot;Joe&quot;</span>, <span class=\\"variable\\">age</span>: <span class=\\"number\\">37</span> }) <span class=\\"comment\\">// User { name: &quot;Joe&quot;, age: 37 }</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"inspect"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"value"}],"d":"<p>Logs an arbitrary value to the windows console.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;Hello World!&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"variable\\">a</span>","n":"log"}],"d":"<p>This module provides functions for debugging purposes.</p>","l":"Debug","n":"Debug"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"set"},{"t":"<span class=\\"variable\\">item</span>","n":"value"}],"d":"<p>Adds the value to the set.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Set</span>.<span class=\\"variable\\">add</span>(<span class=\\"type\\">Set</span>.<span class=\\"variable\\">empty</span>(), <span class=\\"string\\">&quot;value&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>([<span class=\\"string\\">&quot;value&quot;</span>])</span></code></pre>","b":false,"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"add"},{"k":4,"a":[{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"set"},{"t":"<span class=\\"variable\\">item</span>","n":"value"}],"d":"<p>Deletes the value from the set.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Set</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">add</span>(<span class=\\"string\\">&quot;value&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">delete</span>(<span class=\\"string\\">&quot;value&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">empty</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"delete"},{"k":4,"d":"<p>Returns an empty set.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Set</span>.<span class=\\"variable\\">empty</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"empty"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"}],"d":"<p>Converts an <code>Array(a)</code> to a <code>Set(a)</code>, duplicates are removed.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Set</span>.<span class=\\"variable\\">add</span>(<span class=\\"type\\">Set</span>.<span class=\\"variable\\">empty</span>(), <span class=\\"string\\">&quot;value&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>([<span class=\\"string\\">&quot;value&quot;</span>])</span></code></pre>","b":false,"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"fromArray"},{"k":4,"a":[{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"set"},{"t":"<span class=\\"variable\\">item</span>","n":"value"}],"d":"<p>Returns whether or not the set has the value.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Set</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">add</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">just</span>(<span class=\\"string\\">&quot;value&quot;</span>))\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">has</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">just</span>(<span class=\\"string\\">&quot;value&quot;</span>))) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"has"},{"k":4,"a":[{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"set"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">item</span>, <span class=\\"variable\\">b</span>)","n":"method"}],"d":"<p>Maps over the items of the set to return a new set.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>([<span class=\\"number\\">0</span>])\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">map</span>(<span class=\\"type\\">Number</span>.<span class=\\"variable\\">toString</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>([<span class=\\"string\\">&quot;0&quot;</span>])</span></code></pre>","b":false,"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">b</span>)","n":"map"},{"k":4,"a":[{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"set"}],"d":"<p>Returns the size of a set.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Set</span>.<span class=\\"variable\\">size</span>(<span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>([<span class=\\"number\\">0</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>])) <span class=\\"operator\\">==</span> <span class=\\"number\\">3</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"size"},{"k":4,"a":[{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"set"}],"d":"<p>Converts the <code>Set(a)</code> to an <code>Array(a)</code>.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Set</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">add</span>(<span class=\\"string\\">&quot;value&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">toArray</span>()) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;value&quot;</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"toArray"},{"k":4,"a":[{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"set"},{"t":"<span class=\\"variable\\">memo</span>","n":"initial"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">memo</span>, <span class=\\"variable\\">item</span>, <span class=\\"variable\\">memo</span>)","n":"function"}],"d":"<p>Applies the function against an accumulator and each element in the set (in\\ninsertion order, according to the set's underlying array representation) to\\nreduce it to a single value.</p><pre><code><span class=\\"line\\">([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>]\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">reduce</span>(<span class=\\"number\\">0</span>, (<span class=\\"variable\\">memo</span> : <span class=\\"type\\">Number</span>, <span class=\\"variable\\">item</span> : <span class=\\"type\\">Number</span>) : <span class=\\"type\\">Number</span> { <span class=\\"variable\\">memo</span> <span class=\\"operator\\">+</span> <span class=\\"variable\\">item</span> })) <span class=\\"operator\\">==</span> <span class=\\"number\\">6</span></span></code></pre>","b":true,"n":"reduce"},{"k":4,"a":[{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"left"},{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"right"}],"d":"<p>Returns a set containing all items in the two input sets.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> left =\\n</span><span class=\\"line\\">  [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>]\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"keyword\\">let</span> right =\\n</span><span class=\\"line\\">  [<span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>]\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">(<span class=\\"type\\">Set</span>.<span class=\\"variable\\">union</span>(<span class=\\"variable\\">left</span>, <span class=\\"variable\\">right</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">toArray</span>\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Array</span>.<span class=\\"variable\\">sort</span>((<span class=\\"variable\\">a</span> : <span class=\\"type\\">Number</span>, <span class=\\"variable\\">b</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">a</span> <span class=\\"operator\\">-</span> <span class=\\"variable\\">b</span> })) <span class=\\"operator\\">==</span> [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"union"},{"k":4,"a":[{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"left"},{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"right"}],"d":"<p>Returns a set containing all those elements shared by the two input sets.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> left =\\n</span><span class=\\"line\\">  [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>]\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"keyword\\">let</span> right =\\n</span><span class=\\"line\\">  [<span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">6</span>]\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"type\\">Set</span>.<span class=\\"variable\\">union</span>(<span class=\\"variable\\">left</span>, <span class=\\"variable\\">right</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>([<span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>])</span></code></pre>","b":false,"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"intersection"},{"k":4,"a":[{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"left"},{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"right"}],"d":"<p>Returns a set containing elements from the first input set which are not in\\nthe second input set.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> left =\\n</span><span class=\\"line\\">  [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>]\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"keyword\\">let</span> right =\\n</span><span class=\\"line\\">  [<span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">6</span>]\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"type\\">Set</span>.<span class=\\"variable\\">difference</span>(<span class=\\"variable\\">left</span>, <span class=\\"variable\\">right</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>])</span></code></pre>","b":false,"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"difference"},{"k":4,"a":[{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"left"},{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"right"}],"d":"<p>Returns true if the input sets contain no elements in common.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> left =\\n</span><span class=\\"line\\">  [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>]\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"keyword\\">let</span> right =\\n</span><span class=\\"line\\">  [<span class=\\"number\\">0</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">-1</span>, <span class=\\"number\\">6</span>]\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"type\\">Set</span>.<span class=\\"variable\\">isDisjoint</span>(<span class=\\"variable\\">left</span>, <span class=\\"variable\\">right</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isDisjoint"},{"k":4,"a":[{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"outer"},{"t":"<span class=\\"type\\">Set</span>(<span class=\\"variable\\">item</span>)","n":"inner"}],"d":"<p>Returns true if the first input set contains every element in the second input\\nset.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> inner =\\n</span><span class=\\"line\\">  [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>]\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"keyword\\">let</span> outer =\\n</span><span class=\\"line\\">  [<span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">6</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>]\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Set</span>.<span class=\\"variable\\">fromArray</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"type\\">Set</span>.<span class=\\"variable\\">isSuperset</span>(<span class=\\"variable\\">outer</span>, <span class=\\"variable\\">inner</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isSuperset"}],"d":"<p>This module provides functions for the <code>Set</code> type.</p>","l":"Set","n":"Set"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"raw"}],"d":"<p>Tries to parse the given string as an ISO date.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">parseISO</span>(<span class=\\"string\\">&quot;2018-04-05T00:00:00.000Z&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Time</span>)","n":"parseISO"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the UNIX Timestamp (in milliseconds) of the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">toUnix</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2006</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>)) <span class=\\"operator\\">==</span> <span class=\\"number\\">1136160000000</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"toUnix"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"timestamp"}],"d":"<p>Returns the time respective to the UNIX Timestamp (in milliseconds).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">unix</span>(<span class=\\"number\\">1136160000000</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2006</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"unix"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"year"},{"v":"<span class=\\"number\\">1</span>","t":"<span class=\\"type\\">Number</span>","n":"month"},{"v":"<span class=\\"number\\">1</span>","t":"<span class=\\"type\\">Number</span>","n":"day"},{"v":"<span class=\\"number\\">0</span>","t":"<span class=\\"type\\">Number</span>","n":"hour"},{"v":"<span class=\\"number\\">0</span>","t":"<span class=\\"type\\">Number</span>","n":"minute"},{"v":"<span class=\\"number\\">0</span>","t":"<span class=\\"type\\">Number</span>","n":"second"},{"v":"<span class=\\"number\\">0</span>","t":"<span class=\\"type\\">Number</span>","n":"millisecond"}],"d":"<p>Returns a new time from the parameters.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">utc</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">12</span>, <span class=\\"number\\">24</span>, <span class=\\"number\\">50</span>, <span class=\\"number\\">100</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Time</span>","n":"utc"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"year"},{"t":"<span class=\\"type\\">Number</span>","n":"month"},{"t":"<span class=\\"type\\">Number</span>","n":"day"}],"d":"<p>Returns a new time from the parameters (without time parts).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"utcDate"},{"k":4,"d":"<p>Returns the current time (in UTC).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">now</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"now"},{"k":4,"d":"<p>Returns the current time (offset by the clients time zone).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">local</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"local"},{"k":4,"d":"<p>Returns the time at the begging of today.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">today</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"today"},{"k":4,"d":"<p>Returns the time at the begging of tomorrow.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">tomorrow</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"tomorrow"},{"k":4,"d":"<p>Returns the time at the begging of yesterday.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">yesterday</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"yesterday"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the year of the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">year</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>)) <span class=\\"operator\\">==</span> <span class=\\"number\\">2018</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"year"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the quarter of the year in which the time occurs.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">quarterOfYear</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>)) <span class=\\"operator\\">==</span> <span class=\\"number\\">1</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"quarterOfYear"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the month of the time (as a number).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">monthNumber</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>)) <span class=\\"operator\\">==</span> <span class=\\"number\\">4</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"monthNumber"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the month of the time (as a <code>Month</code>).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">month</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Month</span>.<span class=\\"type\\">April</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Month</span>","n":"month"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the ISO calendar year and week of the time.</p><p>The ISO calendar year to which the week belongs is not always in the same\\nas the year of the regular calendar date. The first three days of January\\nsometimes belong to week 52 (or 53) of the previous year; equally the last\\nthree days of December sometimes are already in week 1 of the following year.</p><p>For that reason, this method returns a tuple <code>year, week</code> consisting of the\\ncalendar year to which the calendar week belongs and the ordinal number of\\nthe week within that year.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">calendarWeek</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2016</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">1</span>)) <span class=\\"operator\\">==</span> {<span class=\\"number\\">2016</span>, <span class=\\"number\\">53</span>}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">Number</span>)","n":"calendarWeek"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the day of the week of the time (as a number from 1 to 7).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">dayOfWeekNumber</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>)) <span class=\\"operator\\">==</span> <span class=\\"number\\">4</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"dayOfWeekNumber"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the day of week of the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">dayOfWeek</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Weekday</span>.<span class=\\"type\\">Thursday</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Weekday</span>","n":"dayOfWeek"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the day of month of the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">dayOfMonth</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>)) <span class=\\"operator\\">==</span> <span class=\\"number\\">5</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"dayOfMonth"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the day of the year of the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">dayOfYear</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>)) <span class=\\"operator\\">==</span> <span class=\\"number\\">95</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"dayOfYear"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the hour of the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">hour</span>(Time.utc(2018, 4, 5, 10, 25, 30, 40) == 10</span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"hour"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the minute of the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">minute</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utc</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">10</span>, <span class=\\"number\\">25</span>, <span class=\\"number\\">30</span>, <span class=\\"number\\">40</span>)) <span class=\\"operator\\">==</span> <span class=\\"number\\">25</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"minute"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the second of the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">second</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utc</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">10</span>, <span class=\\"number\\">25</span>, <span class=\\"number\\">30</span>, <span class=\\"number\\">40</span>)) <span class=\\"operator\\">==</span> <span class=\\"number\\">30</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"second"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns the millisecond of the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">millisecond</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utc</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">10</span>, <span class=\\"number\\">25</span>, <span class=\\"number\\">30</span>, <span class=\\"number\\">40</span>)) <span class=\\"operator\\">==</span> <span class=\\"number\\">40</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"millisecond"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns if the year of the time is a leap year or not.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">isLeapYear</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2011</span>,<span class=\\"number\\">1</span>,<span class=\\"number\\">1</span>)) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">isLeapYear</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2012</span>,<span class=\\"number\\">1</span>,<span class=\\"number\\">1</span>)) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isLeapYear"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"year"}],"d":"<p>Returns if the number (year) is a leap year or not.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">isNumberLeapYear</span>(<span class=\\"number\\">2020</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">isNumberLeapYear</span>(<span class=\\"number\\">2021</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isNumberLeapYear"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"},{"t":"<span class=\\"type\\">Time</span>.<span class=\\"type\\">Span</span>","n":"delta"}],"d":"<p>Shifts the time using the time span.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">shift</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>), <span class=\\"type\\">Time</span>.<span class=\\"type\\">Span</span>.<span class=\\"type\\">Days</span>(<span class=\\"number\\">2</span>)) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">  <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">7</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"shift"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is at the beginning of the same year as the original\\ntime.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">atBeginningOfYear</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">1</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"atBeginningOfYear"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is at the beginning of the same month as the\\noriginal time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">atBeginningOfMonth</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">1</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"atBeginningOfMonth"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is at the beginning of the same week as the original\\ntime.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">atBeginningOfWeek</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">15</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"atBeginningOfWeek"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is at the beginning of the same day as the original\\ntime.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">atBeginningOfDay</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utc</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>, <span class=\\"number\\">10</span>, <span class=\\"number\\">34</span>, <span class=\\"number\\">22</span>, <span class=\\"number\\">40</span>)) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">  <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utc</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>, <span class=\\"number\\">0</span>, <span class=\\"number\\">0</span>, <span class=\\"number\\">0</span>, <span class=\\"number\\">0</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"atBeginningOfDay"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is at the end of the same year as the original time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">atEndOfYear</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">12</span>, <span class=\\"number\\">31</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"atEndOfYear"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is at the end of the same month as the original time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">atEndOfMonth</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">31</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"atEndOfMonth"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is at the beginning of the same week as the original\\ntime.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">atEndOfWeek</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">1</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"atEndOfWeek"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is at the beginning of the same day as the original\\ntime.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">atEndOfDay</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utc</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>, <span class=\\"number\\">10</span>, <span class=\\"number\\">34</span>, <span class=\\"number\\">22</span>, <span class=\\"number\\">40</span>)) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">  <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utc</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>, <span class=\\"number\\">0</span>, <span class=\\"number\\">0</span>, <span class=\\"number\\">0</span>, <span class=\\"number\\">0</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"atEndOfDay"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is a month later than the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">nextMonth</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">6</span>, <span class=\\"number\\">20</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"nextMonth"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is a month sooner than the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">previousMonth</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">20</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"previousMonth"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is a week later than the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">nextWeek</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">10</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">17</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"nextWeek"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is a week sooner than the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">previousWeek</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">13</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"previousWeek"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is a day later than the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">nextDay</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">21</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"nextDay"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Returns a new time which is a day sooner than the time.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">previousDay</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">20</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2017</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">19</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Time</span>","n":"previousDay"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"from"},{"t":"<span class=\\"type\\">Time</span>","n":"to"}],"d":"<p>Returns an array of days from the start to end time (inclusive).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">range</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2006</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">1</span>), <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2006</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">4</span>)) <span class=\\"operator\\">==</span> [\\n</span><span class=\\"line\\">  <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2006</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">1</span>),\\n</span><span class=\\"line\\">  <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2006</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">2</span>),\\n</span><span class=\\"line\\">  <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2006</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">3</span>),\\n</span><span class=\\"line\\">  <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2006</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">4</span>)\\n</span><span class=\\"line\\">]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Time</span>)","n":"range"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"timeZone"},{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Converts the time zone, since not all browsers support time zone\\nconversion this function can fail.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">inZone</span>(<span class=\\"string\\">&quot;America/New_York&quot;</span>, <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utc</span>(<span class=\\"number\\">2019</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">7</span>, <span class=\\"number\\">12</span>, <span class=\\"number\\">35</span>, <span class=\\"number\\">200</span>)) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">  <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utc</span>(<span class=\\"number\\">2019</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">12</span>, <span class=\\"number\\">35</span>, <span class=\\"number\\">200</span>))</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Time</span>)","n":"inZone"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"from"},{"t":"<span class=\\"type\\">Time</span>","n":"to"},{"t":"<span class=\\"type\\">Time</span>.<span class=\\"type\\">Format</span>.<span class=\\"type\\">Language</span>","n":"language"}],"d":"<p>Reports the approximate distance in time between two <code>Time</code> objects as seconds\\nin the language.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> now =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utc</span>(<span class=\\"number\\">2016</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">12</span>, <span class=\\"number\\">34</span>, <span class=\\"number\\">50</span>, <span class=\\"number\\">200</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"keyword\\">let</span> time =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Time</span>.<span class=\\"variable\\">shift</span>(<span class=\\"type\\">Time</span>.<span class=\\"type\\">Span</span>.<span class=\\"type\\">Hours</span>(<span class=\\"number\\">4</span>), <span class=\\"variable\\">time</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">distanceOfTimeInWords</span>(<span class=\\"variable\\">time</span>, <span class=\\"variable\\">now</span>, <span class=\\"type\\">Time</span>.<span class=\\"type\\">Format</span>.<span class=\\"type\\">English</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;in 4 hours&quot;</span></span></code></pre>","b":true,"n":"distanceOfTimeInWords"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"},{"t":"<span class=\\"type\\">Time</span>.<span class=\\"type\\">Format</span>.<span class=\\"type\\">Language</span>","n":"language"},{"t":"<span class=\\"type\\">String</span>","n":"pattern"}],"d":"<p>Formats the time using the pattern in the language.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">format</span>(\\n</span><span class=\\"line\\">  <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>),\\n</span><span class=\\"line\\">  <span class=\\"type\\">Time</span>.<span class=\\"type\\">Format</span>:<span class=\\"type\\">ENGLISH</span>,\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;%Y-%m-%dT%H:%M:%S.%LZ&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;2018-04-05T00:00:00.000Z&quot;</span></span></code></pre><p>The following token can be used in the pattern:</p><ul><li><code>%a</code> - short day name (Sun, Mon, Tue, ...)</li><li><code>%^a</code> - short day name, upcase (SUN, MON, TUE, ...)</li><li><code>%A</code> - day name (Sunday, Monday, Tuesday, ...)</li><li><code>%^A</code> - day name, upcase (SUNDAY, MONDAY, TUESDAY, ...)</li><li><code>%b</code> - short month name (Jan, Feb, Mar, ...)</li><li><code>%^b</code> - short month name, upcase (JAN, FEB, MAR, ...)</li><li><code>%B</code> - month name (January, February, March, ...)</li><li><code>%^B</code> - month name, upcase (JANUARY, FEBRUARY, MARCH, ...)</li><li><code>%c</code> - date and time (Tue Apr 5 10:26:19 2016)</li><li><code>%C</code> - year divided by 100</li><li><code>%d</code> - day of month, zero padded (01, 02, ...)</li><li><code>%-d</code> - day of month (1, 2, ..., 31)</li><li><ul><li>%*d: day of month, ordinal (1st, 2nd, ...)</li></ul></li><li><code>%D</code> - date (04/05/16)</li><li><code>%e</code> - day of month, blank padded (&quot; 1&quot;, &quot; 2&quot;, ..., &quot;10&quot;, &quot;11&quot;, ...)</li><li><code>%F</code> - ISO 8601 date (2016-04-05)</li><li><code>%g</code> - week-based calendar year modulo 100 (00..99)</li><li><code>%G</code> - week-based calendar year (0001..9999)</li><li><code>%h</code> - (same as %b) short month name (Jan, Feb, Mar, ...)</li><li><code>%H</code> - hour of the day, 24-hour clock, zero padded (00, 01, ..., 24)</li><li><code>%I</code> - hour of the day, 12-hour clock, zero padded (00, 01, ..., 12)</li><li><code>%j</code> - day of year, zero padded (001, 002, ..., 365)</li><li><code>%k</code> - hour of the day, 24-hour clock, blank padded (&quot; 0&quot;, &quot; 1&quot;, ..., &quot;24&quot;)</li><li><code>%l</code> - hour of the day, 12-hour clock, blank padded (&quot; 0&quot;, &quot; 1&quot;, ..., &quot;12&quot;)</li><li><code>%L</code> - milliseconds, zero padded (000, 001, ..., 999)</li><li><code>%m</code> - month number, zero padded (01, 02, ..., 12)</li><li><code>%_m</code> - month number, blank padded (&quot; 1&quot;, &quot; 2&quot;, ..., &quot;12&quot;)</li><li><code>%-m</code> - month number (1, 2, ..., 12)</li><li><code>%M</code> - minute, zero padded (00, 01, 02, ..., 59)</li><li><code>%p</code> - am-pm (lowercase)</li><li><code>%P</code> - AM-PM (uppercase)</li><li><code>%r</code> - 12-hour time (03:04:05 AM)</li><li><code>%R</code> - 24-hour time (13:04)</li><li><code>%s</code> - seconds since unix epoch</li><li><code>%S</code> - seconds, zero padded (00, 01, ..., 59)</li><li><code>%T</code> - 24-hour time (13:04:05)</li><li><code>%u</code> - day of week (Monday is 1, 1..7)</li><li><code>%V</code> - ISO calendar week number of the week-based year (01..53)</li><li><code>%w</code> - day of week (Sunday is 0, 0..6)</li><li><code>%x</code> - (same as %D) date (04/05/16)</li><li><code>%X</code> - (same as %T) 24-hour time (13:04:05)</li><li><code>%y</code> - year modulo 100</li><li><code>%Y</code> - year, zero padded</li></ul>","b":true,"t":"<span class=\\"type\\">String</span>","n":"format"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"}],"d":"<p>Formats the time to the ISO format.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">formatISO</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>)) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;2018-04-05T00:00:00.000Z&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"formatISO"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"time"},{"t":"<span class=\\"type\\">Time</span>.<span class=\\"type\\">Format</span>.<span class=\\"type\\">Language</span>","n":"language"},{"t":"<span class=\\"type\\">String</span>","n":"token"}],"d":"<p>Formats the time by the single token using the language.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Time</span>.<span class=\\"variable\\">formatToken</span>(<span class=\\"type\\">Time</span>.<span class=\\"type\\">Format</span>:<span class=\\"type\\">ENGLISH</span>, <span class=\\"string\\">&quot;Y&quot;</span>, <span class=\\"type\\">Time</span>.<span class=\\"variable\\">utcDate</span>(<span class=\\"number\\">2018</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>)) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;2018&quot;</span></span></code></pre>","b":true,"t":"<span class=\\"type\\">String</span>","n":"formatToken"}],"d":"<p><code>Time</code> represents a point in time without a time-zone attribute.</p><p>The calendaric calculations are based on the rules of the proleptic Gregorian\\ncalendar as specified in <a href=\\"https://en.wikipedia.org/wiki/ISO_8601\\">ISO 8601</a>. Leap seconds are ignored.</p><p>This module uses the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\\"><code>Date</code></a> JavaScript object under the hood. Since the\\n<code>Date</code> object is always in the clients time-zone, this module uses the UTC\\nbased functions <code>getUTC*</code> and <code>setUTC*</code> for querying and modifying.</p><p>Things to keep in mind when working with <code>Time</code>:</p><ul><li>Weekdays start from 1 (1 is Monday, 7 is sunday).</li><li>Months start from 1 (January).</li><li>Days start from 1.</li></ul>","l":"Time","n":"Time"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Bool</span>","n":"item"}],"d":"<p>Converts a boolean to a string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Bool</span>.<span class=\\"variable\\">toString</span>(<span class=\\"keyword\\">true</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;true&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Bool</span>.<span class=\\"variable\\">toString</span>(<span class=\\"keyword\\">false</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;false&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"toString"}],"d":"<p>This module provides functions for working with boolean values.</p>","l":"Bool","n":"Bool"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"id"}],"d":"<p>Cancels a previously scheduled function call using the <code>request</code> function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">AnimationFrame</span>.<span class=\\"variable\\">cancel</span>(<span class=\\"variable\\">id</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"cancel"},{"k":4,"a":[{"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"variable\\">a</span>)","n":"function"}],"d":"<p>Schedules the function to run on the next frame, and returns its ID for\\npossible cancellation.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> id =\\n</span><span class=\\"line\\">  <span class=\\"type\\">AnimationFrame</span>.<span class=\\"variable\\">request</span>((<span class=\\"variable\\">timestamp</span> : <span class=\\"type\\">Number</span>) {\\n</span><span class=\\"line\\">    <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;Hello&quot;</span>)\\n</span><span class=\\"line\\">  })</span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"request"}],"d":"<p>This module provides functions to work with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame\\">Animation Frame Web API</a>.</p>","l":"AnimationFrame","n":"AnimationFrame"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"error"}],"d":"<p>Returns an <code>Err</code> result wit the the error.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"variable\\">error</span>(<span class=\\"string\\">&quot;error&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">isError</span>()) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"error"},{"k":4,"a":[{"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">error</span>, <span class=\\"variable\\">a</span>)","n":"result"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">a</span>, <span class=\\"type\\">Result</span>(<span class=\\"variable\\">error</span>, <span class=\\"variable\\">b</span>))","n":"function"}],"d":"<p>Maps over the value of the result to an other result and flattens it.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Err</span>(<span class=\\"string\\">&quot;error&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">flatMap</span>((<span class=\\"variable\\">item</span> : <span class=\\"type\\">String</span>) { <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"variable\\">item</span> <span class=\\"operator\\">+</span> <span class=\\"string\\">&quot;1&quot;</span>) })) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Err</span>(<span class=\\"string\\">&quot;error&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;ok&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">map</span>((<span class=\\"variable\\">item</span> : <span class=\\"type\\">String</span>) { <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"variable\\">item</span> <span class=\\"operator\\">+</span> <span class=\\"string\\">&quot;1&quot;</span>) })) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;ok1&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">error</span>, <span class=\\"variable\\">b</span>)","n":"flatMap"},{"k":4,"a":[{"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"result"}],"d":"<p>Returns <code>true</code> if the result is an <code>Err</code>.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Err</span>(<span class=\\"string\\">&quot;error&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">isError</span>()) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isError"},{"k":4,"a":[{"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"result"}],"d":"<p>Returns <code>true</code> if the result is an <code>Ok</code>.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;ok&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">isOk</span>()) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isOk"},{"k":4,"a":[{"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">error</span>, <span class=\\"type\\">Result</span>(<span class=\\"variable\\">error</span>, <span class=\\"variable\\">value</span>))","n":"result"}],"d":"<p>Flattens a nested result (where the other result is in an <code>Ok</code>).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Result</span>.<span class=\\"variable\\">flatten</span>(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;Hello&quot;</span>))) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;Hello&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Result</span>.<span class=\\"variable\\">flatten</span>(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Err</span>(<span class=\\"string\\">&quot;Error&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Err</span>(<span class=\\"string\\">&quot;Error&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">error</span>, <span class=\\"variable\\">value</span>)","n":"flatten"},{"k":4,"a":[{"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"result"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">b</span>, <span class=\\"variable\\">c</span>)","n":"function"}],"d":"<p>Apply a function to a result. If the result is <code>Ok</code>, it will be converted.\\nIf the result is an <code>Err</code>, the same error value will propagate through.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Err</span>(<span class=\\"string\\">&quot;error&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">map</span>((<span class=\\"variable\\">item</span> : <span class=\\"type\\">String</span>) { <span class=\\"variable\\">item</span> <span class=\\"operator\\">+</span> <span class=\\"string\\">&quot;1&quot;</span> })) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Err</span>(<span class=\\"string\\">&quot;error&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;ok&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">map</span>((<span class=\\"variable\\">item</span> : <span class=\\"type\\">String</span>) { <span class=\\"variable\\">item</span> <span class=\\"operator\\">+</span> <span class=\\"string\\">&quot;1&quot;</span> })) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;ok1&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">c</span>)","n":"map"},{"k":4,"a":[{"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"result"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">c</span>)","n":"function"}],"d":"<p>Transform an <code>Err</code> value.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Err</span>(<span class=\\"string\\">&quot;error&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">mapError</span>((<span class=\\"variable\\">item</span> : <span class=\\"type\\">String</span>) { <span class=\\"variable\\">item</span> <span class=\\"operator\\">+</span> <span class=\\"string\\">&quot;1&quot;</span> })) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Err</span>(<span class=\\"string\\">&quot;error1&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;ok&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">mapError</span>((<span class=\\"variable\\">item</span> : <span class=\\"type\\">String</span>) { <span class=\\"variable\\">item</span> <span class=\\"operator\\">+</span> <span class=\\"string\\">&quot;1&quot;</span> })) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;ok&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">c</span>, <span class=\\"variable\\">b</span>)","n":"mapError"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"input"}],"d":"<p>Returns an <code>Ok</code> result with the input.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"variable\\">ok</span>(<span class=\\"string\\">&quot;ok&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">isOk</span>()) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">b</span>, <span class=\\"variable\\">a</span>)","n":"ok"},{"k":4,"a":[{"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"result"}],"d":"<p>Convert to a simpler <code>Maybe</code> if the actual error message is not needed or you\\nneed to interact with some code that primarily uses maybes.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;blah&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">toMaybe</span>()) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;blah&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Err</span>(<span class=\\"string\\">&quot;blah&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">toMaybe</span>()) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">b</span>)","n":"toMaybe"},{"k":4,"a":[{"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"result"},{"t":"<span class=\\"variable\\">b</span>","n":"defaultValue"}],"d":"<p>If the result is <code>Ok</code> return the value, but if the result is an <code>Err</code> then\\nreturn a given default value.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Err</span>(<span class=\\"string\\">&quot;error&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">withDefault</span>(<span class=\\"string\\">&quot;a&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;a&quot;</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;ok&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">withDefault</span>(<span class=\\"string\\">&quot;a&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;ok&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"variable\\">b</span>","n":"withDefault"},{"k":4,"a":[{"t":"<span class=\\"type\\">Result</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"result"},{"t":"<span class=\\"variable\\">a</span>","n":"defaultError"}],"d":"<p>If the result is <code>Err</code> return the error, but if the result is an <code>Ok</code> then\\nreturn a given default error.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Err</span>(<span class=\\"string\\">&quot;error&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">withError</span>(<span class=\\"string\\">&quot;a&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;error&quot;</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">(<span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;ok&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Result</span>.<span class=\\"variable\\">withError</span>(<span class=\\"string\\">&quot;a&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;a&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"variable\\">a</span>","n":"withError"}],"d":"<p>This module provides functions for working with the <code>Result</code> type.</p>","l":"Result","n":"Result"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"input"}],"d":"<p>Creates a new regular expression from a string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Regexp</span>.<span class=\\"variable\\">create</span>(<span class=\\"string\\">&quot;test&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"regexp\\">/test/</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Regexp</span>","n":"create"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"input"},{"t":"<span class=\\"type\\">Regexp</span>.<span class=\\"type\\">Options</span>","n":"options"}],"d":"<p>Creates a new regular expression using the options.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Regexp</span>.<span class=\\"variable\\">createWithOptions</span>(\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;test&quot;</span>,\\n</span><span class=\\"line\\">  {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">caseInsensitive</span>: <span class=\\"keyword\\">true</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">multiline</span>: <span class=\\"keyword\\">true</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">unicode</span>: <span class=\\"keyword\\">true</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">global</span>: <span class=\\"keyword\\">true</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">sticky</span>: <span class=\\"keyword\\">true</span>\\n</span><span class=\\"line\\">  }) <span class=\\"operator\\">==</span> <span class=\\"regexp\\">/test/gimuy</span></span></code></pre>","b":true,"t":"<span class=\\"type\\">Regexp</span>","n":"createWithOptions"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"input"}],"d":"<p>Escapes the input to use in a regular expression.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Regexp</span>.<span class=\\"variable\\">escape</span>(<span class=\\"string\\">&quot;-{&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;\\\\\\\\-\\\\\\\\{&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"escape"},{"k":4,"a":[{"t":"<span class=\\"type\\">Regexp</span>","n":"regexp"},{"t":"<span class=\\"type\\">String</span>","n":"input"}],"d":"<p>Returns whether or not the regular expression matches the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Regexp</span>.<span class=\\"variable\\">match</span>(<span class=\\"regexp\\">/,/</span>, <span class=\\"string\\">&quot;asd,asd&quot;</span>)) == true</span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"match"},{"k":4,"a":[{"t":"<span class=\\"type\\">Regexp</span>","n":"regexp"},{"t":"<span class=\\"type\\">String</span>","n":"input"}],"d":"<p>Returns all of the matches of the regular expression against the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Regexp</span>.<span class=\\"variable\\">matces</span>(<span class=\\"regexp\\">/\\\\w/i</span>, <span class=\\"string\\">&quot;a,b,c,d&quot;</span>) <span class=\\"operator\\">==</span> [\\n</span><span class=\\"line\\">  {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">submatches</span>: [],\\n</span><span class=\\"line\\">    <span class=\\"variable\\">match</span>: <span class=\\"string\\">&quot;a&quot;</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">index</span>: <span class=\\"number\\">0</span>\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Regexp</span>.<span class=\\"type\\">Match</span>)","n":"matches"},{"k":4,"a":[{"t":"<span class=\\"type\\">Regexp</span>","n":"regexp"},{"t":"<span class=\\"type\\">String</span>","n":"input"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Regexp</span>.<span class=\\"type\\">Match</span>, <span class=\\"type\\">String</span>)","n":"replacer"}],"d":"<p>Replaces the matches of the regular expression using the function to\\ncalculate the replacement string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Regexp</span>.<span class=\\"variable\\">replace</span>(\\n</span><span class=\\"line\\">  <span class=\\"regexp\\">/\\\\w/i</span>,\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;a,b,c,d&quot;</span>,\\n</span><span class=\\"line\\">  (<span class=\\"variable\\">match</span> : <span class=\\"type\\">Regexp.Match</span>) { <span class=\\"variable\\">match</span>.<span class=\\"variable\\">match</span> <span class=\\"operator\\">+</span> <span class=\\"string\\">&quot;1&quot;</span> }) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;a1,b1,c1,d1&quot;</span></span></code></pre>","b":true,"t":"<span class=\\"type\\">String</span>","n":"replace"},{"k":4,"a":[{"t":"<span class=\\"type\\">Regexp</span>","n":"regexp"},{"t":"<span class=\\"type\\">String</span>","n":"input"}],"d":"<p>Splits the string by the regular expression.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Regexp</span>.<span class=\\"variable\\">split</span>(<span class=\\"regexp\\">/,/</span>, <span class=\\"string\\">&quot;a,b,c,d&quot;</span>)) == [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>)","n":"split"},{"k":4,"a":[{"t":"<span class=\\"type\\">Regexp</span>","n":"regexp"}],"d":"<p>Returns the string representation of the regular expression.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Regexp</span>.<span class=\\"variable\\">toString</span>(<span class=\\"regexp\\">/test/</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;/test/&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"toString"}],"d":"<p>This module provides functions for working with regular expressions.</p>","l":"Regexp","n":"Regexp"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Sets the clipboards content to the given value.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Clipboard</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;Hello World!&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">String</span>)","n":"set"}],"d":"<p>This module has functions for manipulating the clipboard.</p>","l":"Clipboard","n":"Clipboard"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"},{"t":"<span class=\\"variable\\">key</span>","n":"keyToDelete"}],"d":"<p>Deletes the key-value pair.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">1</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">delete</span>(<span class=\\"string\\">&quot;a&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()</span></code></pre>","b":true,"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"delete"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"},{"t":"<span class=\\"variable\\">value</span>","n":"valueToDelete"}],"d":"<p>Delete all key-value pairs which match the value.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">1</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"number\\">1</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">deleteValues</span>(<span class=\\"number\\">1</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()</span></code></pre>","b":true,"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"deleteValues"},{"k":4,"d":"<p>Returns an empty map.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">x</span>, <span class=\\"variable\\">z</span>)","n":"empty"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"map"}],"d":"<p>Returns the map as an array of key-value tuples.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">1</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"number\\">2</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">entries</span>()) <span class=\\"operator\\">==</span> [{<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">1</span>}, {<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"number\\">2</span>}]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>))","n":"entries"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">value</span>, <span class=\\"type\\">Bool</span>)","n":"function"}],"d":"<p>Returns the first key which is matched by the function.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">0</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"number\\">1</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">findKeyBy</span>((<span class=\\"variable\\">value</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">value</span> <span class=\\"operator\\">==</span> <span class=\\"number\\">1</span> })) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">just</span>(<span class=\\"string\\">&quot;b&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">key</span>)","n":"findKeyBy"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>))","n":"array"}],"d":"<p>Converts an <code>Array</code> of key-value tuples into a map.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"> <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">1</span>)\\n</span><span class=\\"line\\"> <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"number\\">2</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">fromArray</span>([{<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">1</span>}, {<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"number\\">2</span>}])</span></code></pre>","b":false,"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"fromArray"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"},{"t":"<span class=\\"variable\\">key</span>","n":"search"}],"d":"<p>Gets the value of the key.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">get</span>(<span class=\\"string\\">&quot;key&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"variable\\">just</span>(<span class=\\"string\\">&quot;value&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">value</span>)","n":"get"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"},{"t":"<span class=\\"variable\\">key</span>","n":"key"},{"t":"<span class=\\"variable\\">value</span>","n":"value"}],"d":"<p>Gets the value of the key using the value as fallback.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">getWithDefault</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;fallback&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;value&quot;</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">getWithDefault</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;fallback&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;fallback&quot;</span></span></code></pre>","b":true,"t":"<span class=\\"variable\\">value</span>","n":"getWithDefault"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"},{"t":"<span class=\\"variable\\">key</span>","n":"search"}],"d":"<p>Returns whether or not the map has the key.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">1</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">has</span>(<span class=\\"string\\">&quot;a&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"has"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"}],"d":"<p>Returns whether or not the map is empty.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">isEmpty</span>()) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;b&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">isEmpty</span>()) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isEmpty"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"}],"d":"<p>Returns the keys of a map as an <code>Array(key)</code>.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">1</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"number\\">2</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">values</span>()) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;b&quot;</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">key</span>)","n":"keys"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>, <span class=\\"variable\\">result</span>)","n":"function"}],"d":"<p>Maps over the keys-values pairs with the function.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">1</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"number\\">2</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">map</span>((<span class=\\"variable\\">key</span> : <span class=\\"type\\">String</span>, <span class=\\"variable\\">value</span> : <span class=\\"type\\">Number</span>) : <span class=\\"type\\">Number</span> { <span class=\\"variable\\">value</span> <span class=\\"operator\\">*</span> <span class=\\"number\\">2</span> })\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">values</span>()) <span class=\\"operator\\">==</span> [<span class=\\"number\\">2</span>,<span class=\\"number\\">4</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">result</span>)","n":"map"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map1"},{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map2"}],"d":"<p>Merges two maps together where the second has the precedence.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> a =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;b&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"keyword\\">let</span> b =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;y&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">merge</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">get</span>(<span class=\\"string\\">&quot;a&quot;</span>)) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;y&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"merge"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"},{"t":"<span class=\\"variable\\">memo</span>","n":"memo"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">memo</span>, <span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>, <span class=\\"variable\\">memo</span>)","n":"method"}],"d":"<p>Reduces the map from the left using the accumulator function.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">1</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"number\\">2</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">reduce</span>(\\n</span><span class=\\"line\\">  <span class=\\"number\\">0</span>,\\n</span><span class=\\"line\\">  (<span class=\\"variable\\">memo</span> : <span class=\\"type\\">Number</span>, <span class=\\"variable\\">key</span> : <span class=\\"type\\">String</span>, <span class=\\"variable\\">value</span> : <span class=\\"type\\">Number</span>) : <span class=\\"type\\">Number</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">memo</span> <span class=\\"operator\\">+</span> <span class=\\"variable\\">value</span>\\n</span><span class=\\"line\\">  })) <span class=\\"operator\\">==</span> <span class=\\"number\\">3</span></span></code></pre>","b":true,"t":"<span class=\\"variable\\">memo</span>","n":"reduce"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"},{"t":"<span class=\\"variable\\">key</span>","n":"key"},{"t":"<span class=\\"variable\\">value</span>","n":"value"}],"d":"<p>Assigns the value to the key in the map.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"set"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"}],"d":"<p>Returns the number of items in the map.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">1</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">size</span>()) <span class=\\"operator\\">==</span> <span class=\\"number\\">1</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"size"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>, <span class=\\"variable\\">result</span>)","n":"method"}],"d":"<p>Sorts the map using the function.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">1</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"number\\">2</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">sortBy</span>((<span class=\\"variable\\">key</span> : <span class=\\"type\\">String</span>, <span class=\\"variable\\">value</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">value</span> <span class=\\"operator\\">-</span> <span class=\\"number\\">100</span> })\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">values</span>()) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"string\\">&quot;a&quot;</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"sortBy"},{"k":4,"a":[{"t":"<span class=\\"type\\">Map</span>(<span class=\\"variable\\">key</span>, <span class=\\"variable\\">value</span>)","n":"map"}],"d":"<p>Returns the values of a map as an <code>Array(value)</code>.</p><pre><code><span class=\\"line\\">(<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">1</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"number\\">2</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Map</span>.<span class=\\"variable\\">values</span>()) <span class=\\"operator\\">==</span> [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">value</span>)","n":"values"}],"d":"<p>This module provides functions for the <code>Map</code> data structure (mapping keys to\\nvalues).</p><p>Implementation wise we are using an array of tuples where the first item is\\nthe key, where the second item is the value.</p>","l":"Map","n":"Map"},{"k":6,"e":[{"k":4,"d":"<p>Returns an empty <code>Html</code> object. It is useful for example if you don't want to\\nrender something conditionally. Same as an empty fragment <code>&lt;&gt;&lt;/&gt;</code>.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> (<span class=\\"type\\">Array</span>.<span class=\\"variable\\">isEmpty</span>(<span class=\\"variable\\">items</span>)) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Html</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\">} <span class=\\"keyword\\">else</span> {\\n</span><span class=\\"line\\">  &lt;<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">    <span class=\\"variable\\">items</span>\\n</span><span class=\\"line\\">  &lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Html</span>","n":"empty"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>","n":"html"}],"d":"<p>Returns whether or not the html is empty.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Html</span>.<span class=\\"variable\\">isEmpty</span>(&lt;<span class=\\"namespace\\">div</span>&gt;&lt;/<span class=\\"namespace\\">div</span>&gt;) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Html</span>.<span class=\\"variable\\">isEmpty</span>(&lt;&gt;&lt;/&gt;) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isEmpty"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>","n":"html"}],"d":"<p>Returns whether or not the html is not empty.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Html</span>.<span class=\\"variable\\">isNotEmpty</span>(&lt;<span class=\\"namespace\\">div</span>&gt;&lt;/<span class=\\"namespace\\">div</span>&gt;) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Html</span>.<span class=\\"variable\\">isNotEmpty</span>(&lt;&gt;&lt;/&gt;) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isNotEmpty"}],"d":"<p>This module provides functions for working with <code>Html</code>.</p>","l":"Html","n":"Html"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">IntersectionObserver</span>","n":"observer"}],"d":"<p>Unobserves all observed elements.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">IntersectionObserver</span>.<span class=\\"variable\\">disconnect</span>(<span class=\\"variable\\">observer</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">IntersectionObserver</span>","n":"disconnect"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"rootMargin"},{"t":"<span class=\\"type\\">Number</span>","n":"threshold"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Number</span>, <span class=\\"variable\\">a</span>)","n":"callback"}],"d":"<p>Creates a new intersection observer.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">IntersectionObserver</span>.<span class=\\"variable\\">new</span>(<span class=\\"string\\">&quot;50px&quot;</span>, <span class=\\"number\\">0.1</span>,\\n</span><span class=\\"line\\">  (<span class=\\"variable\\">intersectionRatio</span> : <span class=\\"type\\">Number</span>) {\\n</span><span class=\\"line\\">    <span class=\\"keyword\\">if</span> (<span class=\\"variable\\">intersectionRatio</span> <span class=\\"operator\\">==</span> <span class=\\"number\\">1</span>) {\\n</span><span class=\\"line\\">      <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;Fully visible!&quot;</span>)\\n</span><span class=\\"line\\">    } <span class=\\"keyword\\">else</span> {\\n</span><span class=\\"line\\">      <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;Not fully visible!&quot;</span>)\\n</span><span class=\\"line\\">    }\\n</span><span class=\\"line\\">  })</span></code></pre>","b":true,"t":"<span class=\\"type\\">IntersectionObserver</span>","n":"new"},{"k":4,"a":[{"t":"<span class=\\"type\\">IntersectionObserver</span>","n":"observer"},{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Observes the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">element</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">IntersectionObserver</span>.<span class=\\"variable\\">observe</span>(<span class=\\"variable\\">observer</span>, <span class=\\"variable\\">element</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">IntersectionObserver</span>","n":"observe"},{"k":4,"a":[{"t":"<span class=\\"type\\">IntersectionObserver</span>","n":"observer"},{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Unobserves the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">element</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">IntersectionObserver</span>.<span class=\\"variable\\">unobserve</span>(<span class=\\"variable\\">observer</span>, <span class=\\"variable\\">element</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">IntersectionObserver</span>","n":"unobserve"}],"d":"<p>This module provides functions for working with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\\">Intersection Observer Web\\nAPI</a>.</p>","l":"IntersectionObserver","n":"IntersectionObserver"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Storage</span>","n":"storage"}],"d":"<p>Clears the storage, removing all key-value pairs.</p>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Void</span>)","n":"clear"},{"k":4,"a":[{"t":"<span class=\\"type\\">Storage</span>","n":"storage"},{"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Deletes the value with the key from the storage.</p>","b":true,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Void</span>)","n":"delete"},{"k":4,"a":[{"t":"<span class=\\"type\\">Storage</span>","n":"storage"},{"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Gets the value of the key in the storage.</p>","b":true,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">String</span>)","n":"get"},{"k":4,"a":[{"t":"<span class=\\"type\\">Storage</span>","n":"storage"}],"d":"<p>Returns alll the keys in the storage.</p>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>))","n":"keys"},{"k":4,"a":[{"t":"<span class=\\"type\\">Storage</span>","n":"storage"},{"t":"<span class=\\"type\\">String</span>","n":"key"},{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Sets the key to the value in the storage.</p>","b":true,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Void</span>)","n":"set"},{"k":4,"a":[{"t":"<span class=\\"type\\">Storage</span>","n":"storage"}],"d":"<p>Returns the number of items in the storage.</p>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Number</span>)","n":"size"}],"d":"<p>This module provides functions to work with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Storage\\">Storage Web API</a>. This module\\nshould not be used directly, it is used by <code>Storage.Local</code> and <code>Storage.Session</code>\\nmodules.</p>","l":"Storage.Common","n":"Storage.Common"},{"k":6,"e":[{"k":4,"d":"<p>Clears the session storage.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Session</span>.<span class=\\"variable\\">clear</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Void</span>)","n":"clear"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Deletes the value with the key from the session storage.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Session</span>.<span class=\\"variable\\">delete</span>(<span class=\\"string\\">&quot;key&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Void</span>)","n":"delete"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Gets the value of the key in the session storage.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Session</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Session</span>.<span class=\\"variable\\">get</span>(<span class=\\"string\\">&quot;key&quot;</span>) <span class=\\"comment\\">// &quot;value&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">String</span>)","n":"get"},{"k":4,"d":"<p>Returns all the keys in the session storage.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Session</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Session</span>.<span class=\\"variable\\">keys</span>() <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;key&quot;</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>))","n":"keys"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"key"},{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Sets the key to the value in the session storage.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Session</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Void</span>)","n":"set"},{"k":4,"d":"<p>Returns the number of items in the session storage.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Session</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Session</span>.<span class=\\"variable\\">size</span>() <span class=\\"operator\\">==</span> <span class=\\"number\\">1</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Number</span>)","n":"size"}],"d":"<p>This module provides functions to work with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\\">SessionStorage Web API</a>.</p>","l":"Storage.Session","n":"Storage.Session"},{"k":6,"e":[{"k":4,"d":"<p>Clears the local storage.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Local</span>.<span class=\\"variable\\">clear</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Void</span>)","n":"clear"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Deletes the value with the key from the local storage.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Local</span>.<span class=\\"variable\\">delete</span>(<span class=\\"string\\">&quot;key&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Void</span>)","n":"delete"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Gets the value of the key in the local storage.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Local</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Local</span>.<span class=\\"variable\\">get</span>(<span class=\\"string\\">&quot;key&quot;</span>) <span class=\\"comment\\">// &quot;value&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">String</span>)","n":"get"},{"k":4,"d":"<p>Returns all the keys in the local storage.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Local</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Local</span>.<span class=\\"variable\\">keys</span>() <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;key&quot;</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>))","n":"keys"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"key"},{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Sets the key to the value in the local storage.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Local</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Void</span>)","n":"set"},{"k":4,"d":"<p>Returns the number of items in the local storage.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Local</span>.<span class=\\"variable\\">set</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Storage</span>.<span class=\\"type\\">Local</span>.<span class=\\"variable\\">size</span>() <span class=\\"operator\\">==</span> <span class=\\"number\\">1</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Storage</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Number</span>)","n":"size"}],"d":"<p>This module provides functions to work with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\\">LocalStorage Web API</a>.</p>","l":"Storage.Local","n":"Storage.Local"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">item</span>, <span class=\\"type\\">Bool</span>)","n":"function"}],"d":"<p>Returns <code>true</code> if any item in the array matches the predicate function,\\n<code>false</code> otherwise.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">any</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>], (<span class=\\"variable\\">number</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">number</span> <span class=\\"operator\\">%</span> <span class=\\"number\\">2</span> <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span> }) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">any</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">3</span>], (<span class=\\"variable\\">number</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">number</span> <span class=\\"operator\\">%</span> <span class=\\"number\\">2</span> <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span> }) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"any"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array1"},{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array2"}],"d":"<p>Merges two arrays together into a new one.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">append</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>], [<span class=\\"number\\">3</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">8</span>]) <span class=\\"operator\\">==</span> [<span class=\\"number\\">1</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">8</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"append"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Number</span>","n":"index"}],"d":"<p>Returns the element at the index as a <code>Maybe(item)</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">at</span>([<span class=\\"number\\">0</span>], <span class=\\"number\\">0</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"number\\">0</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">at</span>([<span class=\\"number\\">0</span>], <span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">item</span>)","n":"at"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">item</span>))","n":"array"}],"d":"<p>Flattens an <code>Array(Maybe(item))</code> into an <code>Array(item)</code>, by unwrapping the\\nitems and skipping all elements of <code>Maybe.Nothing</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">compact</span>([<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;A&quot;</span>), <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>]) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;A&quot;</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"compact"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>))","n":"arrays"}],"d":"<p>Concatenate multiple arrays into a single array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">concat</span>([[<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>], [<span class=\\"number\\">3</span>], [<span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>]]) <span class=\\"operator\\">==</span> [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"concat"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"variable\\">item</span>","n":"other"}],"d":"<p>Checks whether or not the element exists in the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">contains</span>([<span class=\\"string\\">&quot;x&quot;</span>, <span class=\\"string\\">&quot;y&quot;</span>, <span class=\\"string\\">&quot;z&quot;</span>], <span class=\\"string\\">&quot;a&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">contains</span>([<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"string\\">&quot;c&quot;</span>], <span class=\\"string\\">&quot;a&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"contains"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"variable\\">item</span>","n":"what"}],"d":"<p>Deletes every occurrence of the element from the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">delete</span>([<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"string\\">&quot;c&quot;</span>, <span class=\\"string\\">&quot;a&quot;</span>], <span class=\\"string\\">&quot;a&quot;</span>) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"string\\">&quot;c&quot;</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"delete"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Number</span>","n":"index"}],"d":"<p>Deletes the item of an array at the specified index.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">deleteAt</span>([<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"string\\">&quot;c&quot;</span>], <span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;c&quot;</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"deleteAt"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Drop the specified number of items from the end of the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">dropEnd</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>], <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"dropEnd"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Drop the specified number of items from the start of the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">dropStart</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>], <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> [<span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"dropStart"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">item</span>, <span class=\\"type\\">Bool</span>)","n":"function"}],"d":"<p>Finds the first element in the array that matches the predicate function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">find</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>], (<span class=\\"variable\\">number</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">number</span> <span class=\\"operator\\">%</span> <span class=\\"number\\">2</span> <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span> }) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"number\\">2</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">item</span>)","n":"find"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">item</span>, <span class=\\"type\\">Tuple</span>(<span class=\\"type\\">Bool</span>, <span class=\\"variable\\">result</span>))","n":"function"}],"d":"<p>Finds the first element in the array that matches the predicate functions\\nfirst item and returns the second item in the resulting tuple.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">findByAndMap</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>],\\n</span><span class=\\"line\\">  (<span class=\\"variable\\">number</span> : <span class=\\"type\\">Number</span>) { {<span class=\\"variable\\">number</span> <span class=\\"operator\\">%</span> <span class=\\"number\\">2</span> <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span>, <span class=\\"string\\">&quot;Two&quot;</span>} }) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;Two&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">result</span>)","n":"findByAndMap"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"}],"d":"<p>Returns the first element of the array as <code>Maybe.Just(item)</code> or\\n<code>Maybe.Nothing</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">first</span>([<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;x&quot;</span>]) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;a&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">first</span>([]) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">item</span>)","n":"first"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"variable\\">item</span>","n":"item"}],"d":"<p>Returns the first element of the array or the default value.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">firstWithDefault</span>([<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"string\\">&quot;x&quot;</span>], <span class=\\"string\\">&quot;a&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;b&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">firstWithDefault</span>([], <span class=\\"string\\">&quot;a&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;a&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"variable\\">item</span>","n":"firstWithDefault"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>))","n":"array"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>), <span class=\\"type\\">Array</span>(<span class=\\"variable\\">result</span>))","n":"function"}],"d":"<p>Map over a nested array and then flattens the result.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">flatMap</span>(\\n</span><span class=\\"line\\">  [[<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>], [<span class=\\"number\\">1</span>, <span class=\\"number\\">5</span>]],\\n</span><span class=\\"line\\">  (<span class=\\"variable\\">item</span> : <span class=\\"type\\">Array</span>(<span class=\\"type\\">Number</span>)) { [<span class=\\"type\\">Array</span>.<span class=\\"variable\\">max</span>(<span class=\\"variable\\">item</span>) <span class=\\"keyword\\">or</span> <span class=\\"number\\">0</span>] }) <span class=\\"operator\\">==</span> [<span class=\\"number\\">2</span>,<span class=\\"number\\">5</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">result</span>)","n":"flatMap"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Number</span>","n":"size"}],"d":"<p>Group an array into sub groups of specified length (all items are included so\\nthe last group maybe shorter if after grouping there is a remainder)</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">groupsOf</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>, <span class=\\"number\\">6</span>, <span class=\\"number\\">7</span>], <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> [\\n</span><span class=\\"line\\">  [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>], [<span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>], [<span class=\\"number\\">5</span>, <span class=\\"number\\">6</span>], [<span class=\\"number\\">7</span>]]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>))","n":"groupsOf"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Number</span>","n":"size"}],"d":"<p>Group an array into sub groups of specified length (all items are included so\\nthe last group maybe shorter if after grouping there is a remainder) starting\\nfrom the end of the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">groupsOfFromEnd</span>([<span class=\\"number\\">1</span>,<span class=\\"number\\">2</span>,<span class=\\"number\\">3</span>,<span class=\\"number\\">4</span>,<span class=\\"number\\">5</span>,<span class=\\"number\\">6</span>,<span class=\\"number\\">7</span>], <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> [[<span class=\\"number\\">1</span>],[<span class=\\"number\\">2</span>,<span class=\\"number\\">3</span>],[<span class=\\"number\\">4</span>,<span class=\\"number\\">5</span>],[<span class=\\"number\\">6</span>,<span class=\\"number\\">7</span>]]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>))","n":"groupsOfFromEnd"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"variable\\">result</span>","n":"value"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">item</span>, <span class=\\"variable\\">result</span>)","n":"method"}],"d":"<p>Returns the index of the item in the array which matches the generated value\\nby the function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">indexBy</span>([<span class=\\"string\\">&quot;a&quot;</span>,<span class=\\"string\\">&quot;b&quot;</span>,<span class=\\"string\\">&quot;c&quot;</span>], <span class=\\"string\\">&quot;a&quot;</span>, (<span class=\\"variable\\">item</span> : <span class=\\"type\\">String</span>) : <span class=\\"type\\">String</span> { <span class=\\"variable\\">item</span> }) <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span></span></code></pre>","b":true,"t":"<span class=\\"type\\">Number</span>","n":"indexBy"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"variable\\">item</span>","n":"search"}],"d":"<p>Returns the index of the item in the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">indexOf</span>([<span class=\\"string\\">&quot;a&quot;</span>,<span class=\\"string\\">&quot;b&quot;</span>,<span class=\\"string\\">&quot;c&quot;</span>], <span class=\\"string\\">&quot;a&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Number</span>)","n":"indexOf"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"variable\\">item</span>","n":"item"},{"t":"<span class=\\"type\\">Number</span>","n":"position"}],"d":"<p>Inserts the item into the specified position of the array, pushing items\\ntoward the end of the array. If the length is negative the item will be\\ninserted at the start of the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">insertAt</span>([<span class=\\"string\\">&quot;b&quot;</span>,<span class=\\"string\\">&quot;c&quot;</span>], <span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"number\\">0</span>) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;a&quot;</span>,<span class=\\"string\\">&quot;b&quot;</span>,<span class=\\"string\\">&quot;c&quot;</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"insertAt"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"variable\\">item</span>","n":"item"}],"d":"<p>Inserts the element between the elements of the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">intersperse</span>([<span class=\\"string\\">&quot;x&quot;</span>, <span class=\\"string\\">&quot;y&quot;</span>, <span class=\\"string\\">&quot;z&quot;</span>], <span class=\\"string\\">&quot;a&quot;</span>) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;x&quot;</span>, <span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;y&quot;</span>, <span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;z&quot;</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"intersperse"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"}],"d":"<p>Returns whether or not the array is empty.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">isEmpty</span>([<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;b&quot;</span>]) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">isEmpty</span>([]) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isEmpty"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"}],"d":"<p>Returns whether or not the array is not empty.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">isNotEmpty</span>([<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;b&quot;</span>]) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">isNotEmpty</span>([]) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isNotEmpty"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"}],"d":"<p>Returns the last element of the array as <code>Maybe.Just(a)</code> or <code>Maybe.Nothing</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">last</span>([<span class=\\"string\\">&quot;x&quot;</span>, <span class=\\"string\\">&quot;a&quot;</span>]) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;a&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">last</span>([]) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">item</span>)","n":"last"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"variable\\">item</span>","n":"item"}],"d":"<p>Returns the last element of the array or the default value.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">lastWithDefault</span>([<span class=\\"string\\">&quot;x&quot;</span>, <span class=\\"string\\">&quot;b&quot;</span>], <span class=\\"string\\">&quot;a&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;b&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">lastWithDefault</span>([], <span class=\\"string\\">&quot;a&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;a&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"variable\\">item</span>","n":"lastWithDefault"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">item</span>, <span class=\\"variable\\">result</span>)","n":"method"}],"d":"<p>Creates a new array with the results of calling a provided function on every\\nelement in the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">map</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>], (<span class=\\"variable\\">number</span> : <span class=\\"type\\">Number</span>) : <span class=\\"type\\">Number</span> { <span class=\\"variable\\">number</span> <span class=\\"operator\\">+</span> <span class=\\"number\\">1</span> }) <span class=\\"operator\\">==</span> [<span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">result</span>)","n":"map"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">item</span>, <span class=\\"type\\">Number</span>, <span class=\\"variable\\">result</span>)","n":"method"}],"d":"<p>Creates a new array with the results of calling a provided function on every\\nelement in the array while providing the index of the element.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">mapWithIndex</span>(\\n</span><span class=\\"line\\">  [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>],\\n</span><span class=\\"line\\">  (<span class=\\"variable\\">number</span> : <span class=\\"type\\">Number</span>, <span class=\\"variable\\">index</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">number</span> <span class=\\"operator\\">+</span> <span class=\\"variable\\">index</span> }) <span class=\\"operator\\">==</span> [<span class=\\"number\\">2</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">6</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">result</span>)","n":"mapWithIndex"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Number</span>)","n":"array"}],"d":"<p>Returns the maximum value of an array of numbers. It's a <code>Maybe</code> because the\\narray might not have items in it.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">max</span>([<span class=\\"number\\">0</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>]) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"number\\">4</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">max</span>([]) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Number</span>)","n":"max"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Number</span>)","n":"array"}],"d":"<p>Returns the minimum value of an array of numbers. It's a <code>Maybe</code> because the\\narray might not have items in it.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">min</span>([<span class=\\"number\\">0</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>]) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"number\\">0</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">min</span>([]) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Number</span>)","n":"min"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Number</span>","n":"from"},{"t":"<span class=\\"type\\">Number</span>","n":"to"}],"d":"<p>Moves an item at the index <code>from</code> to a new index <code>to</code>.</p><p>The array is returned as is if:</p><ul><li><code>from</code> and <code>to</code> are the same</li><li>a negative number is supplied to <code>from</code></li><li>a number is supplied to <code>from</code> which is grater the the length of the array</li></ul><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">move</span>([<span class=\\"string\\">&quot;A&quot;</span>, <span class=\\"string\\">&quot;B&quot;</span>, <span class=\\"string\\">&quot;C&quot;</span>], <span class=\\"number\\">-1</span>, <span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;A&quot;</span>, <span class=\\"string\\">&quot;B&quot;</span>, <span class=\\"string\\">&quot;C&quot;</span>]\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">move</span>([<span class=\\"string\\">&quot;A&quot;</span>, <span class=\\"string\\">&quot;B&quot;</span>, <span class=\\"string\\">&quot;C&quot;</span>], <span class=\\"number\\">10</span>, <span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;A&quot;</span>, <span class=\\"string\\">&quot;B&quot;</span>, <span class=\\"string\\">&quot;C&quot;</span>]\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">move</span>([<span class=\\"string\\">&quot;A&quot;</span>, <span class=\\"string\\">&quot;B&quot;</span>, <span class=\\"string\\">&quot;C&quot;</span>], <span class=\\"number\\">0</span>, <span class=\\"number\\">0</span>) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;A&quot;</span>, <span class=\\"string\\">&quot;B&quot;</span>, <span class=\\"string\\">&quot;C&quot;</span>]</span></code></pre><p>If a negative number is supplied to <code>to</code> then, the item is moved to the\\nfirst position.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">move</span>([<span class=\\"string\\">&quot;A&quot;</span>, <span class=\\"string\\">&quot;B&quot;</span>, <span class=\\"string\\">&quot;C&quot;</span>], <span class=\\"number\\">2</span>, <span class=\\"number\\">-1</span>) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;C&quot;</span>, <span class=\\"string\\">&quot;A&quot;</span>, <span class=\\"string\\">&quot;B&quot;</span>]</span></code></pre><p>If a number is supplied to <code>to</code> which is grater the the length of the array,\\nthen the item is moved to the last position.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">move</span>([<span class=\\"string\\">&quot;A&quot;</span>, <span class=\\"string\\">&quot;B&quot;</span>, <span class=\\"string\\">&quot;C&quot;</span>], <span class=\\"number\\">0</span>, <span class=\\"number\\">10</span>) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;B&quot;</span>, <span class=\\"string\\">&quot;C&quot;</span>, <span class=\\"string\\">&quot;A&quot;</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"move"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"variable\\">item</span>","n":"item"}],"d":"<p>Pushes an element to the end of an array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">push</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>], <span class=\\"number\\">4</span>) <span class=\\"operator\\">==</span> [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>]\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">push</span>([], <span class=\\"string\\">&quot;a&quot;</span>) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;a&quot;</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"push"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"from"},{"t":"<span class=\\"type\\">Number</span>","n":"to"}],"d":"<p>Creates an array of numbers starting from the first argument and\\nending in the last.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">range</span>(<span class=\\"number\\">0</span>, <span class=\\"number\\">5</span>) <span class=\\"operator\\">==</span> [<span class=\\"number\\">0</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>, <span class=\\"number\\">5</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Number</span>)","n":"range"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"variable\\">memo</span>","n":"initial"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">memo</span>, <span class=\\"variable\\">item</span>, <span class=\\"variable\\">memo</span>)","n":"function"}],"d":"<p>Applies the function against an accumulator and each element in the array\\n(from start to end) to reduce it to a single value.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">reduce</span>(\\n</span><span class=\\"line\\">  [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>],\\n</span><span class=\\"line\\">  <span class=\\"number\\">0</span>,\\n</span><span class=\\"line\\">  (<span class=\\"variable\\">memo</span> : <span class=\\"type\\">Number</span>, <span class=\\"variable\\">item</span> : <span class=\\"type\\">Number</span>) : <span class=\\"type\\">Number</span> { <span class=\\"variable\\">memo</span> <span class=\\"operator\\">+</span> <span class=\\"variable\\">item</span> }) <span class=\\"operator\\">==</span> <span class=\\"number\\">6</span></span></code></pre>","b":true,"t":"<span class=\\"variable\\">memo</span>","n":"reduce"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"variable\\">memo</span>","n":"initial"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">memo</span>, <span class=\\"variable\\">item</span>, <span class=\\"variable\\">memo</span>)","n":"function"}],"d":"<p>Applies the function against an accumulator and each element in the array\\n(from end to start) to reduce it to a single value.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">reduceEnd</span>(\\n</span><span class=\\"line\\">  [<span class=\\"number\\">1</span>,<span class=\\"number\\">2</span>,<span class=\\"number\\">3</span>,<span class=\\"number\\">4</span>,<span class=\\"number\\">5</span>],\\n</span><span class=\\"line\\">  <span class=\\"number\\">0</span>,\\n</span><span class=\\"line\\">  (<span class=\\"variable\\">acc</span> : <span class=\\"type\\">Number</span>, <span class=\\"variable\\">n</span> : <span class=\\"type\\">Number</span>) : <span class=\\"type\\">Number</span> { <span class=\\"variable\\">acc</span> <span class=\\"operator\\">+</span> <span class=\\"variable\\">n</span>}) <span class=\\"operator\\">==</span> <span class=\\"number\\">15</span></span></code></pre>","b":true,"t":"<span class=\\"variable\\">memo</span>","n":"reduceEnd"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">item</span>, <span class=\\"type\\">Bool</span>)","n":"function"}],"d":"<p>Returns all elements that do not match the predicate function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">reject</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>], (<span class=\\"variable\\">number</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">number</span> <span class=\\"operator\\">%</span> <span class=\\"number\\">2</span> <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span> }) <span class=\\"operator\\">==</span> [<span class=\\"number\\">1</span>, <span class=\\"number\\">3</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"reject"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"}],"d":"<p>Returns a new array where the elements are reversed. The first array element\\nbecomes the last, and the last array element becomes the first.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">reverse</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>]) <span class=\\"operator\\">==</span> [<span class=\\"number\\">3</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">1</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"reverse"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Bool</span>","n":"condition"}],"d":"<p>Returns a new array where the elements are reversed if the condition is true.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">reverseIf</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>], <span class=\\"keyword\\">false</span>) <span class=\\"operator\\">==</span> [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>]\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">reverseIf</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>], <span class=\\"keyword\\">true</span>) <span class=\\"operator\\">==</span> [<span class=\\"number\\">3</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">1</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"reverseIf"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"}],"d":"<p>Returns a random element from the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">sample</span>([<span class=\\"string\\">&quot;a&quot;</span>]) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;a&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">sample</span>() <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">item</span>)","n":"sample"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">item</span>, <span class=\\"type\\">Bool</span>)","n":"function"}],"d":"<p>Returns all elements that match the predicate function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">select</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>], (<span class=\\"variable\\">number</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">number</span> <span class=\\"operator\\">%</span> <span class=\\"number\\">2</span> <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span> }) <span class=\\"operator\\">==</span> [<span class=\\"number\\">2</span>, <span class=\\"number\\">4</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"select"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Number</span>","n":"index"},{"t":"<span class=\\"variable\\">item</span>","n":"item"}],"d":"<p>Sets the item at index to the item of the array, if the specified index is\\nnot found in the array it returns the array unchanged.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">setAt</span>([<span class=\\"number\\">1</span>,<span class=\\"number\\">2</span>,<span class=\\"number\\">3</span>], <span class=\\"number\\">2</span>, <span class=\\"number\\">5</span>) <span class=\\"operator\\">==</span> [<span class=\\"number\\">1</span>,<span class=\\"number\\">2</span>,<span class=\\"number\\">5</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"setAt"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"}],"d":"<p>Returns the size of the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">size</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>]) <span class=\\"operator\\">==</span> <span class=\\"number\\">3</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">size</span>([]) <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"size"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Number</span>","n":"begin"},{"t":"<span class=\\"type\\">Number</span>","n":"end"}],"d":"<p>Returns a copy of a portion of an array (end not included).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">slice</span>(\\n</span><span class=\\"line\\">  [<span class=\\"string\\">&quot;ant&quot;</span>, <span class=\\"string\\">&quot;bison&quot;</span>, <span class=\\"string\\">&quot;camel&quot;</span>, <span class=\\"string\\">&quot;duck&quot;</span>, <span class=\\"string\\">&quot;elephant&quot;</span>], <span class=\\"number\\">2</span>, <span class=\\"number\\">4</span>\\n</span><span class=\\"line\\">) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;camel&quot;</span>, <span class=\\"string\\">&quot;duck&quot;</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"slice"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">item</span>, <span class=\\"variable\\">item</span>, <span class=\\"type\\">Number</span>)","n":"function"}],"d":"<p>Returns a new sorted array using the sorting function <code>function(a, b)</code>.\\nItems are sorted using a number:</p><ul><li><code>&gt; 0</code> - sort <code>b</code> before <code>a</code></li><li><code>&lt; 0</code> - sort <code>a</code> before <code>b</code></li><li><code>0</code> - keep original order of <code>a</code> and <code>b</code></li></ul><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">sort</span>([<span class=\\"number\\">4</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">2</span>], (<span class=\\"variable\\">a</span> : <span class=\\"type\\">Number</span>, <span class=\\"variable\\">b</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">a</span> <span class=\\"operator\\">-</span> <span class=\\"variable\\">b</span> }) <span class=\\"operator\\">==</span> [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"sort"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">item</span>, <span class=\\"variable\\">result</span>)","n":"function"}],"d":"<p>Returns a new sorted array using the functions return as the base of\\nthe sorting.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">sortBy</span>([<span class=\\"number\\">4</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">2</span>], (<span class=\\"variable\\">number</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">number</span> }) <span class=\\"operator\\">==</span> [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"sortBy"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Number</span>)","n":"array"}],"d":"<p>Sums up the array of numbers. Returns <code>0</code> if the array is empty.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">sum</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>]) <span class=\\"operator\\">==</span> <span class=\\"number\\">6</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">sum</span>([]) <span class=\\"operator\\">==</span> <span class=\\"number\\">0</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"sum"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">item</span>, <span class=\\"type\\">Number</span>)","n":"method"}],"d":"<p>Sums up the array using the specified function. Returns <code>0</code> if the array\\nis empty.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">sumBy</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>], (<span class=\\"variable\\">value</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">value</span> }) <span class=\\"operator\\">==</span> <span class=\\"number\\">6</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">sumBy</span>([], (<span class=\\"variable\\">value</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">value</span> }) <span class=\\"operator\\">==</span> <span class=\\"number\\">6</span></span></code></pre>","b":true,"t":"<span class=\\"type\\">Number</span>","n":"sumBy"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Number</span>","n":"index1"},{"t":"<span class=\\"type\\">Number</span>","n":"index2"}],"d":"<p>Swaps the items at the specified indexes of the array. It returns the array\\nunchanged if there is no item at any of the specified indexes.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">swap</span>([<span class=\\"string\\">&quot;a&quot;</span>,<span class=\\"string\\">&quot;b&quot;</span>], <span class=\\"number\\">0</span>, <span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"string\\">&quot;a&quot;</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"swap"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Takes the specified number of items from the end of the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">takeEnd</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>], <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> [<span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"takeEnd"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Takes the specified number of items from the start of the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">takeStart</span>([<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>], <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> [<span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"takeStart"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"}],"d":"<p>Removes duplicate items from the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">uniq</span>([<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"string\\">&quot;c&quot;</span>]) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;a&quot;</span>, <span class=\\"string\\">&quot;b&quot;</span>, <span class=\\"string\\">&quot;c&quot;</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"uniq"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"variable\\">item</span>","n":"item"}],"d":"<p>Pushes a new item at the head of the array.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">unshift</span>([<span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>], <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> [<span class=\\"number\\">2</span>, <span class=\\"number\\">3</span>, <span class=\\"number\\">4</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"unshift"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"array"},{"t":"<span class=\\"type\\">Number</span>","n":"index"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">item</span>, <span class=\\"variable\\">item</span>)","n":"method"}],"d":"<p>Updates the item at the index of the array using the function.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Array</span>.<span class=\\"variable\\">updateAt</span>([<span class=\\"number\\">0</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">2</span>], <span class=\\"number\\">2</span>, (<span class=\\"variable\\">number</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">number</span> <span class=\\"operator\\">+</span> <span class=\\"number\\">2</span>}) <span class=\\"operator\\">==</span> [<span class=\\"number\\">0</span>, <span class=\\"number\\">1</span>, <span class=\\"number\\">4</span>]</span></code></pre>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"variable\\">item</span>)","n":"updateAt"}],"d":"<p>This module provides functions to manipulate immutable <a href=\\"https://en.wikipedia.org/wiki/Array_(data_structure)\\">arrays</a>.</p>","l":"Array","n":"Array"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Array</span>(<span class=\\"type\\">ResizeObserver</span>.<span class=\\"type\\">Entry</span>), <span class=\\"variable\\">a</span>)","n":"callback"}],"d":"<p>Creates a new resize observer.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> observer =\\n</span><span class=\\"line\\">  <span class=\\"type\\">ResizeObserver</span>.<span class=\\"variable\\">new</span>((<span class=\\"variable\\">entries</span> : <span class=\\"type\\">ResizeObserver.Entry</span>) {\\n</span><span class=\\"line\\">    <span class=\\"keyword\\">for</span> (entry <span class=\\"keyword\\">of</span> <span class=\\"variable\\">entries</span>) {\\n</span><span class=\\"line\\">      <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"variable\\">entry</span>)\\n</span><span class=\\"line\\">    }\\n</span><span class=\\"line\\">  })</span></code></pre>","b":true,"t":"<span class=\\"type\\">ResizeObserver</span>","n":"new"},{"k":4,"a":[{"t":"<span class=\\"type\\">ResizeObserver</span>","n":"observer"},{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Observes the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">element</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">ResizeObserver</span>.<span class=\\"variable\\">observe</span>(<span class=\\"variable\\">observer</span>, <span class=\\"variable\\">element</span>, <span class=\\"keyword\\">true</span>, <span class=\\"keyword\\">true</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">ResizeObserver</span>","n":"observe"},{"k":4,"a":[{"t":"<span class=\\"type\\">ResizeObserver</span>","n":"observer"},{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Unobserves the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">element</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">ResizeObserver</span>.<span class=\\"variable\\">unobserve</span>(<span class=\\"variable\\">observer</span>, <span class=\\"variable\\">element</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">ResizeObserver</span>","n":"unobserve"}],"d":"<p>This module provides functions for working with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\\">Resize Observer Web API</a>.</p>","l":"ResizeObserver","n":"ResizeObserver"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Array</span>(<span class=\\"type\\">MutationObserver</span>.<span class=\\"type\\">Entry</span>), <span class=\\"variable\\">a</span>)","n":"callback"}],"d":"<p>Creates a new resize observer.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">MutationObserver</span>.<span class=\\"variable\\">new</span>((<span class=\\"variable\\">entries</span> : <span class=\\"type\\">MutationObserver.Entry</span>) {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">for</span> (entry <span class=\\"keyword\\">of</span> <span class=\\"variable\\">entries</span>) {\\n</span><span class=\\"line\\">    <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"variable\\">entry</span>)\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">})</span></code></pre>","b":true,"t":"<span class=\\"type\\">MutationObserver</span>","n":"new"},{"k":4,"a":[{"t":"<span class=\\"type\\">MutationObserver</span>","n":"observer"},{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"},{"t":"<span class=\\"type\\">Bool</span>","n":"subtree"},{"t":"<span class=\\"type\\">Bool</span>","n":"childList"}],"d":"<p>Observes the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">element</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">MutationObserver</span>.<span class=\\"variable\\">observe</span>(<span class=\\"variable\\">observer</span>, <span class=\\"variable\\">element</span>, <span class=\\"keyword\\">true</span>, <span class=\\"keyword\\">true</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">MutationObserver</span>","n":"observe"},{"k":4,"a":[{"t":"<span class=\\"type\\">MutationObserver</span>","n":"observer"},{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"}],"d":"<p>Unobserves the element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">element</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">MutationObserver</span>.<span class=\\"variable\\">unobserve</span>(<span class=\\"variable\\">observer</span>, <span class=\\"variable\\">element</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">MutationObserver</span>","n":"unobserve"}],"d":"<p>This module provides functions for working with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\\">Mutation Observer Web API\\n</a>.</p>","l":"MutationObserver","n":"MutationObserver"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"context"},{"t":"<span class=\\"type\\">Number</span>","n":"to"}],"d":"<p>Sets the horizontal scroll position of the window during a test.</p>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"setScrollLeft"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"context"},{"t":"<span class=\\"type\\">Number</span>","n":"to"}],"d":"<p>Sets the vertical scroll position of the window during a test.</p>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"setScrollTop"}],"d":"<p>This module provides functions for the window when writing tests.</p>","l":"Test.Window","n":"Test.Window"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>","n":"node"}],"d":"<p>Starts a test of an <code>Html</code> node.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"start"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">String</span>","n":"selector"}],"d":"<p>Tries to find an element matching the selector. If found it replaces the\\nvalue of the context with it, if not it fails the test.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">find</span>(<span class=\\"string\\">&quot;div&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"find"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">String</span>","n":"selector"}],"d":"<p>Tries to find an element matching the selector (globally). If found it\\nreplaces the value of the context with it, if not it fails the test.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">findGlobally</span>(<span class=\\"string\\">&quot;body&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"findGlobally"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">Number</span>","n":"top"}],"d":"<p>Asserts the top position of the current element.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">assertTop</span>(<span class=\\"number\\">0</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"assertTop"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">Number</span>","n":"left"}],"d":"<p>Asserts the left position of the current element.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">assertLeft</span>(<span class=\\"number\\">0</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"assertLeft"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">Number</span>","n":"height"}],"d":"<p>Asserts the height of the current element.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">assertHeight</span>(<span class=\\"number\\">0</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"assertHeight"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">Number</span>","n":"width"}],"d":"<p>Asserts the width of the current element.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">assertWidth</span>(<span class=\\"number\\">0</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"assertWidth"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">String</span>","n":"selector"}],"d":"<p>Triggers a click event on the element that matches the selector.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">triggerClick</span>(<span class=\\"string\\">&quot;div&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"triggerClick"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">String</span>","n":"selector"}],"d":"<p>Triggers a mouse down event on the element that matches the selector.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">triggerMouseDown</span>(<span class=\\"string\\">&quot;div&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"triggerMouseDown"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">String</span>","n":"selector"}],"d":"<p>Triggers a mouse move event on the element that matches the selector.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">triggerMouseMove</span>(<span class=\\"string\\">&quot;div&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"triggerMouseMove"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">String</span>","n":"selector"}],"d":"<p>Triggers a mouse up event on the element that matches the selector.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">triggerMouseUp</span>(<span class=\\"string\\">&quot;div&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"triggerMouseUp"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">String</span>","n":"selector"},{"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Triggers a keydown event with the key on the element that the selector.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">triggerKeyDown</span>(<span class=\\"string\\">&quot;div&quot;</span>, <span class=\\"string\\">&quot;A&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"triggerKeyDown"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">String</span>","n":"selector"},{"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Triggers a keyup event with the key on the element that matches the selector.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">triggerKeyUp</span>(<span class=\\"string\\">&quot;div&quot;</span>, <span class=\\"string\\">&quot;A&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"triggerKeyUp"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">String</span>","n":"selector"},{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Asserts the text of the element that matches the selector.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">assertTextOf</span>(<span class=\\"string\\">&quot;div&quot;</span>, <span class=\\"string\\">&quot;Content&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"assertTextOf"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">String</span>","n":"selector"}],"d":"<p>Asserts that the active element matches the selector.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">assertActiveElement</span>(<span class=\\"string\\">&quot;div&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"assertActiveElement"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">String</span>","n":"selector"}],"d":"<p>Asserts that there is an element that matches the selector.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">assertElementExists</span>(<span class=\\"string\\">&quot;div&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"assertElementExists"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"context"},{"t":"<span class=\\"type\\">String</span>","n":"selector"},{"t":"<span class=\\"type\\">String</span>","n":"property"},{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Asserts the value of a CSS property on the element that matches the selector.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">start</span>(&lt;<span class=\\"namespace\\">div</span> style=<span class=\\"string\\">&quot;color:red;&quot;</span>&gt;<span class=\\"string\\">&quot;Content&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Html</span>.<span class=\\"variable\\">assertCssOf</span>(<span class=\\"string\\">&quot;div&quot;</span>, <span class=\\"string\\">&quot;color&quot;</span>, <span class=\\"string\\">&quot;red&quot;</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>)","n":"assertCssOf"}],"d":"<p>This module provides functions for testing <code>Html</code></p>","l":"Test.Html","n":"Test.Html"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"context"},{"t":"<span class=\\"variable\\">a</span>","n":"value"}],"d":"<p>Asserts the equality of the current value of the context with the specified\\none.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">of</span>(<span class=\\"number\\">5</span>)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">assertEqual</span>(<span class=\\"number\\">5</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"assertEqual"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">c</span>)","n":"context"},{"t":"<span class=\\"variable\\">a</span>","n":"function"}],"d":"<p>Asserts that a spy (function) was called.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">let</span> spy =\\n</span><span class=\\"line\\">    <span class=\\"type\\">Text</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">spyOn</span>(<span class=\\"type\\">String</span>.<span class=\\"variable\\">toUpperCase</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;hello world!&quot;</span>\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Text</span>.<span class=\\"variable\\">contextOf</span>()\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Text</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">map</span>(<span class=\\"variable\\">spy</span>)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">assertFunctionCalled</span>(<span class=\\"variable\\">spy</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">c</span>)","n":"assertFunctionCalled"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">c</span>)","n":"context"},{"t":"<span class=\\"variable\\">a</span>","n":"function"}],"d":"<p>Asserts that a spy (function) was not called.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">let</span> spy =\\n</span><span class=\\"line\\">    <span class=\\"type\\">Text</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">spyOn</span>(<span class=\\"type\\">String</span>.<span class=\\"variable\\">toUpperCase</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;hello world!&quot;</span>\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Text</span>.<span class=\\"variable\\">contextOf</span>()\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Text</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">map</span>(<span class=\\"type\\">String</span>.<span class=\\"variable\\">toUpperCase</span>)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">assertFunctionNotCalled</span>(<span class=\\"variable\\">spy</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">c</span>)","n":"assertFunctionNotCalled"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"context"},{"t":"<span class=\\"variable\\">b</span>","n":"value"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"method"}],"d":"<p>Asserts if the value equals of the returned value from the function.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">of</span>(<span class=\\"number\\">5</span>)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">assertOf</span>(<span class=\\"string\\">&quot;5&quot;</span>, <span class=\\"type\\">Number</span>.<span class=\\"variable\\">toString</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"assertOf"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"context"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">bool</span>)","n":"method"}],"d":"<p>Asserts if the value equals of the returned value from the function.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">of</span>(<span class=\\"number\\">5</span>)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">assert</span>((<span class=\\"variable\\">value</span> : <span class=\\"type\\">Number</span>) { <span class=\\"variable\\">value</span> <span class=\\"operator\\">==</span> <span class=\\"number\\">5</span> })\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"assert"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"context"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">a</span>, <span class=\\"variable\\">b</span>)","n":"method"}],"d":"<p>Maps (transforms) the subject to a new subject.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">of</span>(<span class=\\"number\\">5</span>)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">map</span>(<span class=\\"type\\">Number</span>.<span class=\\"variable\\">toString</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">b</span>)","n":"map"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"a"}],"d":"<p>Starts a test using the value.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">of</span>(<span class=\\"number\\">5</span>)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"variable\\">assertEqual</span>(<span class=\\"number\\">5</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"of"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"entity"}],"d":"<p>Spies on the entity if it's a function.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">let</span> spy =\\n</span><span class=\\"line\\">    <span class=\\"type\\">Text</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">spyOn</span>(<span class=\\"type\\">String</span>.<span class=\\"variable\\">toUpperCase</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;hello world!&quot;</span>\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Text</span>.<span class=\\"variable\\">contextOf</span>()\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Text</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">map</span>(<span class=\\"variable\\">spy</span>)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">assertFunctionCalled</span>(<span class=\\"variable\\">spy</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":false,"t":"<span class=\\"variable\\">a</span>","n":"spyOn"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"context"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"variable\\">a</span>, <span class=\\"type\\">Promise</span>(<span class=\\"variable\\">b</span>))","n":"proc"}],"d":"<p>Adds a transformation step to the test.</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">of</span>(<span class=\\"number\\">5</span>)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">then</span>((<span class=\\"variable\\">number</span> : <span class=\\"type\\">Number</span>) { <span class=\\"keyword\\">await</span> (<span class=\\"variable\\">number</span> <span class=\\"operator\\">+</span> <span class=\\"number\\">2</span>) })\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">assertEqual</span>(<span class=\\"number\\">7</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">b</span>)","n":"then"},{"k":4,"a":[{"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"context"},{"t":"<span class=\\"type\\">Number</span>","n":"duration"}],"d":"<p>Adds a timeout to the test using the duration (in milliseconds).</p><pre><code><span class=\\"line\\"><span class=\\"variable\\">test</span> {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">of</span>(<span class=\\"number\\">5</span>)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">timeout</span>(<span class=\\"number\\">1000</span>)\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>.<span class=\\"variable\\">assertEqual</span>(<span class=\\"number\\">5</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Test</span>.<span class=\\"type\\">Context</span>(<span class=\\"variable\\">a</span>)","n":"timeout"}],"d":"<p>This module provides functions for writing complex tests.</p>","l":"Test.Context","n":"Test.Context"},{"k":6,"e":[{"k":4,"d":"<p>Generates a unique identifier.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Uid</span>.<span class=\\"variable\\">generate</span>() <span class=\\"comment\\">// A unique ID</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"generate"}],"d":"<p>This module provides functions for generating unique identifiers.</p>","l":"Uid","n":"Uid"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Object</span>.<span class=\\"type\\">Error</span>","n":"error"}],"d":"<p>Formats the error as string.</p>","b":false,"t":"<span class=\\"type\\">String</span>","n":"toString"}],"d":"<p>This module provides functions for working with <code>Object.Error</code> type.</p>","l":"Object.Error","n":"Object.Error"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Object</span>","n":"input"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Object</span>, <span class=\\"type\\">Result</span>(<span class=\\"type\\">Object</span>.<span class=\\"type\\">Error</span>, <span class=\\"variable\\">a</span>))","n":"decoder"}],"d":"<p>Decodes the object as an <code>Array</code> using the decoder.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Decode</span>.<span class=\\"variable\\">array</span>(\`[&quot;A&quot;]\`, <span class=\\"type\\">Object</span>.<span class=\\"type\\">Decode</span>.<span class=\\"variable\\">string</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>([<span class=\\"string\\">&quot;a&quot;</span>])</span></code></pre>","b":true,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Object</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Array</span>(<span class=\\"variable\\">a</span>))","n":"array"},{"k":4,"a":[{"t":"<span class=\\"type\\">Object</span>","n":"input"}],"d":"<p>Decodes the object as a <code>Bool</code></p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Decode</span>.<span class=\\"variable\\">boolean</span>(\`true\`) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"keyword\\">true</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Object</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Bool</span>)","n":"boolean"},{"k":4,"a":[{"t":"<span class=\\"type\\">Object</span>","n":"input"},{"t":"<span class=\\"type\\">String</span>","n":"key"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Object</span>, <span class=\\"type\\">Result</span>(<span class=\\"type\\">Object</span>.<span class=\\"type\\">Error</span>, <span class=\\"variable\\">a</span>))","n":"decoder"}],"d":"<p>Decodes a field from an object using the decoder.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Decode</span>.<span class=\\"variable\\">field</span>(\\n</span><span class=\\"line\\">  \`{field: &quot;Value&quot;}\`, <span class=\\"string\\">&quot;field&quot;</span>, <span class=\\"type\\">Object</span>.<span class=\\"type\\">Decode</span>.<span class=\\"variable\\">string</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;Value&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Object</span>.<span class=\\"type\\">Error</span>, <span class=\\"variable\\">a</span>)","n":"field"},{"k":4,"a":[{"t":"<span class=\\"type\\">Object</span>","n":"input"},{"t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Object</span>, <span class=\\"type\\">Result</span>(<span class=\\"type\\">Object</span>.<span class=\\"type\\">Error</span>, <span class=\\"variable\\">a</span>))","n":"decoder"}],"d":"<p>Decodes the object as a <code>Maybe(a)</code> using the decoder.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Decode</span>.<span class=\\"variable\\">maybe</span>(\`&quot;A&quot;\`, <span class=\\"type\\">Object</span>.<span class=\\"type\\">Decode</span>.<span class=\\"type\\">String</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"string\\">&quot;A&quot;</span>))\\n</span><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Decode</span>.<span class=\\"variable\\">maybe</span>(\`null\`, <span class=\\"type\\">Object</span>.<span class=\\"type\\">Decode</span>.<span class=\\"type\\">String</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Object</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Maybe</span>(<span class=\\"variable\\">a</span>))","n":"maybe"},{"k":4,"a":[{"t":"<span class=\\"type\\">Object</span>","n":"input"}],"d":"<p>Decodes the object as a <code>Number</code></p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Decode</span>.<span class=\\"variable\\">number</span>(\`0\`) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"number\\">0</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Object</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Number</span>)","n":"number"},{"k":4,"a":[{"t":"<span class=\\"type\\">Object</span>","n":"input"}],"d":"<p>Decodes the object as a <code>String</code></p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Decode</span>.<span class=\\"variable\\">string</span>(\`&quot;A&quot;\`) <span class=\\"operator\\">==</span> <span class=\\"type\\">Result</span>.<span class=\\"type\\">Ok</span>(<span class=\\"string\\">&quot;A&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Object</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">String</span>)","n":"string"},{"k":4,"a":[{"t":"<span class=\\"type\\">Object</span>","n":"input"}],"d":"<p>Decodes the object as a <code>Time</code></p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Decode</span>.<span class=\\"variable\\">time</span>(\`&quot;new Date()&quot;\`)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">Object</span>.<span class=\\"type\\">Error</span>, <span class=\\"type\\">Time</span>)","n":"time"}],"d":"<p>This module provides functions for decoding specific types from an <code>Object</code>.</p>","l":"Object.Decode","n":"Object.Decode"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Object</span>)","n":"input"}],"d":"<p>Encodes an <code>Array</code> of objects.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Encode</span>.<span class=\\"variable\\">array</span>([<span class=\\"string\\">&quot;Hello&quot;</span>, <span class=\\"string\\">&quot;World&quot;</span>])</span></code></pre>","b":false,"t":"<span class=\\"type\\">Object</span>","n":"array"},{"k":4,"a":[{"t":"<span class=\\"type\\">Bool</span>","n":"input"}],"d":"<p>Encodes a <code>Bool</code></p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Encode</span>.<span class=\\"variable\\">bool</span>(<span class=\\"keyword\\">true</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Object</span>","n":"boolean"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"name"},{"t":"<span class=\\"type\\">Object</span>","n":"value"}],"d":"<p>Encodes a field of an object.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Encode</span>.<span class=\\"variable\\">field</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"type\\">Object</span>.<span class=\\"type\\">Encode</span>.<span class=\\"variable\\">string</span>(<span class=\\"string\\">&quot;value&quot;</span>))</span></code></pre>","b":false,"t":"<span class=\\"type\\">Object</span>.<span class=\\"type\\">Field</span>","n":"field"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"input"}],"d":"<p>Encodes a <code>Number</code></p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Encode</span>.<span class=\\"variable\\">number</span>(<span class=\\"number\\">10</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Object</span>","n":"number"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Object</span>.<span class=\\"type\\">Field</span>)","n":"fields"}],"d":"<p>Encodes an array of fields as an object.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Encode</span>.<span class=\\"variable\\">object</span>([\\n</span><span class=\\"line\\">  <span class=\\"type\\">Object</span>.<span class=\\"type\\">Encode</span>.<span class=\\"variable\\">field</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"type\\">Object</span>.<span class=\\"type\\">Encode</span>.<span class=\\"variable\\">string</span>(<span class=\\"string\\">&quot;value&quot;</span>)),\\n</span><span class=\\"line\\">  <span class=\\"type\\">Object</span>.<span class=\\"type\\">Encode</span>.<span class=\\"variable\\">field</span>(<span class=\\"string\\">&quot;key2&quot;</span>, <span class=\\"type\\">Object</span>.<span class=\\"type\\">Encode</span>.<span class=\\"variable\\">string</span>(<span class=\\"string\\">&quot;value2&quot;</span>))\\n</span><span class=\\"line\\">])</span></code></pre>","b":false,"t":"<span class=\\"type\\">Object</span>","n":"object"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"input"}],"d":"<p>Encodes a <code>String</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Encode</span>.<span class=\\"variable\\">string</span>(<span class=\\"string\\">&quot;Hello&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Object</span>","n":"string"},{"k":4,"a":[{"t":"<span class=\\"type\\">Time</span>","n":"input"}],"d":"<p>Encodes a <code>Time</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Object</span>.<span class=\\"type\\">Encode</span>.<span class=\\"variable\\">time</span>(<span class=\\"type\\">Time</span>.<span class=\\"variable\\">now</span>())</span></code></pre>","b":false,"t":"<span class=\\"type\\">Object</span>","n":"time"}],"d":"<p>This module provides functions for encoding values to an <code>Object</code>.</p>","l":"Object.Encode","n":"Object.Encode"},{"k":6,"e":[{"k":4,"d":"<p>Returns an empty <code>Dom.Dimensions</code> record.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Dom</span>.<span class=\\"type\\">Dimensions</span>.<span class=\\"variable\\">empty</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Dimensions</span>","n":"empty"}],"d":"<p>This module provides functions for working with dimensions in the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model.\\">DOM</a>.</p>","l":"Dom.Dimensions","n":"Dom.Dimensions"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Converts the given string to an ArrayBuffer.</p><pre><code><span class=\\"line\\">(<span class=\\"string\\">&quot;Hello&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">ArrayBuffer</span>.<span class=\\"variable\\">toArrayBuffer</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">ArrayBuffer</span>.<span class=\\"variable\\">toString</span>()) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;Hello&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">ArrayBuffer</span>","n":"toArrayBuffer"},{"k":4,"a":[{"t":"<span class=\\"type\\">ArrayBuffer</span>","n":"buffer"}],"d":"<p>Converts an ArrayBuffer to an UTF-8 string.</p><pre><code><span class=\\"line\\">(<span class=\\"string\\">&quot;Hello&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">ArrayBuffer</span>.<span class=\\"variable\\">toArrayBuffer</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">ArrayBuffer</span>.<span class=\\"variable\\">toString</span>()) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;Hello&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"toString"}],"d":"<p>This module provides functions to work with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\\">ArrayBuffer Web API</a>. They are\\nused to encode and decode binary data.</p>","l":"ArrayBuffer","n":"ArrayBuffer"},{"k":6,"e":[{"k":4,"d":"<p>Returns a resolved promise with <code>Void</code> which never fails.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Promise</span>.<span class=\\"variable\\">never</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"never"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"param1"}],"d":"<p>Returns a resolved promise with <code>Void</code> which never fails, with one\\nargument which is ignored.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Promise</span>.<span class=\\"variable\\">never1</span>(<span class=\\"string\\">&quot;Value&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"never1"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"param1"},{"t":"<span class=\\"variable\\">b</span>","n":"param2"}],"d":"<p>Returns a resolved promise with <code>Void</code> which never fails, with two\\narguments which are ignored.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Promise</span>.<span class=\\"variable\\">never2</span>(<span class=\\"string\\">&quot;Value1&quot;</span>, <span class=\\"string\\">&quot;Value2&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"never2"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"param1"},{"t":"<span class=\\"variable\\">b</span>","n":"param2"},{"t":"<span class=\\"variable\\">c</span>","n":"param3"}],"d":"<p>Returns a resolved promise with <code>Void</code> which never fails, with three\\narguments which are ignored.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Promise</span>.<span class=\\"variable\\">never3</span>(<span class=\\"string\\">&quot;Value1&quot;</span>, <span class=\\"string\\">&quot;Value2&quot;</span>, <span class=\\"string\\">&quot;Value3&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"never3"},{"k":4,"a":[{"t":"<span class=\\"variable\\">a</span>","n":"input"}],"d":"<p>Creates an already resolved <code>Promise</code></p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"variable\\">a</span>)","n":"resolve"},{"k":4,"d":"<p>Create a promise with manual resolve.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> {<span class=\\"variable\\">resolve</span>, <span class=\\"variable\\">promise</span>} =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Promise</span>.<span class=\\"variable\\">create</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">Function</span>(<span class=\\"variable\\">value</span>, <span class=\\"type\\">Void</span>), <span class=\\"type\\">Promise</span>(<span class=\\"variable\\">value</span>))","n":"create"}],"d":"<p>This module provides functions for working with promises.</p>","l":"Promise","n":"Promise"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Capitalizes each letter in the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">capitalize</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;The Quick Brown Fox Jumps.&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"capitalize"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">Number</span>","n":"index"}],"d":"<p>Returns a string representing the character (exactly one UTF-16 code unit) at\\nthe specified index. If index is out of range, it returns an empty string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">charAt</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"number\\">4</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;q&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"charAt"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">Number</span>","n":"index"}],"d":"<p>Returns an integer between 0 and 65535 representing the UTF-16 code unit at\\nthe index.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">charCodeAt</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"number\\">4</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"number\\">113</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Number</span>)","n":"charCodeAt"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"char"}],"d":"<p>Removes all occurrences of the character from the end of the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">chopEnd</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"string\\">&quot;.&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;The quick brown fox jumps&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"chopEnd"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"char"}],"d":"<p>Removes all occurrences of the character from the start of the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">chopStart</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"string\\">&quot;T&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;he quick brown fox jumps.&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"chopStart"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">Number</span>","n":"index"}],"d":"<p>Returns a non-negative integer that is the UTF-16 code point value.</p><ul><li><p>If there is no element at pos, returns <code>Maybe.Nothing</code>.</p></li><li><p>If the element at pos is a UTF-16 high surrogate, returns the code point of\\nthe surrogate pair.</p></li><li><p>If the element at pos is a UTF-16 low surrogate, returns only the low\\nsurrogate code point.</p></li></ul><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">codePointAt</span>(<span class=\\"string\\">&quot;☃★♲&quot;</span>, <span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"number\\">9733</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Number</span>)","n":"codePointAt"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>)","n":"array"}],"d":"<p>Joins the array of strings.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">concat</span>([<span class=\\"string\\">&quot;The&quot;</span>, <span class=\\"string\\">&quot;quick&quot;</span>, <span class=\\"string\\">&quot;brown&quot;</span>, <span class=\\"string\\">&quot;fox&quot;</span>, <span class=\\"string\\">&quot;jumps.&quot;</span>]) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;Thequickbrownfoxjumps.&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"concat"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"search"}],"d":"<p>Performs a case-sensitive search to determine whether one string may be found\\nwithin another string, returning true or false as appropriate.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">contains</span>(<span class=\\"string\\">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>, <span class=\\"string\\">&quot;fox&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"contains"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Drops the number of characters from the end of the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">dropEnd</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;The quick brown fox jumps&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">dropEnd</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;The quick brown fox jump&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"dropEnd"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Drops the number of characters from the start of the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">dropStart</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;he quick brown fox jumps.&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">dropStart</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;e quick brown fox jumps.&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"dropStart"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"pattern"}],"d":"<p>Determines whether a string ends with the pattern, returning <code>true</code> or\\n<code>false</code> as appropriate.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">endsWith</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"string\\">&quot;jumps.&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"endsWith"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"charCode"}],"d":"<p>Returns a string created from the specified UTF-16 code unit.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">fromCharCode</span>(<span class=\\"number\\">65</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;A&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"fromCharCode"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"charCode"}],"d":"<p>Returns a string created by using the specified code point.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">fromCodePoint</span>(<span class=\\"number\\">9731</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;☃&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"fromCodePoint"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"v":"<span class=\\"number\\">2</span>","t":"<span class=\\"type\\">Number</span>","n":"by"},{"v":"<span class=\\"string\\">&quot; &quot;</span>","t":"<span class=\\"type\\">String</span>","n":"character"},{"v":"<span class=\\"keyword\\">true</span>","t":"<span class=\\"type\\">Bool</span>","n":"includeEmptyLines"}],"d":"<p>Indents the string with the number of spaces.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">indent</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;  The quick brown fox jumps.&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">indent</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"number\\">2</span>, <span class=\\"string\\">&quot;-&quot;</span>, <span class=\\"keyword\\">false</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;--The quick brown fox jumps.&quot;</span></span></code></pre>","b":true,"t":"<span class=\\"type\\">String</span>","n":"indent"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"search"}],"d":"<p>Returns the index within the string of the first occurrence of the value,\\nreturns <code>Maybe.Nothing</code> if the value is not found.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">indexOf</span>(<span class=\\"string\\">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>, <span class=\\"string\\">&quot;whale&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">indexOf</span>(<span class=\\"string\\">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>, <span class=\\"string\\">&quot;fox&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"number\\">16</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Number</span>)","n":"indexOf"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string1"},{"t":"<span class=\\"type\\">String</span>","n":"string2"}],"d":"<p>Returns if the string is an anagram of the other string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">isAnagram</span>(<span class=\\"string\\">&quot;The&quot;</span>, <span class=\\"string\\">&quot;quick&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">isAnagram</span>(<span class=\\"string\\">&quot;rail safety&quot;</span>, <span class=\\"string\\">&quot;fairy tales&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isAnagram"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Returns whether or not the string is blank (only contains whitespace).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">isBlank</span>(<span class=\\"string\\">&quot;&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span>\\n</span><span class=\\"line\\"> <span class=\\"type\\">String</span>.<span class=\\"variable\\">isBlank</span>(<span class=\\"string\\">&quot; &quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span>\\n</span><span class=\\"line\\"> <span class=\\"type\\">String</span>.<span class=\\"variable\\">isBlank</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isBlank"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Returns whether or not the string is empty (&quot;&quot;).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">isEmpty</span>(<span class=\\"string\\">&quot;&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span>\\n</span><span class=\\"line\\"> <span class=\\"type\\">String</span>.<span class=\\"variable\\">isEmpty</span>(<span class=\\"string\\">&quot; &quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span>\\n</span><span class=\\"line\\"> <span class=\\"type\\">String</span>.<span class=\\"variable\\">isEmpty</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isEmpty"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Returns whether or not the string is not blank.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">isNotBlank</span>(<span class=\\"string\\">&quot;   &quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">isNotBlank</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isNotBlank"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Returns whether or not the string is not empty.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">isNotEmpty</span>(<span class=\\"string\\">&quot;   &quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">isNotEmpty</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isNotEmpty"},{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>)","n":"array"},{"t":"<span class=\\"type\\">String</span>","n":"separator"}],"d":"<p>Joins the array of strings into a single string using the separator.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">join</span>([<span class=\\"string\\">&quot;The&quot;</span>,<span class=\\"string\\">&quot;quick&quot;</span>,<span class=\\"string\\">&quot;brown&quot;</span>, <span class=\\"string\\">&quot;fox&quot;</span>, <span class=\\"string\\">&quot;jumps.&quot;</span>], <span class=\\"string\\">&quot; &quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"join"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"search"}],"d":"<p>Returns the index within the string of the last occurrence of the specified\\nvalue, returns <code>Maybe.Nothing</code> if the value is not found.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">lastIndexOf</span>(<span class=\\"string\\">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>, <span class=\\"string\\">&quot;whale&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">lastIndexOf</span>(<span class=\\"string\\">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>, <span class=\\"string\\">&quot;the&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"number\\">31</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Number</span>)","n":"lastIndexOf"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Returns the Unicode Normalization Form of the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">normalize</span>(<span class=\\"string\\">&quot;\\\\u0041\\\\u006d\\\\u0065\\\\u0301\\\\u006c\\\\u0069\\\\u0065&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;\\\\u0041\\\\u006d\\\\u00e9\\\\u006c\\\\u0069\\\\u0065&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"normalize"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"padString"},{"t":"<span class=\\"type\\">Number</span>","n":"targetLength"}],"d":"<p>Pads the string with another string (multiple times, if needed) until the\\nresulting string reaches the given length. The padding is applied from the\\nend of the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">padEnd</span>(<span class=\\"string\\">&quot;5&quot;</span>, <span class=\\"string\\">&quot;0&quot;</span>, <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;50&quot;</span></span></code></pre>","b":true,"t":"<span class=\\"type\\">String</span>","n":"padEnd"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"padString"},{"t":"<span class=\\"type\\">Number</span>","n":"targetLength"}],"d":"<p>Pads the string with another string (multiple times, if needed) until the\\nresulting string reaches the given length. The padding is applied from the\\nstart of the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">padStart</span>(<span class=\\"string\\">&quot;5&quot;</span>, <span class=\\"string\\">&quot;0&quot;</span>, <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;05&quot;</span></span></code></pre>","b":true,"t":"<span class=\\"type\\">String</span>","n":"padStart"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Parameterizes the string:</p><ul><li>replaces non alphanumeric, dash and underscore characters with dash</li><li>converts title case to dash case (<code>TitleCase -&gt; title-case</code>)</li><li>collapses multiple dashes into a single one</li><li>removes the leading and trailing dash(es)</li><li>converts to lowercase</li></ul><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">parameterize</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;the-quick-brown-fox-jumps&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"parameterize"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">Number</span>","n":"times"}],"d":"<p>Repeats the string by the specified number of times.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">repeat</span>(<span class=\\"number\\">3</span>, <span class=\\"string\\">&quot;The&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;TheTheThe&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"repeat"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"pattern"},{"t":"<span class=\\"type\\">String</span>","n":"replacement"}],"d":"<p>Returns a new string with the first match of a pattern replaced by the\\nreplacement.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">replace</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"string\\">&quot;fox&quot;</span>, <span class=\\"string\\">&quot;bear&quot;</span>) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;The quick brown bear jumps.&quot;</span></span></code></pre>","b":true,"t":"<span class=\\"type\\">String</span>","n":"replace"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"pattern"},{"t":"<span class=\\"type\\">String</span>","n":"replacement"}],"d":"<p>Returns a new string with all matches of a pattern replaced by the replacement.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">replaceAll</span>(<span class=\\"string\\">&quot;The quick brown fox jumps over the lazy fox.&quot;</span>, <span class=\\"string\\">&quot;fox&quot;</span>, <span class=\\"string\\">&quot;bear&quot;</span>) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;The quick brown bear jumps over the lazy bear.&quot;</span></span></code></pre>","b":true,"t":"<span class=\\"type\\">String</span>","n":"replaceAll"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Reverses the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">reverse</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;.spmuj xof nworb kciuq ehT&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"reverse"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Returns number of characters in the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">size</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">26</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"size"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"separator"}],"d":"<p>Splits the string using the separator.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">split</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"string\\">&quot; &quot;</span>) <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">  [<span class=\\"string\\">&quot;The&quot;</span>, <span class=\\"string\\">&quot;quick&quot;</span>, <span class=\\"string\\">&quot;brown&quot;</span>, <span class=\\"string\\">&quot;fox&quot;</span>, <span class=\\"string\\">&quot;jumps.&quot;</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>)","n":"split"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"pattern"}],"d":"<p>Determines whether a string starts with the pattern, returning <code>true</code> or\\n<code>false</code> as appropriate.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">startsWith</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"string\\">&quot;The&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"startsWith"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">Number</span>","n":"length"}],"d":"<p>Returns the given number of characters from the end of the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">takeEnd</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;s.&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"takeEnd"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">Number</span>","n":"length"}],"d":"<p>Returns the given number of characters from the start of the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">takeStart</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;Th&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"takeStart"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Convert the string into an array of strings.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">toArray</span>(<span class=\\"string\\">&quot;Hello&quot;</span>) <span class=\\"operator\\">==</span> [<span class=\\"string\\">&quot;H&quot;</span>, <span class=\\"string\\">&quot;e&quot;</span>, <span class=\\"string\\">&quot;l&quot;</span>, <span class=\\"string\\">&quot;l&quot;</span>, <span class=\\"string\\">&quot;o&quot;</span>]</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>)","n":"toArray"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Converts the string to lowercase.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">toLowerCase</span>(<span class=\\"string\\">&quot;HELLO&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;hello&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"toLowerCase"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"}],"d":"<p>Converts the string to uppercase.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">toUpperCase</span>(<span class=\\"string\\">&quot;hello&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;HELLO&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"toUpperCase"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Removes whitespace from the beginning and end of the string.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">trim</span>(<span class=\\"string\\">&quot;  The quick brown fox jumps.  &quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"trim"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Returns the string or the default value if the string is empty.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">withDefault</span>(<span class=\\"string\\">&quot;&quot;</span>, <span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">withDefault</span>(<span class=\\"string\\">&quot;Hello&quot;</span>, <span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;Hello&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"withDefault"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"start"},{"t":"<span class=\\"type\\">String</span>","n":"end"}],"d":"<p>Wraps the string with the start and end characters.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">String</span>.<span class=\\"variable\\">wrap</span>(<span class=\\"string\\">&quot;The quick brown fox jumps.&quot;</span>, <span class=\\"string\\">&quot;{&quot;</span>, <span class=\\"string\\">&quot;}&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;{The quick brown fox jumps.}&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"wrap"}],"d":"<p>This module provides functions for working with the <code>String</code> type.</p>","l":"String","n":"String"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">File</span>","n":"file"}],"d":"<p>Creates an URL from the file, which is available until the current window is\\nclosed.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> file =\\n</span><span class=\\"line\\">  <span class=\\"type\\">File</span>.<span class=\\"variable\\">fromString</span>(<span class=\\"string\\">&quot;Content&quot;</span>, <span class=\\"string\\">&quot;test.html&quot;</span>, <span class=\\"string\\">&quot;text/html&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"type\\">Url</span>.<span class=\\"variable\\">createObjectUrlFromFile</span>(<span class=\\"variable\\">file</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"createObjectUrlFromFile"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"string"},{"t":"<span class=\\"type\\">String</span>","n":"type"}],"d":"<p>Creates an URL from the content and type, which is available until the\\ncurrent window is closed.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Url</span>.<span class=\\"variable\\">createObjectUrlFromString</span>(<span class=\\"string\\">&quot;Content&quot;</span>, <span class=\\"string\\">&quot;text/html&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">String</span>","n":"createObjectUrlFromString"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"url"}],"d":"<p>Parses the string as an <code>Url</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Url</span>.<span class=\\"variable\\">parse</span>(<span class=\\"string\\">&quot;https://www.example.com&quot;</span>).<span class=\\"variable\\">host</span> <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;www.example.com&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Url</span>","n":"parse"},{"k":4,"a":[{"t":"<span class=\\"type\\">Url</span>","n":"url"},{"v":"<span class=\\"keyword\\">false</span>","t":"<span class=\\"type\\">Bool</span>","n":"removeBlank"}],"d":"<p>Converts the url to a <code>String</code>.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> url =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Url</span>.<span class=\\"variable\\">parse</span>(<span class=\\"string\\">&quot;https://www.example.com/path/?search=foo#hash&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"type\\">Url</span>.<span class=\\"variable\\">toString</span>(<span class=\\"variable\\">url</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;https://www.example.com/path/?search=foo#hash&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"toString"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"url"}],"d":"<p>Releases an existing object URL which was previously created.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> url =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Url</span>.<span class=\\"variable\\">createObjectUrlFromString</span>(<span class=\\"string\\">&quot;Content&quot;</span>, <span class=\\"string\\">&quot;text/html&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"type\\">Url</span>.<span class=\\"variable\\">revokeObjectUrl</span>(<span class=\\"variable\\">url</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Void</span>","n":"revokeObjectUrl"}],"d":"<p>This module provides functions functions for working with the <code>Url</code> type.</p>","l":"Url","n":"Url"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"},{"t":"<span class=\\"type\\">String</span>","n":"prefix"}],"d":"<p>Formats the number using the prefix and separating the digits by 3 with a\\ncomma.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Number</span>.<span class=\\"variable\\">format</span>(<span class=\\"number\\">1034150</span>, <span class=\\"string\\">&quot;$ &quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;$ 1,034,150&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"format"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"input"}],"d":"<p>Tries to parse the string input into a number.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Number</span>.<span class=\\"variable\\">fromString</span>(<span class=\\"string\\">&quot;012&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"number\\">12</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Number</span>.<span class=\\"variable\\">fromString</span>(<span class=\\"string\\">&quot;asd&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Number</span>)","n":"fromString"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns <code>true</code> if number is even.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Number</span>.<span class=\\"variable\\">isEven</span>(<span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Number</span>.<span class=\\"variable\\">isEven</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isEven"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns <code>true</code> if number is <code>NaN</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Number</span>.<span class=\\"variable\\">isNaN</span>(\`NaN\`) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Number</span>.<span class=\\"variable\\">isNaN</span>(<span class=\\"number\\">0</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isNaN"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns <code>true</code> if number is odd.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Number</span>.<span class=\\"variable\\">isOdd</span>(<span class=\\"number\\">1</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">false</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Number</span>.<span class=\\"variable\\">isOdd</span>(<span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isOdd"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"},{"t":"<span class=\\"type\\">Number</span>","n":"decimalPlaces"}],"d":"<p>Formats a number using fixed-point notation.</p><p>The last arguments specifies the number of digits to appear after the\\ndecimal point, it can be between 0 and 20.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Number</span>.<span class=\\"variable\\">toFixed</span>(<span class=\\"number\\">0.1234567</span>, <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;0.12&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"toFixed"},{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"number"}],"d":"<p>Returns the string representation of the number.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Number</span>.<span class=\\"variable\\">toString</span>(<span class=\\"number\\">123</span>) <span class=\\"operator\\">==</span> <span class=\\"number\\">123</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"toString"}],"d":"<p>This module provides functions for working with the <code>Number</code> type.</p>","l":"Number","n":"Number"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"input"}],"d":"<p>Parses a string into an <code>Object</code>, returns <code>Result.Err</code> if the parsing\\nfailed.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Result</span>.<span class=\\"variable\\">isOk</span>(<span class=\\"type\\">Json</span>.<span class=\\"variable\\">parse</span>(<span class=\\"string\\">&quot;{}&quot;</span>))\\n</span><span class=\\"line\\"><span class=\\"type\\">Result</span>.<span class=\\"variable\\">isError</span>(<span class=\\"type\\">Json</span>.<span class=\\"variable\\">parse</span>(<span class=\\"string\\">&quot;{&quot;</span>))</span></code></pre>","b":false,"t":"<span class=\\"type\\">Result</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">Object</span>)","n":"parse"},{"k":4,"a":[{"t":"<span class=\\"type\\">Object</span>","n":"value"},{"t":"<span class=\\"type\\">Number</span>","n":"spaces"}],"d":"<p>Generates a JSON string from an <code>Object</code>, in a human readable format (with\\nline breaks and indentation).</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Json</span>.<span class=\\"variable\\">prettyStringify</span>(<span class=\\"keyword\\">encode</span> { <span class=\\"variable\\">a</span>: <span class=\\"string\\">&quot;Hello&quot;</span> }, <span class=\\"number\\">2</span>) <span class=\\"operator\\">==</span> &lt;&lt;~JSON<span class=\\"string\\"></span></span><span class=\\"line\\"><span class=\\"string\\">  {</span></span><span class=\\"line\\"><span class=\\"string\\">    &quot;a&quot;: &quot;Hello&quot;</span></span><span class=\\"line\\"><span class=\\"string\\">  }&quot;</span></span><span class=\\"line\\"><span class=\\"string\\"></span>JSON</span></code></pre>","b":false,"n":"prettyStringify"},{"k":4,"a":[{"t":"<span class=\\"type\\">Object</span>","n":"input"}],"d":"<p>Generates a JSON string from an <code>Object</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Json</span>.<span class=\\"variable\\">stringify</span>(<span class=\\"keyword\\">encode</span> { <span class=\\"variable\\">a</span>: <span class=\\"string\\">&quot;Hello&quot;</span> }) <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;{ \\\\&quot;a\\\\&quot;: \\\\&quot;Hello\\\\&quot; }&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"stringify"}],"d":"<p>This module provides functions for parsing and generating <a href=\\"https://en.wikipedia.org/w/index.php?title=JSON\\">JSON</a> documents.</p>","l":"Json","n":"Json"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>","n":"event"}],"d":"<p>Returns whether or not the events propagation is stopped or not.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>.<span class=\\"variable\\">isPropagationStopped</span>(<span class=\\"variable\\">event</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"isPropagationStopped"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>","n":"event"}],"d":"<p>Prevents the default action of the event from happening.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>.<span class=\\"variable\\">preventDefault</span>(<span class=\\"variable\\">event</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Void</span>","n":"preventDefault"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>","n":"event"}],"d":"<p>Stops the propagation of the given event.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>.<span class=\\"variable\\">stopPropagation</span>(<span class=\\"variable\\">event</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Void</span>","n":"stopPropagation"},{"k":5,"d":"<p>Constant for the <code>Right Window Key</code> key.</p>","v":"<span class=\\"number\\">92</span>","b":false,"n":"RIGHT_WINDOW_KEY"},{"k":5,"d":"<p>Constant for the <code>Left Window</code> key.</p>","v":"<span class=\\"number\\">91</span>","b":false,"n":"LEFT_WINDOW_KEY"},{"k":5,"d":"<p>Constant for the <code>Closing Bracket</code> key.</p>","v":"<span class=\\"number\\">221</span>","b":false,"n":"CLOSE_BRACKET"},{"k":5,"d":"<p>Constant for the <code>Decimal Point</code> key.</p>","v":"<span class=\\"number\\">110</span>","b":false,"n":"DECIMAL_POINT"},{"k":5,"d":"<p>Constant for the <code>Forward Slash</code> key.</p>","v":"<span class=\\"number\\">191</span>","b":false,"n":"FORWARD_SLASH"},{"k":5,"d":"<p>Constant for the <code>Open Bracket</code> key.</p>","v":"<span class=\\"number\\">219</span>","b":false,"n":"OPEN_BRACKET"},{"k":5,"d":"<p>Constant for the <code>Single Quote</code> key.</p>","v":"<span class=\\"number\\">222</span>","b":false,"n":"SINGLE_QUOTE"},{"k":5,"d":"<p>Constant for the <code>Grave Accent</code> key.</p>","v":"<span class=\\"number\\">192</span>","b":false,"n":"GRAVE_ACCENT"},{"k":5,"d":"<p>Constant for the <code>Scroll Lock</code> key.</p>","v":"<span class=\\"number\\">145</span>","b":false,"n":"SCROLL_LOCK"},{"k":5,"d":"<p>Constant for the <code>Pause Break</code> key.</p>","v":"<span class=\\"number\\">19</span>","b":false,"n":"PAUSE_BREAK"},{"k":5,"d":"<p>Constant for the <code>Right Arrow</code> key.</p>","v":"<span class=\\"number\\">39</span>","b":false,"n":"RIGHT_ARROW"},{"k":5,"d":"<p>Constant for the <code>Back Slash</code> key.</p>","v":"<span class=\\"number\\">220</span>","b":false,"n":"BACK_SLASH"},{"k":5,"d":"<p>Constant for the <code>Equal Sign</code> key.</p>","v":"<span class=\\"number\\">187</span>","b":false,"n":"EQUAL_SIGN"},{"k":5,"d":"<p>Constant for the <code>Semi Colon</code> key.</p>","v":"<span class=\\"number\\">186</span>","b":false,"n":"SEMI_COLON"},{"k":5,"d":"<p>Constant for the <code>Down Arrow</code> key.</p>","v":"<span class=\\"number\\">40</span>","b":false,"n":"DOWN_ARROW"},{"k":5,"d":"<p>Constant for the <code>Select Key</code> key.</p>","v":"<span class=\\"number\\">93</span>","b":false,"n":"SELECT_KEY"},{"k":5,"d":"<p>Constant for the <code>Left Arrow</code> key.</p>","v":"<span class=\\"number\\">37</span>","b":false,"n":"LEFT_ARROW"},{"k":5,"d":"<p>Constant for the <code>Page Down</code> key.</p>","v":"<span class=\\"number\\">34</span>","b":false,"n":"PAGE_DOWN"},{"k":5,"d":"<p>Constant for the <code>Num Lock</code> key.</p>","v":"<span class=\\"number\\">144</span>","b":false,"n":"NUM_LOCK"},{"k":5,"d":"<p>Constant for the <code>Subtract</code> key.</p>","v":"<span class=\\"number\\">109</span>","b":false,"n":"SUBTRACT"},{"k":5,"d":"<p>Constant for the <code>Caps Lock</code> key.</p>","v":"<span class=\\"number\\">20</span>","b":false,"n":"CAPS_LOCK"},{"k":5,"d":"<p>Constant for the <code>Multiply</code> key.</p>","v":"<span class=\\"number\\">106</span>","b":false,"n":"MULTIPLY"},{"k":5,"d":"<p>Constant for the <code>Backspace</code> key.</p>","v":"<span class=\\"number\\">8</span>","b":false,"n":"BACKSPACE"},{"k":5,"d":"<p>Constant for the <code>Up Arrow</code> key.</p>","v":"<span class=\\"number\\">38</span>","b":false,"n":"UP_ARROW"},{"k":5,"d":"<p>Constant for the <code>Page Up</code> key.</p>","v":"<span class=\\"number\\">33</span>","b":false,"n":"PAGE_UP"},{"k":5,"d":"<p>Constant for the <code>Numpad Divide</code> key.</p>","v":"<span class=\\"number\\">111</span>","b":false,"n":"DIVIDE"},{"k":5,"d":"<p>Constant for the <code>Period</code> key.</p>","v":"<span class=\\"number\\">190</span>","b":false,"n":"PERIOD"},{"k":5,"d":"<p>Constant for the comma <code>,</code> key.</p>","v":"<span class=\\"number\\">188</span>","b":false,"n":"COMMA"},{"k":5,"d":"<p>Constant for the <code>Insert</code> key.</p>","v":"<span class=\\"number\\">45</span>","b":false,"n":"INSERT"},{"k":5,"d":"<p>Constant for the <code>Delete</code> key.</p>","v":"<span class=\\"number\\">46</span>","b":false,"n":"DELETE"},{"k":5,"d":"<p>Constant for the <code>Escape</code> key.</p>","v":"<span class=\\"number\\">27</span>","b":false,"n":"ESCAPE"},{"k":5,"d":"<p>Constant for the <code>Shift</code> key.</p>","v":"<span class=\\"number\\">16</span>","b":false,"n":"SHIFT"},{"k":5,"d":"<p>Constant for the <code>Space</code> key.</p>","v":"<span class=\\"number\\">32</span>","b":false,"n":"SPACE"},{"k":5,"d":"<p>Constant for the <code>Enter</code> key.</p>","v":"<span class=\\"number\\">13</span>","b":false,"n":"ENTER"},{"k":5,"d":"<p>Constant for the dash <code>Dash</code> key.</p>","v":"<span class=\\"number\\">189</span>","b":false,"n":"DASH"},{"k":5,"d":"<p>Constant for the <code>Home</code> key.</p>","v":"<span class=\\"number\\">36</span>","b":false,"n":"HOME"},{"k":5,"d":"<p>Constant for the <code>Control</code> key.</p>","v":"<span class=\\"number\\">17</span>","b":false,"n":"CTRL"},{"k":5,"d":"<p>Constant for the <code>Add</code> key.</p>","v":"<span class=\\"number\\">107</span>","b":false,"n":"ADD"},{"k":5,"d":"<p>Constant for the <code>Alt</code> key.</p>","v":"<span class=\\"number\\">18</span>","b":false,"n":"ALT"},{"k":5,"d":"<p>Constant for the <code>End</code> key.</p>","v":"<span class=\\"number\\">35</span>","b":false,"n":"END"},{"k":5,"d":"<p>Constant for the <code>Tab</code> key.</p>","v":"<span class=\\"number\\">9</span>","b":false,"n":"TAB"},{"k":5,"d":"<p>Constant for the <code>0</code> key (numpad).</p>","v":"<span class=\\"number\\">96</span>","b":false,"n":"NUMPAD_0"},{"k":5,"d":"<p>Constant for the <code>1</code> key (numpad).</p>","v":"<span class=\\"number\\">97</span>","b":false,"n":"NUMPAD_1"},{"k":5,"d":"<p>Constant for the <code>2</code> key (numpad).</p>","v":"<span class=\\"number\\">98</span>","b":false,"n":"NUMPAD_2"},{"k":5,"d":"<p>Constant for the <code>3</code> key (numpad).</p>","v":"<span class=\\"number\\">99</span>","b":false,"n":"NUMPAD_3"},{"k":5,"d":"<p>Constant for the <code>4</code> key (numpad).</p>","v":"<span class=\\"number\\">100</span>","b":false,"n":"NUMPAD_4"},{"k":5,"d":"<p>Constant for the <code>5</code> key (numpad).</p>","v":"<span class=\\"number\\">101</span>","b":false,"n":"NUMPAD_5"},{"k":5,"d":"<p>Constant for the <code>6</code> key (numpad).</p>","v":"<span class=\\"number\\">102</span>","b":false,"n":"NUMPAD_6"},{"k":5,"d":"<p>Constant for the <code>7</code> key (numpad).</p>","v":"<span class=\\"number\\">103</span>","b":false,"n":"NUMPAD_7"},{"k":5,"d":"<p>Constant for the <code>8</code> key (numpad).</p>","v":"<span class=\\"number\\">104</span>","b":false,"n":"NUMPAD_8"},{"k":5,"d":"<p>Constant for the <code>9</code> key (numpad).</p>","v":"<span class=\\"number\\">105</span>","b":false,"n":"NUMPAD_9"},{"k":5,"d":"<p>Constant for the <code>0</code> key.</p>","v":"<span class=\\"number\\">48</span>","b":false,"n":"NUMBER_0"},{"k":5,"d":"<p>Constant for the <code>1</code> key.</p>","v":"<span class=\\"number\\">49</span>","b":false,"n":"NUMBER_1"},{"k":5,"d":"<p>Constant for the <code>2</code> key.</p>","v":"<span class=\\"number\\">50</span>","b":false,"n":"NUMBER_2"},{"k":5,"d":"<p>Constant for the <code>3</code> key.</p>","v":"<span class=\\"number\\">51</span>","b":false,"n":"NUMBER_3"},{"k":5,"d":"<p>Constant for the <code>4</code> key.</p>","v":"<span class=\\"number\\">52</span>","b":false,"n":"NUMBER_4"},{"k":5,"d":"<p>Constant for the <code>5</code> key.</p>","v":"<span class=\\"number\\">53</span>","b":false,"n":"NUMBER_5"},{"k":5,"d":"<p>Constant for the <code>6</code> key.</p>","v":"<span class=\\"number\\">54</span>","b":false,"n":"NUMBER_6"},{"k":5,"d":"<p>Constant for the <code>7</code> key.</p>","v":"<span class=\\"number\\">55</span>","b":false,"n":"NUMBER_7"},{"k":5,"d":"<p>Constant for the <code>8</code> key.</p>","v":"<span class=\\"number\\">56</span>","b":false,"n":"NUMBER_8"},{"k":5,"d":"<p>Constant for the <code>9</code> key.</p>","v":"<span class=\\"number\\">57</span>","b":false,"n":"NUMBER_9"},{"k":5,"d":"<p>Constant for the <code>F10</code> key.</p>","v":"<span class=\\"number\\">121</span>","b":false,"n":"F10"},{"k":5,"d":"<p>Constant for the <code>F11</code> key.</p>","v":"<span class=\\"number\\">122</span>","b":false,"n":"F11"},{"k":5,"d":"<p>Constant for the <code>F12</code> key.</p>","v":"<span class=\\"number\\">123</span>","b":false,"n":"F12"},{"k":5,"d":"<p>Constant for the <code>F1</code> key.</p>","v":"<span class=\\"number\\">112</span>","b":false,"n":"F1"},{"k":5,"d":"<p>Constant for the <code>F2</code> key.</p>","v":"<span class=\\"number\\">113</span>","b":false,"n":"F2"},{"k":5,"d":"<p>Constant for the <code>F3</code> key.</p>","v":"<span class=\\"number\\">114</span>","b":false,"n":"F3"},{"k":5,"d":"<p>Constant for the <code>F4</code> key.</p>","v":"<span class=\\"number\\">115</span>","b":false,"n":"F4"},{"k":5,"d":"<p>Constant for the <code>F5</code> key.</p>","v":"<span class=\\"number\\">116</span>","b":false,"n":"F5"},{"k":5,"d":"<p>Constant for the <code>F6</code> key.</p>","v":"<span class=\\"number\\">117</span>","b":false,"n":"F6"},{"k":5,"d":"<p>Constant for the <code>F7</code> key.</p>","v":"<span class=\\"number\\">118</span>","b":false,"n":"F7"},{"k":5,"d":"<p>Constant for the <code>F8</code> key.</p>","v":"<span class=\\"number\\">119</span>","b":false,"n":"F8"},{"k":5,"d":"<p>Constant for the <code>F9</code> key.</p>","v":"<span class=\\"number\\">120</span>","b":false,"n":"F9"},{"k":5,"d":"<p>Constant for the <code>A</code> key.</p>","v":"<span class=\\"number\\">65</span>","b":false,"n":"A"},{"k":5,"d":"<p>Constant for the <code>B</code> key.</p>","v":"<span class=\\"number\\">66</span>","b":false,"n":"B"},{"k":5,"d":"<p>Constant for the <code>C</code> key.</p>","v":"<span class=\\"number\\">67</span>","b":false,"n":"C"},{"k":5,"d":"<p>Constant for the <code>D</code> key.</p>","v":"<span class=\\"number\\">68</span>","b":false,"n":"D"},{"k":5,"d":"<p>Constant for the <code>E</code> key.</p>","v":"<span class=\\"number\\">69</span>","b":false,"n":"E"},{"k":5,"d":"<p>Constant for the <code>F</code> key.</p>","v":"<span class=\\"number\\">70</span>","b":false,"n":"F"},{"k":5,"d":"<p>Constant for the <code>G</code> key.</p>","v":"<span class=\\"number\\">71</span>","b":false,"n":"G"},{"k":5,"d":"<p>Constant for the <code>H</code> key.</p>","v":"<span class=\\"number\\">72</span>","b":false,"n":"H"},{"k":5,"d":"<p>Constant for the <code>I</code> key.</p>","v":"<span class=\\"number\\">73</span>","b":false,"n":"I"},{"k":5,"d":"<p>Constant for the <code>J</code> key.</p>","v":"<span class=\\"number\\">74</span>","b":false,"n":"J"},{"k":5,"d":"<p>Constant for the <code>K</code> key.</p>","v":"<span class=\\"number\\">75</span>","b":false,"n":"K"},{"k":5,"d":"<p>Constant for the <code>L</code> key.</p>","v":"<span class=\\"number\\">76</span>","b":false,"n":"L"},{"k":5,"d":"<p>Constant for the <code>M</code> key.</p>","v":"<span class=\\"number\\">77</span>","b":false,"n":"M"},{"k":5,"d":"<p>Constant for the <code>N</code> key.</p>","v":"<span class=\\"number\\">78</span>","b":false,"n":"N"},{"k":5,"d":"<p>Constant for the <code>O</code> key.</p>","v":"<span class=\\"number\\">79</span>","b":false,"n":"O"},{"k":5,"d":"<p>Constant for the <code>P</code> key.</p>","v":"<span class=\\"number\\">80</span>","b":false,"n":"P"},{"k":5,"d":"<p>Constant for the <code>Q</code> key.</p>","v":"<span class=\\"number\\">81</span>","b":false,"n":"Q"},{"k":5,"d":"<p>Constant for the <code>R</code> key.</p>","v":"<span class=\\"number\\">82</span>","b":false,"n":"R"},{"k":5,"d":"<p>Constant for the <code>S</code> key.</p>","v":"<span class=\\"number\\">83</span>","b":false,"n":"S"},{"k":5,"d":"<p>Constant for the <code>T</code> key.</p>","v":"<span class=\\"number\\">84</span>","b":false,"n":"T"},{"k":5,"d":"<p>Constant for the <code>U</code> key.</p>","v":"<span class=\\"number\\">85</span>","b":false,"n":"U"},{"k":5,"d":"<p>Constant for the <code>V</code> key.</p>","v":"<span class=\\"number\\">86</span>","b":false,"n":"V"},{"k":5,"d":"<p>Constant for the <code>W</code> key.</p>","v":"<span class=\\"number\\">87</span>","b":false,"n":"W"},{"k":5,"d":"<p>Constant for the <code>X</code> key.</p>","v":"<span class=\\"number\\">88</span>","b":false,"n":"X"},{"k":5,"d":"<p>Constant for the <code>Y</code> key.</p>","v":"<span class=\\"number\\">89</span>","b":false,"n":"Y"},{"k":5,"d":"<p>Constant for the <code>Z</code> key.</p>","v":"<span class=\\"number\\">90</span>","b":false,"n":"Z"}],"d":"<p>This module provides functions for working with <code>Html.Event</code> objects.</p>","l":"Html.Event","n":"Html.Event"},{"k":6,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"data"}],"d":"<p>Removes the attached data.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>.<span class=\\"variable\\">clearData</span>(<span class=\\"variable\\">data</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"clearData"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"data"},{"t":"<span class=\\"type\\">String</span>","n":"format"}],"d":"<p>Returns string data for the format or an empty string if there is no data.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> string =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>.<span class=\\"variable\\">getData</span>(<span class=\\"variable\\">event</span>.<span class=\\"variable\\">dataTransfer</span>, <span class=\\"string\\">&quot;text/plain&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"getData"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"data"}],"d":"<p>Returns the type of drag-and-drop operation which is currently selected.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> dropEffect =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>.<span class=\\"variable\\">getDropEffect</span>(<span class=\\"variable\\">event</span>.<span class=\\"variable\\">dataTransfer</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"getDropEffect"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"data"}],"d":"<p>Returns the type of operation that is possible.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> effectAllowed =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>.<span class=\\"variable\\">getEffectAllowed</span>(<span class=\\"variable\\">event</span>.<span class=\\"variable\\">dataTransfer</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">String</span>","n":"getEffectAllowed"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"data"}],"d":"<p>Returns the files which is contained in the data transfer.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> files =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>.<span class=\\"variable\\">getFiles</span>(<span class=\\"variable\\">event</span>.<span class=\\"variable\\">dataTransfer</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">File</span>)","n":"getFiles"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"data"}],"d":"<p>Returns the types of the data which is available.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> types =\\n</span><span class=\\"line\\">  <span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>.<span class=\\"variable\\">getTypes</span>(<span class=\\"variable\\">event</span>.<span class=\\"variable\\">dataTransfer</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>)","n":"getTypes"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"data"},{"t":"<span class=\\"type\\">String</span>","n":"format"},{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Sets the value for the format in the data transfer.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>.<span class=\\"variable\\">setData</span>(<span class=\\"variable\\">event</span>.<span class=\\"variable\\">dataTransfer</span>, <span class=\\"string\\">&quot;text/plain&quot;</span>, <span class=\\"string\\">&quot;Hello!&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"setData"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"data"},{"t":"<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>","n":"element"},{"t":"<span class=\\"type\\">Number</span>","n":"offsetX"},{"t":"<span class=\\"type\\">Number</span>","n":"offsetY"}],"d":"<p>Sets the element as the drag image of the data transfer.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">element</span>) = <span class=\\"type\\">Dom</span>.<span class=\\"variable\\">getElementBySelector</span>(<span class=\\"string\\">&quot;div&quot;</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>.<span class=\\"variable\\">setDragImage</span>(<span class=\\"variable\\">event</span>.<span class=\\"variable\\">dataTransfer</span>, <span class=\\"variable\\">element</span>, <span class=\\"number\\">0</span>, <span class=\\"number\\">0</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","b":true,"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"setDragImage"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"data"},{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Sets the operation to a new type. The value must be <code>&quot;none&quot;</code>, <code>&quot;copy&quot;</code>,\\n<code>&quot;link&quot;</code> or <code>&quot;move&quot;</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>.<span class=\\"variable\\">setDropEffect</span>(<span class=\\"variable\\">event</span>.<span class=\\"variable\\">dataTransfer</span>, <span class=\\"string\\">&quot;copy&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"setDropEffect"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"data"},{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Sets of the type of operation that are possible.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>.<span class=\\"variable\\">setEffectAllowed</span>(<span class=\\"variable\\">event</span>.<span class=\\"variable\\">dataTransfer</span>, <span class=\\"string\\">&quot;copy&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">DataTransfer</span>","n":"setEffectAllowed"}],"d":"<p>This module provides functions for working with the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\\">DataTransfer Web API</a>.\\nThis is used for drag and drop functionality. <code>Html.Event</code> contains the fields\\n<code>dataTransfer</code> and <code>clipboardData</code> which are <code>Html.DataTransfer</code> objects.</p>","l":"Html.DataTransfer","n":"Html.DataTransfer"},{"k":6,"e":[{"k":5,"d":"<p>The English language record for time formatting.</p>","v":"{\\n  <span class=\\"variable\\">toMonthAbbreviation</span>:\\n    (<span class=\\"variable\\">month</span> : <span class=\\"type\\">Month</span>) {\\n      <span class=\\"keyword\\">case</span> <span class=\\"variable\\">month</span> {\\n        <span class=\\"type\\">January</span> => <span class=\\"string\\">&quot;Jan&quot;</span>\\n        <span class=\\"type\\">February</span> => <span class=\\"string\\">&quot;Feb&quot;</span>\\n        <span class=\\"type\\">March</span> => <span class=\\"string\\">&quot;Mar&quot;</span>\\n        <span class=\\"type\\">April</span> => <span class=\\"string\\">&quot;Apr&quot;</span>\\n        <span class=\\"type\\">May</span> => <span class=\\"string\\">&quot;May&quot;</span>\\n        <span class=\\"type\\">June</span> => <span class=\\"string\\">&quot;Jun&quot;</span>\\n        <span class=\\"type\\">July</span> => <span class=\\"string\\">&quot;Jul&quot;</span>\\n        <span class=\\"type\\">August</span> => <span class=\\"string\\">&quot;Aug&quot;</span>\\n        <span class=\\"type\\">September</span> => <span class=\\"string\\">&quot;Sep&quot;</span>\\n        <span class=\\"type\\">October</span> => <span class=\\"string\\">&quot;Oct&quot;</span>\\n        <span class=\\"type\\">November</span> => <span class=\\"string\\">&quot;Nov&quot;</span>\\n        <span class=\\"type\\">December</span> => <span class=\\"string\\">&quot;Dec&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">toMonthName</span>:\\n    (<span class=\\"variable\\">month</span> : <span class=\\"type\\">Month</span>) {\\n      <span class=\\"keyword\\">case</span> <span class=\\"variable\\">month</span> {\\n        <span class=\\"type\\">January</span> => <span class=\\"string\\">&quot;January&quot;</span>\\n        <span class=\\"type\\">February</span> => <span class=\\"string\\">&quot;February&quot;</span>\\n        <span class=\\"type\\">March</span> => <span class=\\"string\\">&quot;March&quot;</span>\\n        <span class=\\"type\\">April</span> => <span class=\\"string\\">&quot;April&quot;</span>\\n        <span class=\\"type\\">May</span> => <span class=\\"string\\">&quot;May&quot;</span>\\n        <span class=\\"type\\">June</span> => <span class=\\"string\\">&quot;June&quot;</span>\\n        <span class=\\"type\\">July</span> => <span class=\\"string\\">&quot;July&quot;</span>\\n        <span class=\\"type\\">August</span> => <span class=\\"string\\">&quot;August&quot;</span>\\n        <span class=\\"type\\">September</span> => <span class=\\"string\\">&quot;September&quot;</span>\\n        <span class=\\"type\\">October</span> => <span class=\\"string\\">&quot;October&quot;</span>\\n        <span class=\\"type\\">November</span> => <span class=\\"string\\">&quot;November&quot;</span>\\n        <span class=\\"type\\">December</span> => <span class=\\"string\\">&quot;December&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">toWeekdayName</span>:\\n    (<span class=\\"variable\\">weekday</span> : <span class=\\"type\\">Weekday</span>) {\\n      <span class=\\"keyword\\">case</span> <span class=\\"variable\\">weekday</span> {\\n        <span class=\\"type\\">Monday</span> => <span class=\\"string\\">&quot;Monday&quot;</span>\\n        <span class=\\"type\\">Tuesday</span> => <span class=\\"string\\">&quot;Tuesday&quot;</span>\\n        <span class=\\"type\\">Wednesday</span> => <span class=\\"string\\">&quot;Wednesday&quot;</span>\\n        <span class=\\"type\\">Thursday</span> => <span class=\\"string\\">&quot;Thursday&quot;</span>\\n        <span class=\\"type\\">Friday</span> => <span class=\\"string\\">&quot;Friday&quot;</span>\\n        <span class=\\"type\\">Saturday</span> => <span class=\\"string\\">&quot;Saturday&quot;</span>\\n        <span class=\\"type\\">Sunday</span> => <span class=\\"string\\">&quot;Sunday&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">toWeekdayAbbreviation</span>:\\n    (<span class=\\"variable\\">weekday</span> : <span class=\\"type\\">Weekday</span>) {\\n      <span class=\\"keyword\\">case</span> <span class=\\"variable\\">weekday</span> {\\n        <span class=\\"type\\">Monday</span> => <span class=\\"string\\">&quot;Mon&quot;</span>\\n        <span class=\\"type\\">Tuesday</span> => <span class=\\"string\\">&quot;Tue&quot;</span>\\n        <span class=\\"type\\">Wednesday</span> => <span class=\\"string\\">&quot;Wed&quot;</span>\\n        <span class=\\"type\\">Thursday</span> => <span class=\\"string\\">&quot;Thu&quot;</span>\\n        <span class=\\"type\\">Friday</span> => <span class=\\"string\\">&quot;Fri&quot;</span>\\n        <span class=\\"type\\">Saturday</span> => <span class=\\"string\\">&quot;Sat&quot;</span>\\n        <span class=\\"type\\">Sunday</span> => <span class=\\"string\\">&quot;Sun&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">toOrdinalSuffix</span>:\\n    (<span class=\\"variable\\">day</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">case</span> <span class=\\"variable\\">day</span> <span class=\\"operator\\">%</span> <span class=\\"number\\">100</span> {\\n        <span class=\\"number\\">11</span> => <span class=\\"string\\">&quot;th&quot;</span>\\n        <span class=\\"number\\">12</span> => <span class=\\"string\\">&quot;th&quot;</span>\\n        <span class=\\"number\\">13</span> => <span class=\\"string\\">&quot;th&quot;</span>\\n\\n        =>\\n          <span class=\\"keyword\\">case</span> <span class=\\"variable\\">day</span> <span class=\\"operator\\">%</span> <span class=\\"number\\">10</span> {\\n            <span class=\\"number\\">1</span> => <span class=\\"string\\">&quot;st&quot;</span>\\n            <span class=\\"number\\">2</span> => <span class=\\"string\\">&quot;nd&quot;</span>\\n            <span class=\\"number\\">3</span> => <span class=\\"string\\">&quot;rd&quot;</span>\\n            => <span class=\\"string\\">&quot;th&quot;</span>\\n          }\\n      }\\n    },\\n  <span class=\\"variable\\">amPm</span>:\\n    (<span class=\\"variable\\">hour</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">hour</span> <span class=\\"operator\\">&gt;=</span> <span class=\\"number\\">12</span> {\\n        <span class=\\"string\\">&quot;pm&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;am&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">someSecondsAgo</span>:\\n    (<span class=\\"variable\\">seconds</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">seconds</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">30</span> {\\n        <span class=\\"string\\">&quot;just now&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">seconds</span><span class=\\"string\\">} seconds ago&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">someMinutesAgo</span>:\\n    (<span class=\\"variable\\">minutes</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">minutes</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;a minute ago&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">minutes</span><span class=\\"string\\">} minutes ago&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">someHoursAgo</span>:\\n    (<span class=\\"variable\\">hours</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">hours</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;an hour ago&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">hours</span><span class=\\"string\\">} hours ago&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">someDaysAgo</span>:\\n    (<span class=\\"variable\\">days</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">days</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;yesterday&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">days</span><span class=\\"string\\">} days ago&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">someMonthsAgo</span>:\\n    (<span class=\\"variable\\">months</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">months</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;last month&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">months</span><span class=\\"string\\">} months ago&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">someYearsAgo</span>:\\n    (<span class=\\"variable\\">years</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">years</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;last year&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">years</span><span class=\\"string\\">} years ago&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">inSomeSeconds</span>:\\n    (<span class=\\"variable\\">seconds</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">seconds</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">30</span> {\\n        <span class=\\"string\\">&quot;in a few seconds&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;in</span><span class=\\"string\\"> #{</span><span class=\\"variable\\">seconds</span><span class=\\"string\\">} seconds&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">inSomeMinutes</span>:\\n    (<span class=\\"variable\\">minutes</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">minutes</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;in a minute&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;in</span><span class=\\"string\\"> #{</span><span class=\\"variable\\">minutes</span><span class=\\"string\\">} minutes&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">inSomeHours</span>:\\n    (<span class=\\"variable\\">hours</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">hours</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;in an hour&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;in</span><span class=\\"string\\"> #{</span><span class=\\"variable\\">hours</span><span class=\\"string\\">} hours&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">inSomeDays</span>:\\n    (<span class=\\"variable\\">days</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">days</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;tomorrow&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;in</span><span class=\\"string\\"> #{</span><span class=\\"variable\\">days</span><span class=\\"string\\">} days&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">inSomeMonths</span>:\\n    (<span class=\\"variable\\">months</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">months</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;in a month&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;in</span><span class=\\"string\\"> #{</span><span class=\\"variable\\">months</span><span class=\\"string\\">} months&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">inSomeYears</span>:\\n    (<span class=\\"variable\\">years</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">years</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;in a year&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;in</span><span class=\\"string\\"> #{</span><span class=\\"variable\\">years</span><span class=\\"string\\">} years&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">rightNow</span>: <span class=\\"string\\">&quot;right now&quot;</span>\\n}","b":true,"n":"ENGLISH"},{"k":5,"d":"<p>The Hungarian language record for time formatting.</p>","v":"{\\n  <span class=\\"variable\\">toMonthAbbreviation</span>:\\n    (<span class=\\"variable\\">month</span> : <span class=\\"type\\">Month</span>) {\\n      <span class=\\"keyword\\">case</span> <span class=\\"variable\\">month</span> {\\n        <span class=\\"type\\">January</span> => <span class=\\"string\\">&quot;jan.&quot;</span>\\n        <span class=\\"type\\">February</span> => <span class=\\"string\\">&quot;febr.&quot;</span>\\n        <span class=\\"type\\">March</span> => <span class=\\"string\\">&quot;márc.&quot;</span>\\n        <span class=\\"type\\">April</span> => <span class=\\"string\\">&quot;ápr.&quot;</span>\\n        <span class=\\"type\\">May</span> => <span class=\\"string\\">&quot;máj.&quot;</span>\\n        <span class=\\"type\\">June</span> => <span class=\\"string\\">&quot;jún.&quot;</span>\\n        <span class=\\"type\\">July</span> => <span class=\\"string\\">&quot;júl.&quot;</span>\\n        <span class=\\"type\\">August</span> => <span class=\\"string\\">&quot;aug.&quot;</span>\\n        <span class=\\"type\\">September</span> => <span class=\\"string\\">&quot;szept.&quot;</span>\\n        <span class=\\"type\\">October</span> => <span class=\\"string\\">&quot;okt.&quot;</span>\\n        <span class=\\"type\\">November</span> => <span class=\\"string\\">&quot;nov.&quot;</span>\\n        <span class=\\"type\\">December</span> => <span class=\\"string\\">&quot;dec.&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">toMonthName</span>:\\n    (<span class=\\"variable\\">month</span> : <span class=\\"type\\">Month</span>) {\\n      <span class=\\"keyword\\">case</span> <span class=\\"variable\\">month</span> {\\n        <span class=\\"type\\">January</span> => <span class=\\"string\\">&quot;janár&quot;</span>\\n        <span class=\\"type\\">February</span> => <span class=\\"string\\">&quot;február&quot;</span>\\n        <span class=\\"type\\">March</span> => <span class=\\"string\\">&quot;március&quot;</span>\\n        <span class=\\"type\\">April</span> => <span class=\\"string\\">&quot;április&quot;</span>\\n        <span class=\\"type\\">May</span> => <span class=\\"string\\">&quot;május&quot;</span>\\n        <span class=\\"type\\">June</span> => <span class=\\"string\\">&quot;június&quot;</span>\\n        <span class=\\"type\\">July</span> => <span class=\\"string\\">&quot;július&quot;</span>\\n        <span class=\\"type\\">August</span> => <span class=\\"string\\">&quot;augusztus&quot;</span>\\n        <span class=\\"type\\">September</span> => <span class=\\"string\\">&quot;szeptember&quot;</span>\\n        <span class=\\"type\\">October</span> => <span class=\\"string\\">&quot;október&quot;</span>\\n        <span class=\\"type\\">November</span> => <span class=\\"string\\">&quot;november&quot;</span>\\n        <span class=\\"type\\">December</span> => <span class=\\"string\\">&quot;december&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">toWeekdayName</span>:\\n    (<span class=\\"variable\\">weekday</span> : <span class=\\"type\\">Weekday</span>) {\\n      <span class=\\"keyword\\">case</span> <span class=\\"variable\\">weekday</span> {\\n        <span class=\\"type\\">Monday</span> => <span class=\\"string\\">&quot;hétfő&quot;</span>\\n        <span class=\\"type\\">Tuesday</span> => <span class=\\"string\\">&quot;kedd&quot;</span>\\n        <span class=\\"type\\">Wednesday</span> => <span class=\\"string\\">&quot;szerda&quot;</span>\\n        <span class=\\"type\\">Thursday</span> => <span class=\\"string\\">&quot;csütörtök&quot;</span>\\n        <span class=\\"type\\">Friday</span> => <span class=\\"string\\">&quot;péntek&quot;</span>\\n        <span class=\\"type\\">Saturday</span> => <span class=\\"string\\">&quot;szombat&quot;</span>\\n        <span class=\\"type\\">Sunday</span> => <span class=\\"string\\">&quot;vasárnap&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">toWeekdayAbbreviation</span>:\\n    (<span class=\\"variable\\">weekday</span> : <span class=\\"type\\">Weekday</span>) {\\n      <span class=\\"keyword\\">case</span> <span class=\\"variable\\">weekday</span> {\\n        <span class=\\"type\\">Monday</span> => <span class=\\"string\\">&quot;hé&quot;</span>\\n        <span class=\\"type\\">Tuesday</span> => <span class=\\"string\\">&quot;ke&quot;</span>\\n        <span class=\\"type\\">Wednesday</span> => <span class=\\"string\\">&quot;sze.&quot;</span>\\n        <span class=\\"type\\">Thursday</span> => <span class=\\"string\\">&quot;csü.&quot;</span>\\n        <span class=\\"type\\">Friday</span> => <span class=\\"string\\">&quot;pé.&quot;</span>\\n        <span class=\\"type\\">Saturday</span> => <span class=\\"string\\">&quot;szo.&quot;</span>\\n        <span class=\\"type\\">Sunday</span> => <span class=\\"string\\">&quot;va.&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">toOrdinalSuffix</span>:\\n    (<span class=\\"variable\\">day</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">case</span> <span class=\\"variable\\">day</span> {\\n        <span class=\\"number\\">1</span> => <span class=\\"string\\">&quot;-je&quot;</span>\\n        <span class=\\"number\\">2</span> => <span class=\\"string\\">&quot;-a&quot;</span>\\n        <span class=\\"number\\">3</span> => <span class=\\"string\\">&quot;-a&quot;</span>\\n        <span class=\\"number\\">4</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">5</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">6</span> => <span class=\\"string\\">&quot;-a&quot;</span>\\n        <span class=\\"number\\">7</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">8</span> => <span class=\\"string\\">&quot;-a&quot;</span>\\n        <span class=\\"number\\">9</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">10</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">11</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">12</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">13</span> => <span class=\\"string\\">&quot;-a&quot;</span>\\n        <span class=\\"number\\">14</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">15</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">16</span> => <span class=\\"string\\">&quot;-a&quot;</span>\\n        <span class=\\"number\\">17</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">18</span> => <span class=\\"string\\">&quot;-a&quot;</span>\\n        <span class=\\"number\\">19</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">20</span> => <span class=\\"string\\">&quot;-a&quot;</span>\\n        <span class=\\"number\\">21</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">22</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">23</span> => <span class=\\"string\\">&quot;-a&quot;</span>\\n        <span class=\\"number\\">24</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">25</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">26</span> => <span class=\\"string\\">&quot;-a&quot;</span>\\n        <span class=\\"number\\">27</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">28</span> => <span class=\\"string\\">&quot;-a&quot;</span>\\n        <span class=\\"number\\">29</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        <span class=\\"number\\">30</span> => <span class=\\"string\\">&quot;-a&quot;</span>\\n        <span class=\\"number\\">31</span> => <span class=\\"string\\">&quot;-e&quot;</span>\\n        => <span class=\\"string\\">&quot;&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">amPm</span>:\\n    (<span class=\\"variable\\">hour</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">hour</span> <span class=\\"operator\\">&gt;=</span> <span class=\\"number\\">12</span> {\\n        <span class=\\"string\\">&quot;du.&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;de.&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">someSecondsAgo</span>:\\n    (<span class=\\"variable\\">seconds</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">seconds</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">30</span> {\\n        <span class=\\"string\\">&quot;épp most&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">seconds</span><span class=\\"string\\">} másodperce&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">someMinutesAgo</span>:\\n    (<span class=\\"variable\\">minutes</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">minutes</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;egy perce&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">minutes</span><span class=\\"string\\">} perce&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">someHoursAgo</span>:\\n    (<span class=\\"variable\\">hours</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">hours</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;egy órája&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">hours</span><span class=\\"string\\">} órája&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">someDaysAgo</span>:\\n    (<span class=\\"variable\\">days</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">days</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;tegnap&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">days</span><span class=\\"string\\">} napja&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">someMonthsAgo</span>:\\n    (<span class=\\"variable\\">months</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">months</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;egy hónapja&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">months</span><span class=\\"string\\">} hónapja&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">someYearsAgo</span>:\\n    (<span class=\\"variable\\">years</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">years</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;egy éve&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">years</span><span class=\\"string\\">} éve&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">inSomeSeconds</span>:\\n    (<span class=\\"variable\\">seconds</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">seconds</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">30</span> {\\n        <span class=\\"string\\">&quot;nemsokára&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">seconds</span><span class=\\"string\\">} másodperc múlva&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">inSomeMinutes</span>:\\n    (<span class=\\"variable\\">minutes</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">minutes</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;egy perc múlva&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">minutes</span><span class=\\"string\\">} perc múlva&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">inSomeHours</span>:\\n    (<span class=\\"variable\\">hours</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">hours</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;egy óra múlva&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">hours</span><span class=\\"string\\">} óra múlva&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">inSomeDays</span>:\\n    (<span class=\\"variable\\">days</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">days</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;holnap&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">days</span><span class=\\"string\\">} nam múlva&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">inSomeMonths</span>:\\n    (<span class=\\"variable\\">months</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">months</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;egy hónap múlva&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">months</span><span class=\\"string\\">} hónap múlva&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">inSomeYears</span>:\\n    (<span class=\\"variable\\">years</span> : <span class=\\"type\\">Number</span>) {\\n      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">years</span> <span class=\\"operator\\">&lt;</span> <span class=\\"number\\">2</span> {\\n        <span class=\\"string\\">&quot;egy év múlva&quot;</span>\\n      } <span class=\\"keyword\\">else</span> {\\n        <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">years</span><span class=\\"string\\">} év múlva&quot;</span>\\n      }\\n    },\\n  <span class=\\"variable\\">rightNow</span>: <span class=\\"string\\">&quot;épp most&quot;</span>\\n}","b":true,"n":"HUNGARIAN"}],"l":"Time.Format","n":"Time.Format"},{"f":[],"k":1,"e":[{"k":3,"d":"<p>The children to render.</p>","v":"[]","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Html</span>)","n":"children"},{"k":4,"d":"<p>Renders the children in the <code>&lt;/head&gt;</code>.</p>","b":false,"t":"<span class=\\"type\\">Html</span>","n":"render"}],"d":"<p>A component to render <code>Html</code> in the <code>&lt;head&gt;</code>.</p><pre><code><span class=\\"line\\">&lt;<span class=\\"type\\">Html.Portals.Head</span>&gt;\\n</span><span class=\\"line\\">  &lt;<span class=\\"namespace\\">link</span> rel=<span class=\\"string\\">&quot;stylesheet&quot;</span> href=<span class=\\"string\\">&quot;index.css&quot;</span>/&gt;\\n</span><span class=\\"line\\">&lt;/<span class=\\"type\\">Html.Portals.Head</span>&gt;</span></code></pre>","l":"Html.Portals.Head","n":"Html.Portals.Head"},{"f":[],"k":1,"e":[{"k":3,"d":"<p>The children to render.</p>","v":"[]","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Html</span>)","n":"children"},{"k":4,"d":"<p>Renders the children in the <code>&lt;/body&gt;</code>.</p>","b":false,"t":"<span class=\\"type\\">Html</span>","n":"render"}],"d":"<p>A component to render <code>Html</code> in the <code>&lt;body&gt;</code>.</p><pre><code><span class=\\"line\\">&lt;<span class=\\"type\\">Html.Portals.Body</span>&gt;\\n</span><span class=\\"line\\">  <span class=\\"string\\">&quot;Hello World!&quot;</span>\\n</span><span class=\\"line\\">&lt;/<span class=\\"type\\">Html.Portals.Body</span>&gt;</span></code></pre>","l":"Html.Portals.Body","n":"Html.Portals.Body"},{"k":2,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>","n":"event"}],"d":"<p>Handles keypress events.</p>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Array</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)))","n":"handle"},{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>The listener unsubscribe function.</p>","v":"<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>))","n":"listener"}],"d":"<p>This provider allows components to subscribe to global shortcuts.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.Shortcuts</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">shortcuts</span>:\\n</span><span class=\\"line\\">      [\\n</span><span class=\\"line\\">        {\\n</span><span class=\\"line\\">          <span class=\\"variable\\">action</span>: () { <span class=\\"type\\">Window</span>.<span class=\\"variable\\">alert</span>(<span class=\\"string\\">&quot;Shotcut pressed!&quot;</span>) },\\n</span><span class=\\"line\\">          <span class=\\"variable\\">shortcut</span>: [<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>.<span class=\\"type\\">CTRL</span>, <span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>.<span class=\\"type\\">G</span>],\\n</span><span class=\\"line\\">          <span class=\\"variable\\">condition</span>: () { <span class=\\"keyword\\">true</span> },\\n</span><span class=\\"line\\">          <span class=\\"variable\\">bypassFocused</span>: <span class=\\"keyword\\">false</span>\\n</span><span class=\\"line\\">        }\\n</span><span class=\\"line\\">      ]\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;Press CTRL+G&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.Shortcuts","n":"Provider.Shortcuts"},{"k":2,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"url"},{"t":"<span class=\\"type\\">WebSocket</span>","n":"socket"}],"d":"<p>Handles the open event.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"onOpen"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"url"},{"t":"<span class=\\"type\\">String</span>","n":"data"}],"d":"<p>Handles the message event.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"onMessage"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"url"}],"d":"<p>Handles the error event.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"onError"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"url"}],"d":"<p>Handles the close event.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"onClose"},{"k":4,"d":"<p>Handles updates to the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>A state to store current connections.</p>","v":"<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()","b":false,"t":"<span class=\\"type\\">Map</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">WebSocket</span>)","n":"connections"}],"d":"<p>Provider to handle websocket connections. Only one connection is made for an\\nendpoint, events are emitted for all subscribers for that endpoint.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">state</span> <span class=\\"variable\\">socket</span> : <span class=\\"type\\">Maybe</span>(<span class=\\"type\\">WebSocket</span>) = <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">state</span> <span class=\\"variable\\">messages</span> : <span class=\\"type\\">Array</span>(<span class=\\"type\\">String</span>) = []\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.WebSocket</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">url</span>: <span class=\\"string\\">&quot;wss://echo.websocket.org/&quot;</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">reconnectOnClose</span>: <span class=\\"keyword\\">false</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">onOpen</span>:\\n</span><span class=\\"line\\">      (<span class=\\"variable\\">socket</span> : <span class=\\"type\\">WebSocket</span>) {\\n</span><span class=\\"line\\">        <span class=\\"keyword\\">next</span> {\\n</span><span class=\\"line\\">          <span class=\\"variable\\">messages</span>: <span class=\\"type\\">Array</span>.<span class=\\"variable\\">push</span>(<span class=\\"variable\\">messages</span>, <span class=\\"string\\">&quot;Opened!&quot;</span>),\\n</span><span class=\\"line\\">          <span class=\\"variable\\">socket</span>: <span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Just</span>(<span class=\\"variable\\">socket</span>)\\n</span><span class=\\"line\\">        }\\n</span><span class=\\"line\\">      },\\n</span><span class=\\"line\\">    <span class=\\"variable\\">onMessage</span>:\\n</span><span class=\\"line\\">      (<span class=\\"variable\\">message</span> : <span class=\\"type\\">String</span>) {\\n</span><span class=\\"line\\">        <span class=\\"keyword\\">next</span> { <span class=\\"variable\\">messages</span>: <span class=\\"type\\">Array</span>.<span class=\\"variable\\">push</span>(<span class=\\"variable\\">messages</span>, <span class=\\"variable\\">message</span>) }\\n</span><span class=\\"line\\">      },\\n</span><span class=\\"line\\">    <span class=\\"variable\\">onError</span>:\\n</span><span class=\\"line\\">      () {\\n</span><span class=\\"line\\">        <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;Error!&quot;</span>)\\n</span><span class=\\"line\\">        <span class=\\"keyword\\">next</span> { }\\n</span><span class=\\"line\\">      },\\n</span><span class=\\"line\\">    <span class=\\"variable\\">onClose</span>:\\n</span><span class=\\"line\\">      () {\\n</span><span class=\\"line\\">        <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;Close!&quot;</span>)\\n</span><span class=\\"line\\">        <span class=\\"keyword\\">next</span> { }\\n</span><span class=\\"line\\">      }\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">      &lt;<span class=\\"namespace\\">button</span>\\n</span><span class=\\"line\\">        onClick={\\n</span><span class=\\"line\\">          () {\\n</span><span class=\\"line\\">            <span class=\\"keyword\\">if</span> <span class=\\"keyword\\">let</span> <span class=\\"type\\">Just</span>(<span class=\\"variable\\">item</span>) = <span class=\\"variable\\">socket</span> {\\n</span><span class=\\"line\\">              <span class=\\"type\\">WebSocket</span>.<span class=\\"variable\\">send</span>(<span class=\\"variable\\">item</span>, <span class=\\"string\\">&quot;Message!&quot;</span>)\\n</span><span class=\\"line\\">            }\\n</span><span class=\\"line\\">          }\\n</span><span class=\\"line\\">        }&gt;\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">        <span class=\\"string\\">&quot;Send a message&quot;</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">      &lt;/<span class=\\"namespace\\">button</span>&gt;\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">      <span class=\\"keyword\\">for</span> message <span class=\\"keyword\\">of</span> <span class=\\"variable\\">messages</span> {\\n</span><span class=\\"line\\">        &lt;<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">          <span class=\\"variable\\">message</span>\\n</span><span class=\\"line\\">        &lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">      }\\n</span><span class=\\"line\\">    &lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.WebSocket","n":"Provider.WebSocket"},{"k":2,"e":[{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>The observers.</p>","v":"[]","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">Provider</span>.<span class=\\"type\\">Intersection</span>, <span class=\\"type\\">IntersectionObserver</span>))","n":"observers"}],"d":"<p>A provider to provide events when the given element is visible on the screen,\\nusing the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\\">Intersection Observer Web API</a>.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">state</span> <span class=\\"variable\\">intersecting</span> : <span class=\\"type\\">Bool</span> = <span class=\\"keyword\\">false</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.Intersection</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">callback</span>: (<span class=\\"variable\\">amount</span> : <span class=\\"type\\">Number</span>) { <span class=\\"keyword\\">next</span> { <span class=\\"variable\\">intersecting</span>: <span class=\\"variable\\">amount</span> <span class=\\"operator\\">!=</span> <span class=\\"number\\">1</span> } },\\n</span><span class=\\"line\\">    <span class=\\"variable\\">rootMargin</span>: <span class=\\"string\\">&quot;0px&quot;</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">threshold</span>: <span class=\\"number\\">1</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">element</span>: <span class=\\"variable\\">div</span>\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">style</span> <span class=\\"variable\\">div</span> {\\n</span><span class=\\"line\\">    <span class=\\"property\\">animation</span>: animate 2s both alternate infinite;\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">    <span class=\\"property\\">box-sizing</span>: border-box;\\n</span><span class=\\"line\\">    <span class=\\"property\\">position</span>: absolute;\\n</span><span class=\\"line\\">    <span class=\\"property\\">background</span>: black;\\n</span><span class=\\"line\\">    <span class=\\"property\\">color</span>: white;\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">    <span class=\\"property\\">place-content</span>: center;\\n</span><span class=\\"line\\">    <span class=\\"property\\">display</span>: grid;\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">    <span class=\\"property\\">padding</span>: 20px;\\n</span><span class=\\"line\\">    <span class=\\"property\\">height</span>: 200px;\\n</span><span class=\\"line\\">    <span class=\\"property\\">width</span>: 200px;\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">    @keyframes animate {\\n</span><span class=\\"line\\">      0% {\\n</span><span class=\\"line\\">        <span class=\\"property\\">left</span>: 250px;\\n</span><span class=\\"line\\">      }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">      100% {\\n</span><span class=\\"line\\">        <span class=\\"property\\">left</span>: -250px;\\n</span><span class=\\"line\\">      }\\n</span><span class=\\"line\\">    }\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">      <span class=\\"keyword\\">if</span> <span class=\\"variable\\">intersecting</span> {\\n</span><span class=\\"line\\">        <span class=\\"string\\">&quot;Intersecting&quot;</span>\\n</span><span class=\\"line\\">      } <span class=\\"keyword\\">else</span> {\\n</span><span class=\\"line\\">        <span class=\\"string\\">&quot;Not Intersecting&quot;</span>\\n</span><span class=\\"line\\">      }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">      &lt;<span class=\\"namespace\\">div</span>::div <span class=\\"keyword\\">as</span> <span class=\\"variable\\">div</span>&gt;<span class=\\"string\\">&quot;Hello World!&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">    &lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.Intersection","n":"Provider.Intersection"},{"k":2,"e":[{"k":4,"d":"<p>Call the subscribers.</p>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"process"},{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"v":"<span class=\\"number\\">-1</span>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"id"}],"d":"<p>A provider for periodic updates (every 1 seconds).</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">state</span> <span class=\\"variable\\">count</span> : <span class=\\"type\\">Number</span> = <span class=\\"number\\">0</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.Tick</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">ticks</span>:\\n</span><span class=\\"line\\">      () {\\n</span><span class=\\"line\\">        <span class=\\"keyword\\">next</span> { <span class=\\"variable\\">count</span>: <span class=\\"variable\\">count</span> <span class=\\"operator\\">+</span> <span class=\\"number\\">1</span> }\\n</span><span class=\\"line\\">      }\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">count</span><span class=\\"string\\">}&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.Tick","n":"Provider.Tick"},{"k":2,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>","n":"event"}],"d":"<p>The event handler.</p>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"handle"},{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>The listener unsubscribe function.</p>","v":"<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>))","n":"listener"}],"d":"<p>A provider to provide events when clicking outside of one of the elements.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.OutsideClick</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">elements</span>: [<span class=\\"variable\\">root</span>],\\n</span><span class=\\"line\\">    <span class=\\"variable\\">clicks</span>:\\n</span><span class=\\"line\\">      () {\\n</span><span class=\\"line\\">        <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;Clicked outside!&quot;</span>)\\n</span><span class=\\"line\\">        <span class=\\"keyword\\">next</span> { }\\n</span><span class=\\"line\\">      }\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span> <span class=\\"keyword\\">as</span> <span class=\\"variable\\">root</span>&gt;<span class=\\"string\\">&quot;Hello World!&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.OutsideClick","n":"Provider.OutsideClick"},{"k":2,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Number</span>","n":"timestamp"}],"d":"<p>Notifies all subscribers.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"notify"},{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>The current animation frame callback ID.</p>","v":"<span class=\\"number\\">-1</span>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"id"}],"d":"<p>A provider for the <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame\\"><code>requestAnimationFrame</code></a> Web API.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">state</span> <span class=\\"variable\\">id</span> : <span class=\\"type\\">Number</span> = <span class=\\"number\\">0</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.AnimationFrame</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">frames</span>: (<span class=\\"variable\\">id</span> : <span class=\\"type\\">Number</span>) {\\n</span><span class=\\"line\\">      <span class=\\"keyword\\">next</span> { <span class=\\"variable\\">id</span>: <span class=\\"variable\\">id</span> }\\n</span><span class=\\"line\\">    }\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">      <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">id</span><span class=\\"string\\">}&quot;</span>\\n</span><span class=\\"line\\">    &lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.AnimationFrame","n":"Provider.AnimationFrame"},{"k":2,"e":[{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>The unsubscribe functions.</p>","v":"<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>), <span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>)))","n":"listeners"}],"d":"<p>A provider for global keyboard events.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">state</span> <span class=\\"variable\\">keyCode</span> : <span class=\\"type\\">Number</span> = <span class=\\"number\\">0</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.Keyboard</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">downs</span>: (<span class=\\"variable\\">event</span> : <span class=\\"type\\">Html.Event</span>) { <span class=\\"keyword\\">next</span> { <span class=\\"variable\\">keyCode</span>: <span class=\\"variable\\">event</span>.<span class=\\"variable\\">keyCode</span> } },\\n</span><span class=\\"line\\">    <span class=\\"variable\\">ups</span>: (<span class=\\"variable\\">event</span> : <span class=\\"type\\">Html.Event</span>) { <span class=\\"keyword\\">next</span> { <span class=\\"variable\\">keyCode</span>: <span class=\\"variable\\">event</span>.<span class=\\"variable\\">keyCode</span> } }\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">keyCode</span><span class=\\"string\\">}&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.Keyboard","n":"Provider.Keyboard"},{"k":2,"e":[{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>The unsubscribe functions.</p>","v":"<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>), <span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>), <span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>)))","n":"listeners"},{"k":9,"d":"<p>The state to hold the animation frame ID.</p>","v":"<span class=\\"number\\">0</span>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"id"}],"d":"<p>A provider for global mouse events.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">state</span> <span class=\\"variable\\">position</span> : <span class=\\"type\\">Tuple</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">Number</span>) = {<span class=\\"number\\">0</span>, <span class=\\"number\\">0</span>}\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.Mouse</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">clicks</span>: <span class=\\"type\\">Promise</span>.<span class=\\"variable\\">never1</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">ups</span>: <span class=\\"type\\">Promise</span>.<span class=\\"variable\\">never1</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">moves</span>: (<span class=\\"variable\\">event</span> : <span class=\\"type\\">Html.Event</span>) {\\n</span><span class=\\"line\\">      <span class=\\"keyword\\">next</span> {\\n</span><span class=\\"line\\">        <span class=\\"variable\\">position</span>: {<span class=\\"variable\\">event</span>.<span class=\\"variable\\">pageX</span>, <span class=\\"variable\\">event</span>.<span class=\\"variable\\">pageY</span>}\\n</span><span class=\\"line\\">      }\\n</span><span class=\\"line\\">    }\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">position</span>[<span class=\\"number\\">0</span>]<span class=\\"string\\">},</span><span class=\\"string\\"> #{</span><span class=\\"variable\\">position</span>[<span class=\\"number\\">1</span>]<span class=\\"string\\">}&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.Mouse","n":"Provider.Mouse"},{"k":2,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">MutationObserver</span>.<span class=\\"type\\">Entry</span>)","n":"entries"}],"d":"<p>Notifies the subscribers when changes occur.</p>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Array</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)))","n":"notify"},{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>Keep a state of all observed elements.</p>","v":"[]","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>))","n":"observedElements"},{"k":9,"d":"<p>The mutation observer.</p>","v":"<span class=\\"type\\">MutationObserver</span>.<span class=\\"variable\\">new</span>(<span class=\\"variable\\">notify</span>)","b":false,"n":"observer"}],"d":"<p>A provider to provide events when the DOM structure of the element changes.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">state</span> <span class=\\"variable\\">counter</span> : <span class=\\"type\\">Number</span> = <span class=\\"number\\">0</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.Mutation</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">element</span>: <span class=\\"variable\\">root</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">changes</span>:\\n</span><span class=\\"line\\">      () {\\n</span><span class=\\"line\\">        <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"string\\">&quot;The contents changed!&quot;</span>)\\n</span><span class=\\"line\\">        <span class=\\"keyword\\">next</span> { }\\n</span><span class=\\"line\\">      }\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span> <span class=\\"keyword\\">as</span> <span class=\\"variable\\">root</span>&gt;\\n</span><span class=\\"line\\">      <span class=\\"type\\">Number</span>.<span class=\\"variable\\">toString</span>(<span class=\\"variable\\">counter</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">      &lt;<span class=\\"namespace\\">button</span> onClick={() { <span class=\\"keyword\\">next</span> { <span class=\\"variable\\">counter</span>: <span class=\\"variable\\">counter</span> <span class=\\"operator\\">+</span> <span class=\\"number\\">1</span> } }}&gt;\\n</span><span class=\\"line\\">        <span class=\\"string\\">&quot;Increment&quot;</span>\\n</span><span class=\\"line\\">      &lt;/<span class=\\"namespace\\">button</span>&gt;\\n</span><span class=\\"line\\">    &lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.Mutation","n":"Provider.Mutation"},{"k":2,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>","n":"event"}],"d":"<p>Handles the resize events.</p>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"handle"},{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>The listener unsubscribe function.</p>","v":"<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>))","n":"listener"}],"d":"<p>A provider for handling changes of the viewport.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">state</span> <span class=\\"variable\\">size</span> : <span class=\\"type\\">Tuple</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">Number</span>) = {<span class=\\"type\\">Window</span>.<span class=\\"variable\\">width</span>(), <span class=\\"type\\">Window</span>.<span class=\\"variable\\">height</span>()}\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.Resize</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">resizes</span>:\\n</span><span class=\\"line\\">      (<span class=\\"variable\\">event</span> : <span class=\\"type\\">Html.Event</span>) {\\n</span><span class=\\"line\\">        <span class=\\"keyword\\">next</span> { <span class=\\"variable\\">size</span>: {<span class=\\"type\\">Window</span>.<span class=\\"variable\\">width</span>(), <span class=\\"type\\">Window</span>.<span class=\\"variable\\">height</span>()} }\\n</span><span class=\\"line\\">      }\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">size</span>[<span class=\\"number\\">0</span>]<span class=\\"string\\">},</span><span class=\\"string\\"> #{</span><span class=\\"variable\\">size</span>[<span class=\\"number\\">1</span>]<span class=\\"string\\">}&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.Resize","n":"Provider.Resize"},{"k":2,"e":[{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>The listeners.</p>","v":"<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()","b":false,"t":"<span class=\\"type\\">Map</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>))","n":"listeners"}],"d":"<p>This provider sends changes when the media query in the subscription changes.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">state</span> <span class=\\"variable\\">matches</span> : <span class=\\"type\\">Bool</span> = <span class=\\"keyword\\">false</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.MediaQuery</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">query</span>: <span class=\\"string\\">&quot;(max-width: 1000px)&quot;</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">changes</span>: -&gt; <span class=\\"variable\\">matches</span>\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">      <span class=\\"type\\">Bool</span>.<span class=\\"variable\\">toString</span>(<span class=\\"variable\\">matches</span>)\\n</span><span class=\\"line\\">    &lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.MediaQuery","n":"Provider.MediaQuery"},{"k":2,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">ResizeObserver</span>.<span class=\\"type\\">Entry</span>)","n":"entries"}],"d":"<p>Notifies all subscribers when there are changes.</p>","b":true,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Array</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)))","n":"notify"},{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>All observed elements.</p>","v":"[]","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Dom</span>.<span class=\\"type\\">Element</span>))","n":"observedElements"},{"k":9,"d":"<p>The resize observer.</p>","v":"<span class=\\"type\\">ResizeObserver</span>.<span class=\\"variable\\">new</span>(<span class=\\"variable\\">notify</span>)","b":false,"n":"observer"}],"d":"<p>A provider which provides events when the size of the element changes.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">state</span> <span class=\\"variable\\">height</span> : <span class=\\"type\\">Number</span> = <span class=\\"number\\">0</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.ElementSize</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">element</span>: <span class=\\"variable\\">base</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">changes</span>: (<span class=\\"variable\\">dimensions</span> : <span class=\\"type\\">Dom.Dimensions</span>) {\\n</span><span class=\\"line\\">      <span class=\\"keyword\\">next</span> { <span class=\\"variable\\">height</span>: <span class=\\"variable\\">dimensions</span>.<span class=\\"variable\\">height</span> }\\n</span><span class=\\"line\\">    }\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span> <span class=\\"keyword\\">as</span> <span class=\\"variable\\">base</span>&gt;\\n</span><span class=\\"line\\">      <span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">height</span><span class=\\"string\\">}&quot;</span>\\n</span><span class=\\"line\\">    &lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.ElementSize","n":"Provider.ElementSize"},{"k":2,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>","n":"event"}],"d":"<p>Handles the scroll events.</p>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"handle"},{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>The listener unsubscribe function.</p>","v":"<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>))","n":"listener"}],"d":"<p>A provider for global scroll events.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">state</span> <span class=\\"variable\\">scrollTop</span> : <span class=\\"type\\">Number</span> = <span class=\\"number\\">0</span>\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.Scroll</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">scrolls</span>:\\n</span><span class=\\"line\\">      (<span class=\\"variable\\">event</span> : <span class=\\"type\\">Html.Event</span>) {\\n</span><span class=\\"line\\">        <span class=\\"keyword\\">next</span> { <span class=\\"variable\\">scrollTop</span>: <span class=\\"type\\">Window</span>.<span class=\\"variable\\">scrollTop</span>() }\\n</span><span class=\\"line\\">      }\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">style</span> <span class=\\"variable\\">root</span> {\\n</span><span class=\\"line\\">    <span class=\\"property\\">height</span>: 200vh;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">style</span> <span class=\\"variable\\">position</span> {\\n</span><span class=\\"line\\">    <span class=\\"property\\">position</span>: fixed;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span>::root&gt;\\n</span><span class=\\"line\\">      &lt;<span class=\\"namespace\\">div</span>::position&gt;<span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">scrollTop</span><span class=\\"string\\">}&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">    &lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.Scroll","n":"Provider.Scroll"},{"k":2,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>","n":"event"}],"d":"<p>The <code>keyUp</code> event handler.</p>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"handleKeyUp"},{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>","n":"event"}],"d":"<p>The <code>keyDown</code> event handler.</p>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"handleKeyDown"},{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>The listener unsubscribe functions.</p>","v":"<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>), <span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>)))","n":"listeners"}],"d":"<p>A provider to provide the tab in and tab out events for an element.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.TabFocus</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">onTabOut</span>: () { <span class=\\"type\\">Window</span>.<span class=\\"variable\\">alert</span>(<span class=\\"string\\">&quot;Tabbed Out!&quot;</span>) },\\n</span><span class=\\"line\\">    <span class=\\"variable\\">onTabIn</span>: () { <span class=\\"type\\">Window</span>.<span class=\\"variable\\">alert</span>(<span class=\\"string\\">&quot;Tabbed In!&quot;</span>) },\\n</span><span class=\\"line\\">    <span class=\\"variable\\">element</span>: <span class=\\"variable\\">input</span>\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">input</span> <span class=\\"keyword\\">as</span> <span class=\\"variable\\">input</span>/&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.TabFocus","n":"Provider.TabFocus"},{"k":2,"e":[{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>The listener unsubscribe functions.</p>","v":"<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>","b":true,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Tuple</span>(<span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>), <span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>), <span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>)))","n":"listeners"},{"k":9,"d":"<p>The state to hold the animation frame id.</p>","v":"<span class=\\"number\\">0</span>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"id"}],"d":"<p>A provider for global pointer events.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">state</span> <span class=\\"variable\\">position</span> : <span class=\\"type\\">Tuple</span>(<span class=\\"type\\">Number</span>, <span class=\\"type\\">Number</span>) = {<span class=\\"number\\">0</span>, <span class=\\"number\\">0</span>}\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.Pointer</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">downs</span>: <span class=\\"type\\">Promise</span>.<span class=\\"variable\\">never1</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">ups</span>: <span class=\\"type\\">Promise</span>.<span class=\\"variable\\">never1</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">moves</span>: (<span class=\\"variable\\">event</span> : <span class=\\"type\\">Html.Event</span>) {\\n</span><span class=\\"line\\">      <span class=\\"keyword\\">next</span> {\\n</span><span class=\\"line\\">        <span class=\\"variable\\">position</span>: {<span class=\\"variable\\">event</span>.<span class=\\"variable\\">pageX</span>, <span class=\\"variable\\">event</span>.<span class=\\"variable\\">pageY</span>}\\n</span><span class=\\"line\\">      }\\n</span><span class=\\"line\\">    }\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span>&gt;<span class=\\"string\\">&quot;#{</span><span class=\\"variable\\">position</span>[<span class=\\"number\\">0</span>]<span class=\\"string\\">},</span><span class=\\"string\\"> #{</span><span class=\\"variable\\">position</span>[<span class=\\"number\\">1</span>]<span class=\\"string\\">}&quot;</span>&lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.Pointer","n":"Provider.Pointer"},{"k":2,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">Html</span>.<span class=\\"type\\">Event</span>","n":"event"}],"d":"<p>The event handler.</p>","b":false,"t":"<span class=\\"type\\">Array</span>(<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>))","n":"handle"},{"k":4,"d":"<p>Updates the provider.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"update"},{"k":9,"d":"<p>The unsubscribe function.</p>","v":"<span class=\\"type\\">Maybe</span>.<span class=\\"type\\">Nothing</span>","b":false,"t":"<span class=\\"type\\">Maybe</span>(<span class=\\"type\\">Function</span>(<span class=\\"type\\">Void</span>))","n":"listener"}],"d":"<p>A provider for global <code>popstate</code> events, which emits the current URL.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">component</span> <span class=\\"type\\">Main</span> {\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">use</span> <span class=\\"type\\">Provider.Url</span> {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">changes</span>:\\n</span><span class=\\"line\\">      (<span class=\\"variable\\">url</span> : <span class=\\"type\\">Url</span>) {\\n</span><span class=\\"line\\">        <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"variable\\">url</span>)\\n</span><span class=\\"line\\">        <span class=\\"keyword\\">next</span> { }\\n</span><span class=\\"line\\">      }\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">fun</span> render : <span class=\\"type\\">Html</span> {\\n</span><span class=\\"line\\">    &lt;<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">      &lt;<span class=\\"namespace\\">a</span> href=<span class=\\"string\\">&quot;/home&quot;</span>&gt;\\n</span><span class=\\"line\\">        <span class=\\"string\\">&quot;Home&quot;</span>\\n</span><span class=\\"line\\">      &lt;/<span class=\\"namespace\\">a</span>&gt;\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">      &lt;<span class=\\"namespace\\">a</span> href=<span class=\\"string\\">&quot;/&quot;</span>&gt;\\n</span><span class=\\"line\\">        <span class=\\"string\\">&quot;Root&quot;</span>\\n</span><span class=\\"line\\">      &lt;/<span class=\\"namespace\\">a</span>&gt;\\n</span><span class=\\"line\\">    &lt;/<span class=\\"namespace\\">div</span>&gt;\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"keyword\\">routes</span> {\\n</span><span class=\\"line\\">  * {\\n</span><span class=\\"line\\">    <span class=\\"string\\">&quot;&quot;</span>\\n</span><span class=\\"line\\">  }\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Provider.Url","n":"Provider.Url"},{"k":8,"e":[{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"label"}],"d":"<p>Resets the counter with the label to 0.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"clear"},{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"label"}],"d":"<p>Returns the current count of the counter with the label.</p>","b":false,"t":"<span class=\\"type\\">Number</span>","n":"get"},{"k":4,"a":[{"v":"<span class=\\"string\\">&quot;Default&quot;</span>","t":"<span class=\\"type\\">String</span>","n":"label"}],"d":"<p>Increments the counter with the label.</p>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"increment"},{"k":9,"d":"<p>State for the counts of each counter.</p>","v":"<span class=\\"type\\">Map</span>.<span class=\\"variable\\">empty</span>()","b":false,"t":"<span class=\\"type\\">Map</span>(<span class=\\"type\\">String</span>, <span class=\\"type\\">Number</span>)","n":"counts"}],"d":"<p>This store for saving the value of the console counters.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"type\\">Counter</span>.<span class=\\"variable\\">increment</span>(<span class=\\"string\\">&quot;My Label&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"type\\">Counter</span>.<span class=\\"variable\\">get</span>(<span class=\\"string\\">&quot;My Label&quot;</span>) <span class=\\"comment\\">// 1</span>\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"type\\">Counter</span>.<span class=\\"variable\\">clear</span>(<span class=\\"string\\">&quot;My Label&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"type\\">Console</span>.<span class=\\"type\\">Counter</span>.<span class=\\"variable\\">get</span>(<span class=\\"string\\">&quot;My Label&quot;</span>) <span class=\\"comment\\">// 0</span></span></code></pre>","l":"Console.Counter","n":"Console.Counter"},{"k":8,"e":[{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"id"}],"d":"<p>Aborts the running request with the id.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Http</span>.<span class=\\"variable\\">abort</span>(<span class=\\"string\\">&quot;my-request&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"abort"},{"k":4,"d":"<p>Aborts all running requests.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Http</span>.<span class=\\"variable\\">abortAll</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Void</span>)","n":"abortAll"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Creates a request record where the method is <code>DELETE</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Http</span>.<span class=\\"variable\\">delete</span>(<span class=\\"string\\">&quot;https://httpbin.org/delete&quot;</span>).<span class=\\"variable\\">method</span> <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;DELETE&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"delete"},{"k":4,"d":"<p>Creates an empty request record. It is useful if you want to use a\\nnon-standard HTTP method.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Http</span>.<span class=\\"variable\\">empty</span>() <span class=\\"operator\\">==</span>\\n</span><span class=\\"line\\">  {\\n</span><span class=\\"line\\">    <span class=\\"variable\\">withCredentials</span>: <span class=\\"keyword\\">false</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">method</span>: <span class=\\"string\\">&quot;GET&quot;</span>,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">body</span>: \`null\`,\\n</span><span class=\\"line\\">    <span class=\\"variable\\">headers</span>: [],\\n</span><span class=\\"line\\">    <span class=\\"variable\\">url</span>: <span class=\\"string\\">&quot;&quot;</span>\\n</span><span class=\\"line\\">  }</span></code></pre>","b":false,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"empty"},{"k":4,"a":[{"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"request"},{"t":"<span class=\\"type\\">FormData</span>","n":"body"}],"d":"<p>Sets the body of the request to the provided <code>FormData</code> object.</p><pre><code><span class=\\"line\\"><span class=\\"keyword\\">let</span> formData =\\n</span><span class=\\"line\\">  <span class=\\"type\\">FormData</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">FormData</span>.<span class=\\"variable\\">addString</span>(<span class=\\"string\\">&quot;key&quot;</span>, <span class=\\"string\\">&quot;value&quot;</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"string\\">&quot;https://httpbin.org/anything&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">post</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">formDataBody</span>(<span class=\\"variable\\">formData</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">send</span>()</span></code></pre>","b":true,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"formDataBody"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"urlValue"}],"d":"<p>Creates a request record where the method is <code>GET</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Http</span>.<span class=\\"variable\\">get</span>(<span class=\\"string\\">&quot;https://httpbin.org/get&quot;</span>).<span class=\\"variable\\">method</span> <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;GET&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"get"},{"k":4,"a":[{"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"request"},{"t":"<span class=\\"type\\">String</span>","n":"key"}],"d":"<p>Checks the prescence of a header with the key.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Http</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">header</span>(<span class=\\"string\\">&quot;Content-Type&quot;</span>, <span class=\\"string\\">&quot;application/json&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">hasHeader</span>(<span class=\\"string\\">&quot;Content-Type&quot;</span>) <span class=\\"operator\\">==</span> <span class=\\"keyword\\">true</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Bool</span>","n":"hasHeader"},{"k":4,"a":[{"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"request"},{"t":"<span class=\\"type\\">String</span>","n":"key"},{"t":"<span class=\\"type\\">String</span>","n":"value"}],"d":"<p>Adds a header to the request with the key and value. Overwrites the value\\nif key already exists.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Http</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">header</span>(<span class=\\"string\\">&quot;Content-Type&quot;</span>, <span class=\\"string\\">&quot;application/json&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"header"},{"k":4,"a":[{"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"request"},{"t":"<span class=\\"type\\">Object</span>","n":"body"}],"d":"<p>Sets the body of the request to the object encoded to JSON.</p><pre><code><span class=\\"line\\"><span class=\\"string\\">&quot;https://httpbin.org/anything&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">post</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">jsonBody</span>(encode { name = &quot;John&quot; })\\n</span><span class=\\"line\\">|&gt; Http.send()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"jsonBody"},{"k":4,"a":[{"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"request"},{"t":"<span class=\\"type\\">String</span>","n":"method"}],"d":"<p>Sets the method of the request.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Http</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">method</span>(<span class=\\"string\\">&quot;PATCH&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"method"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"urlValue"}],"d":"<p>Creates a request record where the method is <code>POST</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Http</span>.<span class=\\"variable\\">post</span>(<span class=\\"string\\">&quot;https://httpbin.org/post&quot;</span>).<span class=\\"variable\\">method</span> <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;POST&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"post"},{"k":4,"a":[{"t":"<span class=\\"type\\">String</span>","n":"urlValue"}],"d":"<p>Creates a request record where the method is <code>PUT</code>.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Http</span>.<span class=\\"variable\\">put</span>(<span class=\\"string\\">&quot;https://httpbin.org/put&quot;</span>).<span class=\\"variable\\">method</span> <span class=\\"operator\\">==</span> <span class=\\"string\\">&quot;PUT&quot;</span></span></code></pre>","b":false,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"put"},{"k":4,"a":[{"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"request"},{"v":"<span class=\\"type\\">Uid</span>.<span class=\\"variable\\">generate</span>()","t":"<span class=\\"type\\">String</span>","n":"id"},{"v":"(<span class=\\"variable\\">value</span> : <span class=\\"type\\">Object</span>) { <span class=\\"variable\\">void</span> }","t":"<span class=\\"type\\">Function</span>(<span class=\\"type\\">Object</span>, <span class=\\"variable\\">a</span>)","n":"instrument"}],"d":"<p>Sends the request with the ID (generated if not provided) so it could be\\naborted later. The running request with the same id is aborted before the new\\nrequest is sent.</p><pre><code><span class=\\"line\\"><span class=\\"string\\">&quot;https://httpbin.org/get&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">get</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">send</span>(<span class=\\"string\\">&quot;my-request&quot;</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Promise</span>(<span class=\\"type\\">Result</span>(<span class=\\"type\\">Http</span>.<span class=\\"type\\">ErrorResponse</span>, <span class=\\"type\\">Http</span>.<span class=\\"type\\">Response</span>))","n":"send"},{"k":4,"a":[{"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"request"},{"t":"<span class=\\"type\\">String</span>","n":"body"}],"d":"<p>Sets the body of the request as <code>String</code>.</p><pre><code><span class=\\"line\\"><span class=\\"string\\">&quot;https://httpbin.org/anything&quot;</span>\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">post</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">stringBody</span>(<span class=\\"string\\">&quot;Some string that will come back.&quot;</span>)\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">send</span>()</span></code></pre>","b":false,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"stringBody"},{"k":4,"a":[{"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"request"},{"t":"<span class=\\"type\\">String</span>","n":"url"}],"d":"<p>Sets the URL of the request.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Http</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">url</span>(<span class=\\"string\\">&quot;https://httpbin.org/anything&quot;</span>)</span></code></pre>","b":false,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"url"},{"k":4,"a":[{"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"request"},{"t":"<span class=\\"type\\">Bool</span>","n":"value"}],"d":"<p>Sets the <code>withCredentials</code> of the request.</p><pre><code><span class=\\"line\\"><span class=\\"type\\">Http</span>.<span class=\\"variable\\">empty</span>()\\n</span><span class=\\"line\\"><span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">withCredentials</span>(<span class=\\"keyword\\">true</span>)</span></code></pre>","b":true,"t":"<span class=\\"type\\">Http</span>.<span class=\\"type\\">Request</span>","n":"withCredentials"},{"k":9,"d":"<p>The state for tracking requests.</p>","v":"{ } of <span class=\\"type\\">String</span> => <span class=\\"type\\">Object</span>","b":false,"n":"requests"}],"d":"<p>This store provides functions for sending and tracking HTTP requests.</p><pre><code class=\\"language-mint\\"><span class=\\"line\\"><span class=\\"keyword\\">let</span> request =\\n</span><span class=\\"line\\">  <span class=\\"keyword\\">await</span> <span class=\\"string\\">&quot;https://httpbin.org/get&quot;</span>\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">get</span>()\\n</span><span class=\\"line\\">  <span class=\\"operator\\">|&gt;</span> <span class=\\"type\\">Http</span>.<span class=\\"variable\\">send</span>()\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\"><span class=\\"keyword\\">case</span> (<span class=\\"variable\\">request</span>) {\\n</span><span class=\\"line\\">  <span class=\\"type\\">Ok</span>(<span class=\\"variable\\">response</span>) =&gt;\\n</span><span class=\\"line\\">    <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"variable\\">response</span>)\\n</span><span class=\\"line\\">\\n</span><span class=\\"line\\">  <span class=\\"type\\">Err</span>(<span class=\\"variable\\">error</span>) =&gt;\\n</span><span class=\\"line\\">    <span class=\\"type\\">Debug</span>.<span class=\\"variable\\">log</span>(<span class=\\"variable\\">error</span>)\\n</span><span class=\\"line\\">}</span></code></pre>","l":"Http","n":"Http"}]`);export default b;