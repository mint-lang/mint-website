import {createElement as A,fragment as B} from "./runtime.js";export const a=A(B,{},[A('h1',{},[`Build`]),A('p',{},[`The `,A('code',{},[`build`]),` command compiles your application into different files (`,`
`,`JavaScript, HTML, CSS) to the `,A('code',{},[`dist`]),` directory by executing these steps:`]),A('ul',{},[A('li',{},[A('p',{},[`Compiles the application into one or more JavaScript files. Each file is`,`
`,`a `,A('a',{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"},[`JavaScript module`]),`. The `,A('code',{},[`index.js`]),` file will be the entrypoint of the`,`
`,`application and other files `,A('code',{},[`1.js`]),`, `,A('code',{},[`2.js`]),`, etc... will contain dynamic`,`
`,`code from either `,A('a',{href:"/reference/components/async-components"},[`async components`]),` or from `,A('a',{href:"/reference/control-flow/defer"},[`defers`]),`.`])]),A('li',{},[A('p',{},[`Compiles the styles of each component into the `,A('code',{},[`index.css`]),` CSS file.`])]),A('li',{},[A('p',{},[`Generate a `,A('a',{href:"https://developer.mozilla.org/en-US/docs/Web/Manifest"},[`web app manifest`]),` if the `,A('code',{},[`--generate-manifest`]),` flag is used.`])]),A('li',{},[A('p',{},[`Copies all assets defined by `,A('code',{},[`@asset`]),` directives.`])]),A('li',{},[A('p',{},[`Generate favicons and application icons if they are set in the`,`
`,A('code',{},[`mint.json`]),` file.`])]),A('li',{},[A('p',{},[`Copies the Mint runtime `,A('code',{},[`runtime.js`]),` and all files under the `,A('code',{},[`public`]),`
`,`directory.`])]),A('li',{},[A('p',{},[`Generates the `,A('code',{},[`index.html`]),` file which will link the previously generated`,`
`,`things.`])])]),A('p',{},[`To avoid conflicts with public files all assets generated by mint will be`,`
`,`in the `,A('code',{},[`__mint__`]),` directory.`]),A('p',{},[`This is what building the scaffolded application by `,A('code',{},[`init`]),` looks like (`,`
`,`asset hashes excluded):`]),A('pre',{},[A('code',{class:"language-bash"},[A('span',{class:"line"},[`➔ mint build --timings --verbose`]),A('span',{class:"line"},[`Mint - Building for production...`]),A('span',{class:"line"},[`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`]),A('span',{class:"line"},[`Building for production...`]),A('span',{class:"line"},[`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`]),A('span',{class:"line"},[`⚙ Clearing the "dist" directory..." 2.951ms`]),A('span',{class:"line"},[`⚙ Building... 20.548ms`]),A('span',{class:"line"},[`⚙ Writing __mint__/bottom-center.png (38.1KB)... 114μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/bottom-right.png (62.4KB)... 38μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/bottom-left.png (52.0KB)... 34μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/top-center.png (36.2KB)... 29μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/top-right.png (60.6KB)... 40μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/top-left.png (48.1KB)... 36μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-512x512.png (100KB)... 92μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-256x256.png (35.4KB)... 77μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-196x196.png (24.4KB)... 67μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-192x192.png (23.2KB)... 63μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-180x180.png (21.6KB)... 66μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-167x167.png (19.2KB)... 58μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-152x152.png (16.7KB)... 63μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-144x144.png (15.1KB)... 88μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-128x128.png (12.6KB)... 64μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-120x120.png (11.5KB)... 63μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-96x96.png (8.28KB)... 60μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-76x76.png (5.83KB)... 62μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-72x72.png (5.35KB)... 60μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-57x57.png (3.89KB)... 59μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-48x48.png (2.95KB)... 52μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-36x36.png (2.0KB)... 47μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-32x32.png (1.75KB)... 48μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/icon-16x16.png (1.23KB)... 63μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/runtime.js (49.6KB)... 59μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/index.css (1.46KB)... 30μs`]),A('span',{class:"line"},[`⚙ Writing __mint__/index.js (11.6KB)... 36μs`]),A('span',{class:"line"},[`⚙ Writing index.html (2.55KB)... 36μs`]),A('span',{class:"line"},[`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`]),A('span',{class:"line"},[`Bundle size: 674KB`]),A('span',{class:"line"},[`Files: 28`]),A('span',{class:"line"},[`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`]),A('span',{class:"line"},[`Parsing files                              | 1.726ms`]),A('span',{class:"line"},[`Type Checking                              | 131.481ms`]),A('span',{class:"line"},[`Building application                       | 22μs`]),A('span',{class:"line"},[`  Compiling intermediate representation... | 1.318ms`]),A('span',{class:"line"},[`  Calculating dependencies for bundles...  | 20.256ms`]),A('span',{class:"line"},[`  Bundling and rendering JavaScript...     | 2.995ms`]),A('span',{class:"line"},[`Generating index.html                      | 0μs`]),A('span',{class:"line"},[`Generating icons                           | 61μs`]),A('span',{class:"line"},[`Copying assets                             | 422μs`]),A('span',{class:"line"},[`Building index.css                         | 123μs`]),A('span',{class:"line"},[`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`]),A('span',{class:"line"},[`All done in 435.55ms!`])])]),A('p',{},[`The result bundle (in the `,A('code',{},[`dist`]),` directory) can be statically served by a`,`
`,`web server.`]),A('h2',{},[`Help`]),A('pre',{},[A('code',{class:"language-bash"},[A('span',{class:"line"},[`➔ mint build --help`]),A('span',{class:"line"},[`Usage:`]),A('span',{class:"line"},[`  mint build [flags...] [arg...]`]),A('span',{class:"line"},[``]),A('span',{class:"line"},[`Builds the project for production.`]),A('span',{class:"line"},[``]),A('span',{class:"line"},[`Flags:`]),A('span',{class:"line"},[`  --env, -e               # Loads the given .env file.`]),A('span',{class:"line"},[`  --generate-manifest     # If specified, the web manifest will be generated.`]),A('span',{class:"line"},[`  --generate-source-maps  # If specified, source maps will be generated.`]),A('span',{class:"line"},[`  --help                  # Displays help for the current command.`]),A('span',{class:"line"},[`  --no-optimize           # If specified, the resulting JavaScript code will not be optimized.`]),A('span',{class:"line"},[`  --runtime               # If specified, the supplied runtime will be used instead of the default.`]),A('span',{class:"line"},[`  --skip-icons            # If specified, the application icons will not be generated.`]),A('span',{class:"line"},[`  --timings               # If specified, timings will be printed.`]),A('span',{class:"line"},[`  --verbose               # If specified, all written files will be logged.`]),A('span',{class:"line"},[`  --watch, -w             # If specified, will build on every change.`])])])]),b=a;export default b;