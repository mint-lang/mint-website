import {createElement as A,fragment as B} from "./runtime.js";export const a=A(B,{},[A('h1',{},[`Format`]),A('p',{},[`The `,A('code',{},[`format`]),` command formats `,A('code',{},[`*.mint`]),` files. By default, it will format all`,`
`,`source and test files in the current project.`]),A('h2',{},[`Specifying files to format`]),A('p',{},[`You can specify the file or pattern of files to format by passing it as an`,`
`,`argument. For example, this only formats one file:`]),A('pre',{},[A('code',{class:"language-bash"},[A('span',{class:"line"},[`➔ mint format source/Main.mint`])])]),A('p',{},[`Using a pattern to format all files:`]),A('pre',{},[A('code',{class:"language-bash"},[A('span',{class:"line"},[`➔ mint format "**/*.mint"`])])]),A('p',{},[`It`,`'`,`s important that you pass the pattern as a string, since the command`,`
`,`only takes one argument and `,A('a',{href:"https://en.wikipedia.org/wiki/Glob_(programming)"},[`globs`]),` that.`]),A('h2',{},[`Checking for differences`]),A('p',{},[`The command can be used to check the files if they are formatted or not,`,`
`,`instead of formatting them using the `,A('code',{},[`--check`]),` flag.`]),A('pre',{},[A('code',{class:"language-bash"},[A('span',{class:"line"},[`➔ mint format --check`]),A('span',{class:"line"},[`Mint - Formatting files`]),A('span',{class:"line"},[`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`]),A('span',{class:"line"},[`Not formatted: source/Main.mint`]),A('span',{class:"line"},[`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`]),A('span',{class:"line"},[`All done in 138.628ms!`])])]),A('p',{},[`If there are not formatted files the command exists with exit code `,A('code',{},[`1`]),`
`,`otherwise it will exit with exit code `,A('code',{},[`0`]),`.`]),A('h2',{},[`Formatting from standard input`]),A('p',{},[`You can format the value of the `,A('a',{href:"https://en.wikipedia.org/wiki/Standard_streams"},[`standard input`]),` using the `,A('code',{},[`--stdin`]),` flag,`,`
`,`which will print the formatted code in the `,A('a',{href:"https://en.wikipedia.org/wiki/Standard_streams"},[`standard output`]),`. This allows`,`
`,`piping into the command.`]),A('p',{},[`Here is an example of formatting a file in place using the flag:`]),A('pre',{},[A('code',{class:"language-bash"},[A('span',{class:"line"},[`➔ cat source/Main.mint | mint format --stdin > source/Main.mint`])])]),A('h2',{},[`Help`]),A('pre',{},[A('code',{class:"language-bash"},[A('span',{class:"line"},[`➔ mint format --help`]),A('span',{class:"line"},[`Usage:`]),A('span',{class:"line"},[`  mint format [flags...] <pattern> [arg...]`]),A('span',{class:"line"},[``]),A('span',{class:"line"},[`Formats .mint files.`]),A('span',{class:"line"},[``]),A('span',{class:"line"},[`Flags:`]),A('span',{class:"line"},[`  --check  # Checks that formatting code produces no changes.`]),A('span',{class:"line"},[`  --help   # Displays help for the current command.`]),A('span',{class:"line"},[`  --stdin  # Formats code from STDIN and writes it to STDOUT.`]),A('span',{class:"line"},[``]),A('span',{class:"line"},[`Arguments:`]),A('span',{class:"line"},[`  pattern  # The pattern which determines which files to format.`])])])]),b=a;export default b;