import {createElement as A,fragment as B} from "./runtime.js";export const a=A(B,{},[A('h1',{},[`Here Documents`]),A('p',{},[`A `,A('a',{href:"https://en.wikipedia.org/wiki/Here_document"},[`here document`]),` can be`,`
`,`useful for writing strings spanning over multiple lines. A here document is`,`
`,`denoted by `,A('code',{},[`<<-`]),`, `,A('code',{},[`<<~`]),` or `,A('code',{},[`<<#`]),` followed by a here document identifier`,`
`,`which is an `,A('strong',{},[`uppercase alphanumeric sequence`]),` starting with a letter (and`,`
`,`may include underscores). The here document starts in the following line and`,`
`,`ends with the next line that contains only the here document identifier,`,`
`,`optionally preceded by whitespace.`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[`<<-XML`,A('span',{class:"string"},[``])]),A('span',{class:"line"},[A('span',{class:"string"},[`<parent>`])]),A('span',{class:"line"},[A('span',{class:"string"},[`  <child />`])]),A('span',{class:"line"},[A('span',{class:"string"},[`</parent>`])]),A('span',{class:"line"},[A('span',{class:"string"},[``]),`XML`])])]),A('h2',{},[`Preserving whitespace`]),A('p',{},[`Leading whitespace is preserved as is.`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"keyword"},[`let`]),` `,A('span',{class:"variable"},[`content`]),` =
`]),A('span',{class:"line"},[`  <<-TEXT`,A('span',{class:"string"},[``])]),A('span',{class:"line"},[A('span',{class:"string"},[`  This is some content in the document.`])]),A('span',{class:"line"},[A('span',{class:"string"},[`  `]),`TEXT
`]),A('span',{class:"line"},[`
`]),A('span',{class:"line"},[``,A('span',{class:"comment"},[`// String equvivalent is (notice the two spaces at the fornt)`]),`
`]),A('span',{class:"line"},[``,A('span',{class:"string"},[`"  This is some content in the document."`])])])]),A('p',{},[`The type of this here document is `,A('code',{},[`String`]),`.`]),A('h2',{},[`Removing leading whitespace`]),A('p',{},[`Leading whitespace is removed from the start of each line of the here`,`
`,`document according to the number of leading whitespace in the line with`,`
`,`the least amount of leading whitespace.`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"keyword"},[`let`]),` `,A('span',{class:"variable"},[`content`]),` =
`]),A('span',{class:"line"},[`  <<~TEXT`,A('span',{class:"string"},[``])]),A('span',{class:"line"},[A('span',{class:"string"},[`  This is some content.`])]),A('span',{class:"line"},[A('span',{class:"string"},[`    This is indented by two spaces.`])]),A('span',{class:"line"},[A('span',{class:"string"},[`  `]),`TEXT
`]),A('span',{class:"line"},[`
`]),A('span',{class:"line"},[``,A('span',{class:"comment"},[`// String equvivalent is`]),`
`]),A('span',{class:"line"},[``,A('span',{class:"string"},[`"This is some content.\\n  This is indented by two spaces."`])])])]),A('p',{},[`Type type of this here document is `,A('code',{},[`String`])]),A('h2',{},[`Markdown`]),A('p',{},[`Leading whitespace is removed from the start of each line of the here`,`
`,`document according to the number of leading whitespace in the line with`,`
`,`the least amount of leading whitespace. Contents are parsed as`,`
`,A('a',{href:"https://daringfireball.net/projects/markdown/"},[`Markdown`]),` and rendered as`,`
`,A('code',{},[`Html`]),`.`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[`<<#MARKDOWN`,A('span',{class:"string"},[``])]),A('span',{class:"line"},[A('span',{class:"string"},[`# This will be a heading`])]),A('span',{class:"line"},[A('span',{class:"string"},[``])]),A('span',{class:"line"},[A('span',{class:"string"},[`And this will be a paragraph.`])]),A('span',{class:"line"},[A('span',{class:"string"},[``]),`MARKDOWN`])])]),A('h3',{},[`Highlighting Mint Code`]),A('p',{},[`Any code snippet marked as `,A('code',{},[`mint`]),` can be syntax highlighted by adding the`,`
`,A('code',{},[`highlight`]),` flag to the here document:`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[`<<#MARKDOWN(`,A('span',{class:"keyword"},[`highlight`]),`)`,A('span',{class:"string"},[``])]),A('span',{class:"line"},[A('span',{class:"string"},[`This is a paragraph.`])]),A('span',{class:"line"},[A('span',{class:"string"},[``])]),A('span',{class:"line"},[A('span',{class:"string"},[`\`\`\`mint`])]),A('span',{class:"line"},[A('span',{class:"string"},[`module Mint {`])]),A('span',{class:"line"},[A('span',{class:"string"},[`  // This will be syntax highlighted`])]),A('span',{class:"line"},[A('span',{class:"string"},[`}`])]),A('span',{class:"line"},[A('span',{class:"string"},[`\`\`\``])]),A('span',{class:"line"},[A('span',{class:"string"},[``]),`MARKDOWN`])])]),A('p',{},[`All lines are turned into `,A('code',{},[`span`]),` HTML tags with the `,A('code',{},[`className`]),` of `,A('code',{},[`line`]),`
`,`and all tokens will be turned into `,A('code',{},[`span`]),` tags with the `,A('code',{},[`className`]),` of`,`
`,`token. You are responsible for defining styles for the generated snippet.`]),A('pre',{},[A('code',{},[A('span',{class:"line"},[`<span className="line">`]),A('span',{class:"line"},[`  <span className="keyword">module</span>`]),A('span',{class:"line"},[`  <span className="keyword">Mint</span>`]),A('span',{class:"line"},[`  {`]),A('span',{class:"line"},[`</span>`]),A('span',{class:"line"},[``]),A('span',{class:"line"},[`<span className="line">`]),A('span',{class:"line"},[`  <span className="comment">  // This will be syntax highlighted</span>`]),A('span',{class:"line"},[`</span>`]),A('span',{class:"line"},[``]),A('span',{class:"line"},[`<span className="line">`]),A('span',{class:"line"},[`  }`]),A('span',{class:"line"},[`</span>`])])])]),b=a;export default b;