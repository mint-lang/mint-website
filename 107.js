import {createElement as A,fragment as B} from "./runtime.js";export const a=A(B,{},[A('h1',{},[`Literals`]),A('p',{},[`Fixed values such as `,A('strong',{},[`numbers`]),`, `,A('strong',{},[`strings`]),` and `,A('strong',{},[`booleans`]),` are`,`
`,`called literals (or primitive types), this page goes through all literal`,`
`,`types in the language.`]),A('h2',{},[`Bool`]),A('p',{},[`Represents the `,A('a',{href:"https://en.wikipedia.org/wiki/Boolean_data_type"},[`Boolean type`]),`.`,`
`,`It has two possible values:`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"keyword"},[`true`]),`
`]),A('span',{class:"line"},[``,A('span',{class:"keyword"},[`false`])])])]),A('h2',{},[`Number`]),A('p',{},[`Represents the `,A('a',{href:"https://developer.mozilla.org/en-US/docs/Glossary/Number"},[`Number type`]),`
`,`from JavaScript.`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"number"},[`3.14`]),`
`]),A('span',{class:"line"},[``,A('span',{class:"number"},[`42`]),`
`]),A('span',{class:"line"},[``,A('span',{class:"operator"},[`-`]),A('span',{class:"number"},[`10`])])])]),A('h2',{},[`String`]),A('p',{},[`Represents the `,A('a',{href:"https://developer.mozilla.org/en-US/docs/Glossary/String"},[`String type`]),`
`,`from JavaScript.`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"string"},[`"hello world"`])])])]),A('p',{},[`String concatenation works the same as in JavaScript:`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"string"},[`"hello"`]),` `,A('span',{class:"operator"},[`+`]),` `,A('span',{class:"string"},[`" world"`])])])]),A('p',{},[`Escaping works as in JavaScript:`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"string"},[`"hello \\"world\\""`])])])]),A('p',{},[`Strings can span multiple lines:`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"string"},[`"hello`])]),A('span',{class:"line"},[A('span',{class:"string"},[` world"`])])])]),A('p',{},[`And can be split into smaller consecutive parts:`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"string"},[`"hello world"`]),` `,A('span',{class:"operator"},[`==`]),` `,A('span',{class:"string"},[`"hello world"`])])])]),A('p',{},[`Expressions can be interpolated in a string with the `,A('code',{},[`#{...}`]),` syntax (only`,`
`,A('code',{},[`String`]),` and `,A('code',{},[`Number`]),`):`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"keyword"},[`let`]),` `,A('span',{class:"variable"},[`name`]),` = `,A('span',{class:"string"},[`"Joe"`]),`
`]),A('span',{class:"line"},[`
`]),A('span',{class:"line"},[``,A('span',{class:"string"},[`"Hello`]),A('span',{class:"string"},[` #{`]),A('span',{class:"variable"},[`name`]),A('span',{class:"string"},[`}"`]),` `,A('span',{class:"comment"},[`/* Hello Joe */`])])])]),A('h2',{},[`Regular Expression`]),A('p',{},[`Regular expressions are patterns used to match character combinations`,`
`,`in strings, and work mostly the same as its JavaScript counterpart:`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"regexp"},[`/ab+c/`])])])])]),b=a;export default b;