import {createElement as A,fragment as B} from "./runtime.js";export const a=A(B,{},[A('h1',{},[`Testing`]),A('p',{},[`Mint has built-in support for testing with the `,A('code',{},[`suite`]),` and `,A('code',{},[`test`]),` blocks:`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"keyword"},[`suite`]),` `,A('span',{class:"string"},[`"String"`]),` {
`]),A('span',{class:"line"},[`  `,A('span',{class:"keyword"},[`const`]),` `,A('span',{class:"type"},[`HELLO_WORLD`]),` = `,A('span',{class:"string"},[`"Hello World!"`]),`
`]),A('span',{class:"line"},[`
`]),A('span',{class:"line"},[`  `,A('span',{class:"keyword"},[`fun`]),` upperCased {
`]),A('span',{class:"line"},[`    `,A('span',{class:"type"},[`String`]),`.`,A('span',{class:"variable"},[`toUpperCase`]),`(`,A('span',{class:"type"},[`HELLO_WORLD`]),`)
`]),A('span',{class:"line"},[`  }
`]),A('span',{class:"line"},[`
`]),A('span',{class:"line"},[`  `,A('span',{class:"keyword"},[`test`]),` `,A('span',{class:"string"},[`"Hello World"`]),` {
`]),A('span',{class:"line"},[`    `,A('span',{class:"variable"},[`upperCased`]),`() `,A('span',{class:"operator"},[`==`]),` `,A('span',{class:"string"},[`"HELLO WORLD!"`]),`
`]),A('span',{class:"line"},[`  }
`]),A('span',{class:"line"},[`}`])])]),A('p',{},[`A `,A('code',{},[`suite`]),` block defines a set of tests and can have helper `,A('a',{href:"/reference/functions"},[`functions`]),` and`,`
`,A('a',{href:"/reference/constants"},[`constants`]),`. A `,A('code',{},[`test`]),` blocks defines a test which is basically an assertion`,`
`,`which defines the outcome of the test: if `,A('code',{},[`true`]),` the test passes, if `,A('code',{},[`false`]),`
`,`the test fails.`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"keyword"},[`suite`]),` `,A('span',{class:"string"},[`"Tests"`]),` {
`]),A('span',{class:"line"},[`  `,A('span',{class:"keyword"},[`test`]),` `,A('span',{class:"string"},[`"This fails!"`]),` {
`]),A('span',{class:"line"},[`    `,A('span',{class:"keyword"},[`false`]),`
`]),A('span',{class:"line"},[`  }
`]),A('span',{class:"line"},[`
`]),A('span',{class:"line"},[`  `,A('span',{class:"keyword"},[`test`]),` `,A('span',{class:"string"},[`"This passes!"`]),` {
`]),A('span',{class:"line"},[`    `,A('span',{class:"keyword"},[`true`]),`
`]),A('span',{class:"line"},[`  }
`]),A('span',{class:"line"},[`}`])])]),A('blockquote',{},[A('p',{},[`Test are only type checked and compiled when running tests.`])]),A('h2',{},[`Running tests`]),A('p',{},[`Tests can be run with the `,A('code',{},[`mint test`]),` command:`]),A('pre',{},[A('code',{class:"language-bash"},[A('span',{class:"line"},[`Mint - Running Tests`]),A('span',{class:"line"},[`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`]),A('span',{class:"line"},[`⚙ Loaded environment variables from: .env`]),A('span',{class:"line"},[`⚙ Test server started: http://127.0.0.1:3001/`]),A('span',{class:"line"},[`⚙ Starting browser...`]),A('span',{class:"line"},[`⚙ Running tests:`]),A('span',{class:"line"},[`........................................................................`]),A('span',{class:"line"},[`........................................................................`]),A('span',{class:"line"},[`........................................................................`]),A('span',{class:"line"},[`........................................................................`]),A('span',{class:"line"},[`........................................................................`]),A('span',{class:"line"},[`........................................................................`]),A('span',{class:"line"},[`........................................................................`]),A('span',{class:"line"},[`.....................................`]),A('span',{class:"line"},[`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`]),A('span',{class:"line"},[`597 tests`]),A('span',{class:"line"},[`  ➔ 597 passed`]),A('span',{class:"line"},[`  ➔ 0 failed`]),A('span',{class:"line"},[`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`]),A('span',{class:"line"},[`All done in 14.222s!`])])]),A('blockquote',{},[A('p',{},[`Above is the result of running the standard library tests.`])]),A('p',{},[`You will need to have `,A('a',{href:"https://en.wikipedia.org/wiki/Chromium_(web_browser)"},[`Chromium`]),` (or `,A('a',{href:"https://en.wikipedia.org/wiki/Google_Chrome"},[`Google Chrome`]),`) or `,A('a',{href:"https://en.wikipedia.org/wiki/Firefox"},[`Firefox`]),`
`,`installed to run tests, since we run them in a browser to be as close to`,`
`,`the metal as possible.`]),A('p',{},[`Check the `,A('a',{href:"/guides/cli/test"},[`test command`]),` for more information on running tests.`]),A('h2',{},[`Async tests`]),A('p',{},[`Tests can be asynchronous, so you can `,A('code',{},[`await`]),` things in them:`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"keyword"},[`test`]),` `,A('span',{class:"string"},[`"Asynchronous test"`]),` {
`]),A('span',{class:"line"},[`  `,A('span',{class:"keyword"},[`let`]),` `,A('span',{class:"variable"},[`data`]),` =
`]),A('span',{class:"line"},[`    `,A('span',{class:"keyword"},[`await`]),` `,A('span',{class:"type"},[`SomeModule`]),`.`,A('span',{class:"variable"},[`load`]),`()
`]),A('span',{class:"line"},[`
`]),A('span',{class:"line"},[`  `,A('span',{class:"variable"},[`data`]),` `,A('span',{class:"operator"},[`==`]),` `,A('span',{class:"string"},[`"Some value"`]),`
`]),A('span',{class:"line"},[`}`])])]),A('h2',{},[`Test context`]),A('p',{},[`A `,A('code',{},[`Test.Context(a)`]),` is a way to have multiple steps and assertions in a`,`
`,`test:`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"keyword"},[`test`]),` `,A('span',{class:"string"},[`"Context Example"`]),` {
`]),A('span',{class:"line"},[`  `,A('span',{class:"type"},[`Test`]),`.`,A('span',{class:"type"},[`Context`]),`.`,A('span',{class:"variable"},[`of`]),`(`,A('span',{class:"number"},[`5`]),`)
`]),A('span',{class:"line"},[`  `,A('span',{class:"operator"},[`|>`]),` `,A('span',{class:"type"},[`Test`]),`.`,A('span',{class:"type"},[`Context`]),`.`,A('span',{class:"variable"},[`then`]),`((`,A('span',{class:"variable"},[`number`]),` : `,A('span',{class:"type"},[`Number`]),`) { `,A('span',{class:"keyword"},[`await`]),` (`,A('span',{class:"variable"},[`number`]),` `,A('span',{class:"operator"},[`+`]),` `,A('span',{class:"number"},[`2`]),`) })
`]),A('span',{class:"line"},[`  `,A('span',{class:"operator"},[`|>`]),` `,A('span',{class:"type"},[`Test`]),`.`,A('span',{class:"type"},[`Context`]),`.`,A('span',{class:"variable"},[`assertEqual`]),`(`,A('span',{class:"number"},[`7`]),`)
`]),A('span',{class:"line"},[`}`])])]),A('p',{},[`See the `,A('a',{href:"/api/modules/Test.Context"},[`Test.Context`]),` module for more`,`
`,`information.`]),A('h2',{},[`Html Testing`]),A('p',{},[`You can test `,A('code',{},[`Html`]),` with the `,A('code',{},[`Test.Html`]),` module, which uses test contexts:`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"keyword"},[`test`]),` `,A('span',{class:"string"},[`"Html Example"`]),` {
`]),A('span',{class:"line"},[`  <`,A('span',{class:"namespace"},[`div`]),`>`,A('span',{class:"string"},[`"Hello World!"`]),`</`,A('span',{class:"namespace"},[`div`]),`>
`]),A('span',{class:"line"},[`  `,A('span',{class:"operator"},[`|>`]),` `,A('span',{class:"type"},[`Test`]),`.`,A('span',{class:"type"},[`Html`]),`.`,A('span',{class:"variable"},[`start`]),`()
`]),A('span',{class:"line"},[`  `,A('span',{class:"operator"},[`|>`]),` `,A('span',{class:"type"},[`Test`]),`.`,A('span',{class:"type"},[`Html`]),`.`,A('span',{class:"variable"},[`assertTextOf`]),`(`,A('span',{class:"string"},[`"div"`]),`, `,A('span',{class:"string"},[`"Hello World!"`]),`)
`]),A('span',{class:"line"},[`}`])])]),A('p',{},[`See the `,A('a',{href:"/api/modules/Test.Html"},[`Test.Html`]),` module for more`,`
`,`information.`]),A('h2',{},[`Referencing entities`]),A('p',{},[`You can reference HTML elements and Components in tests just like in`,`
`,A('a',{href:"/reference/components/referencing-entities"},[`Components`]),`.`]),A('pre',{},[A('code',{class:"language-mint"},[A('span',{class:"line"},[A('span',{class:"keyword"},[`test`]),` `,A('span',{class:"string"},[`"Html Example"`]),` {
`]),A('span',{class:"line"},[`  <`,A('span',{class:"namespace"},[`div`]),` `,A('span',{class:"keyword"},[`as`]),` `,A('span',{class:"variable"},[`div`]),`>`,A('span',{class:"string"},[`"Hello World!"`]),`</`,A('span',{class:"namespace"},[`div`]),`>
`]),A('span',{class:"line"},[`  `,A('span',{class:"operator"},[`|>`]),` `,A('span',{class:"type"},[`Test`]),`.`,A('span',{class:"type"},[`Html`]),`.`,A('span',{class:"variable"},[`start`]),`()
`]),A('span',{class:"line"},[`  `,A('span',{class:"operator"},[`|>`]),` `,A('span',{class:"type"},[`Test`]),`.`,A('span',{class:"type"},[`Html`]),`.`,A('span',{class:"variable"},[`map`]),`((`,A('span',{class:"variable"},[`element`]),` : `,A('span',{class:"type"},[`Dom.Element`]),`) { `,A('span',{class:"variable"},[`div`]),` `,A('span',{class:"operator"},[`!=`]),` `,A('span',{class:"type"},[`Maybe`]),`.`,A('span',{class:"type"},[`Nothing`]),` })
`]),A('span',{class:"line"},[`}`])])])]),b=a;export default b;